# programmarazione_mac_17.12.2022.py


# pip install html-table-parser-python3 
# pip install testresources
# pip install --upgrade --force-reinstall matplotlib
# pip install --upgrade --force-reinstall Pillow 
# sudo apt install python3-tk



###############################################################################################################################
######################################################### MAC VERSION #########################################################
###############################################################################################################################



from tkinter import *
from tkinter import Menu, ttk
from PIL import Image, ImageTk                          # get widget classes
from tkinter.messagebox import *                        # get standard dialogs
from tkinter.simpledialog import askstring
from tkinter.scrolledtext import ScrolledText           # or PP4E.Gui.Tour.scrolledtext
from tkinter.filedialog   import askopenfilename        # get standard dialogs
from tkinter.filedialog   import asksaveasfilename
from tkinter.filedialog   import askdirectory
from tkinter.colorchooser import askcolor               # they live in Lib\tkinter
from tkinter.messagebox   import askquestion, showerror
from tkinter.simpledialog import askfloat
from tkinter.simpledialog import askinteger
from quitter import Quitter
from pathlib import Path
from PIL import ImageTk as itk
from idlelib.tooltip import Hovertip
from tooltip import ToolTip
import tkinter.ttk as ttk
from tktooltip import ToolTip
from datetime import date, datetime
import matplotlib.pyplot as plt
import math, os, PyQt5, re, sys
import numpy as np
import tkinter as tk
import datetime
import random

global A, app_PDIE_man, app_PDIN_man, app_LysDI_man, app_MetDI_man, LysDI_ratio, MetDI_ratio, Lys_Met_ratio, ARR, calf_weight, cartella, cow_age, costo_FORAGGIO_quantità, costo_CEREALE_quantità, costo_FONTE_PROTEICA_quantità, COSTO_RAZIONE, CP_milk, current_time, D, data, data_di_inserimento, day, F, giorno_di_inserimento, imgdir, LISINA, LW, MY, METIONINA, metodo, now, ora_di_inserimento, P, PDIE, PDIN, PREZZI, PREZZO_MAX, Q_PDIE, QM_PDIE, QFP_PDIE, Q_PDIN, QM_PDIN, QFP_PDIN, Q_LysDI, QM_LysDI, QFP_LysDI, Q_MetDI, QM_MetDI, QFP_MetDI, Q_ARAC, Q_COLZ, Q_COT_FE, Q_COT_SEM, Q_FAV, Q_MED_DIS_15, Q_FAV, Q_GIR, Q_SOIA_50, S, size, today, user, calf_weight, cow_age, LW, WOL, WOP, MY, FAT_milk, CP_milk, LAC_milk, N_repl, giorno_di_inserimento, data_di_inserimento, ora_di_inserimento, metodo, nome_file_apporti, nome_file_fabbisogni, nome_file_parametri, nome_file_razione, ARRAYS, ITEMS, LISINA, METIONINA, PDIE, PDIN, LISINA_TOT, METIONINA_TOT, PDIE_TOT, PDIN_TOT, quantità




today = date.today()
now = datetime.datetime.now()
day = datetime.datetime.now().strftime("%A")
data = today.strftime('%d/%m/%Y')
current_time = now.strftime("%H:%M:%S")

ARR = []
ARRAYS = []
COSTO_RAZIONE = []
ITEMS = []
LISINA = []
METIONINA = []
quantità = []
PDIE = []
PDIN = []
PREZZI = []
S = []


user = os.getlogin()
os.chdir('/Users/%s/PYTHON' % user)
cartella = os.getcwd()
imgdir = r'/Users/%s/PYTHON/' % user




class GuiOutput:
    font = ('courier', 14, 'normal')                     # in class for all, self for one
    
    def __init__(self, parent=None):
        self.text = None
        if parent: self.popupnow(parent)                 # pop up now or on first write

    def popupnow(self, parent=None):                     # in parent now, Toplevel later
        if self.text: return
        self.text = ScrolledText(parent or Toplevel())
        self.text.config(font=self.font)
        self.text.pack(expand=YES, fill=BOTH)

    def write(self, text):
        self.popupnow()
        self.text.insert(END, str(text))
        self.text.see(END)
        self.text.update()                                # update gui after each line

    def writelines(self, lines):                          # lines already have '\n'
        for line in lines: self.write(line)               # or map(self.write, lines)

class GuiInput:
    def __init__(self):
        self.buff = ''

    def inputLine(self):
        line = askstring('GuiInput', 'Enter input line + <crlf> (cancel=eof)')
        if line == None:
            return ''                                     # pop-up dialog for each line
        else:                                             # cancel tk.Menubutton means eof
            return line + '\n'                            # else add end-line marker

    def read(self, bytes=None):
        if not self.buff:
            self.buff = self.inputLine()
        if bytes:                                         # read by byte count
            text = self.buff[:bytes]                      # doesn't span lines
            self.buff = self.buff[bytes:]
        else:
            text = ''                                     # read all till eof
            line = self.buff
            while line:
                text = text + line
                line = self.inputLine()                   # until cancel=eof=''
        return text

    def readline(self):
        text = self.buff or self.inputLine()              # emulate file read methods
        self.buff = ''
        return text

    def readlines(self):
        lines = []                                        # read all lines
        while True:
            next = self.readline()
            if not next: break
            lines.append(next)
        return lines


def redirectedGuiFunc(func, *pargs, **kargs):
    saveStreams = sys.stdin, sys.stdout                    # map func streams to pop ups
    sys.stdin   = GuiInput()                               # pops up dialog as needed
    sys.stdout  = GuiOutput()                              # new output window per call
    sys.stderr  = sys.stdout
    result = func(*pargs, **kargs)                         # this is a blocking call
    sys.stdin, sys.stdout = saveStreams
    return result


def redirectedGuiShellCmd(command):
    input  = os.popen(command, 'r')
    output = GuiOutput()
    def reader(input, output):                              # show a shell command's
        while True:                                         # standard output in a new
            line = input.readline()                         # pop-up text box widget;
            if not line: break                              # the readline call may block
            output.write(line)
    reader(input, output)


def inserisci_nome_file_razione():

# crea dei file di testo (estensione <.txt>) in ciascuno dei quali viene salvato il nome (inserito dall'utente) della razione, dei fabbisogni, degli apporti ecc.

    global nome_file_quantità, nome_file_razione
    nome_file_razione = askstring('Entry', 'Scegli il nome del FILE DI TESTO in cui vuoi salvare la RAZIONE')
    with open('nome_file_razione.txt', 'w') as external_file:
        print('RAZIONE_PyR_%s' % nome_file_razione, file=external_file)
    external_file.close()
    print('La tua nuova RAZIONE verrà salvata nel FILE DI TESTO <RAZIONE_PyR_%s.txt> nella CARTELLA <%s>' % (nome_file_razione, cartella))
#   with open('nome_file_parametri.txt', 'w') as external_file:
#       print('PARAMETRI_PyR_%s' % nome_file_razione, file=external_file)
#   external_file.close()   
#   print('I tuoi nuovi PARAMETRI verranno salvati nel FILE DI TESTO <PARAMETRI_PyR_%s.txt> nella CARTELLA <%s>' % (nome_file_razione, cartella))   
    with open('nome_file_fabbisogni.txt', 'w') as external_file:
        print('FABBISOGNI_PyR_%s' % nome_file_razione, file=external_file)
    external_file.close()   
    print('I tuoi nuovi FABBISOGNI verranno salvati nel FILE DI TESTO <FABBISOGNI_PyR_%s.txt> nella CARTELLA <%s>' % (nome_file_razione, cartella))
    with open('nome_file_apporti.txt', 'w') as external_file:
        print('APPORTI_PyR_%s' % nome_file_razione, file=external_file)
    external_file.close()   
    print('I tuoi nuovi APPORTI verranno salvati nel FILE DI TESTO <APPORTI_PyR_%s.txt> nella CARTELLA <%s>' % (nome_file_razione, cartella)) 
    with open('nome_file_dati.txt', 'w') as external_file:
        print('DATI_PyR_%s' % nome_file_razione, file=external_file)
    external_file.close()   
    print('I tuoi nuovi DATI verranno salvati nel FILE DI TESTO <DATI_PyR_%s.py> nella CARTELLA <%s>' % (nome_file_razione, cartella))       
    with open('nome_file_quantità.txt', 'w') as external_file:
        print('quantità_PyR_%s' % nome_file_razione, file=external_file)
    external_file.close()   
    print('Le tue nuove quantità verranno salvate nel FILE DI TESTO <quantità_PyR_%s.py> nella CARTELLA <%s>' % (nome_file_razione, cartella))


def inserisci_nome_file_parametri():
    global nome_file_parametri
    nome_file_parametri = askstring('Entry', 'Scegli il nome del FILE DI TESTO in cui vuoi salvare la parametri')
    with open('nome_file_parametri.txt', 'w') as external_file:
        print('PARAMETRI_PyR_%s' % nome_file_parametri, file=external_file)
    external_file.close()   
    print('I tuoi nuovi PARAMETRI verranno salvati nel FILE DI TESTO <PARAMETRI_PyR_%s.txt> nella CARTELLA <%s>' % (nome_file_parametri, cartella))   


def inserisci_nome_file_fabbisogni():
    global nome_file_fabbisogni
    nome_file_fabbisogni = askstring('Entry', 'Scegli il nome del FILE DI TESTO in cui vuoi salvare la fabbisogni')
    with open('nome_file_fabbisogni.txt', 'w') as external_file:
        print('FABBISOGNI_PyR_%s' % nome_file_fabbisogni, file=external_file)
    external_file.close()   
    print('I tuoi nuovi FABBISOGNI verranno salvati nel FILE DI TESTO <FABBISOGNI_PyR_%s.txt> nella CARTELLA <%s>' % (nome_file_fabbisogni, cartella)) 


def inserisci_nome_file_apporti():
    global nome_file_apporti
    nome_file_apporti = askstring('Entry', 'Scegli il nome del FILE DI TESTO in cui vuoi salvare gli apporti')
    with open('nome_file_apporti.txt', 'w') as external_file:
        print('APPORTI_PyR_%s' % nome_file_apporti, file=external_file)
    external_file.close()   
    print('I tuoi nuovi APPORTI verranno salvati nel FILE DI TESTO <APPORTI_PyR_%s.txt> nella CARTELLA <%s>' % (nome_file_apporti, cartella)) 


def inserisci_nome_file_dati():
    global nome_file_dati
    nome_file_dati = askstring('Entry', 'Scegli il nome del FILE DI TESTO in cui vuoi salvare i DATI')
    with open('nome_file_dati.txt', 'w') as external_file:
        print('DATI_PyR_%s' % nome_file_dati, file=external_file)
    external_file.close()   
    print('I tuoi nuovi DATI verranno salvati nel FILE DI TESTO <DATI_PyR_%s.py> nella CARTELLA <%s>' % (nome_file_apporti, cartella)) 


def inserisci_nome_file_quantita():
    global nome_file_quantità
    nome_file_quantità = askstring('Entry', 'Scegli il nome del FILE DI TESTO in cui vuoi salvare le quantità')
    with open('nome_file_quantità.txt', 'w') as external_file:
        print('quantità_PyR_%s' % nome_file_quantità, file=external_file)
    external_file.close()   
    print('Le tue nuove quantità verranno salvate nel FILE DI TESTO <quantità_PyR_%s.py> nella CARTELLA <%s>' % (nome_file_apporti, cartella))


def inserisci_gruppo():
    global gruppo
    gruppo = askstring('Entry', 'Scegli il GRUPPO di bovine (<F> per freschissime, <f> per fresche, <s> per stanche)')
    if gruppo == 'F' or gruppo == 'f' or gruppo == 's':
        print('GRUPPO di bovine <%s> inserito con SUCCESSO!' % gruppo)
        print('')
    else:
        print('ERRORE: prova a reinserire il gruppo!')    
    if gruppo == 'F':
        print('La RAZIONE sarà calcolata per il GRUPPO <freschissime>!')
        print('(1^-9^ settimana di lattazione)')
        print('')
        print('<SETTIMANA DI GRAVIDANZA> impostata a 0 (zero)')
    elif gruppo == 'f':
        print('La RAZIONE sarà calcolata per il GRUPPO <fresche>!')
        print('(10^-20^ settimana di lattazione)')
        print('')
    elif gruppo == 's':
        print('La RAZIONE sarà calcolata per il GRUPPO <stanche>!')
        print('(dalla 21^ settimana di lattazione)')
        print('')


def peso():
    if gruppo == 'F' or gruppo == 'f' or gruppo == 's':
        print('GRUPPO di bovine <%s> inserito con SUCCESSO!' % gruppo)
        print('')
    else:
        print('ERRORE: prova a reinserire il gruppo!')    
    if gruppo == 'F':
        print('La RAZIONE sarà calcolata per il GRUPPO <freschissime>!')
        print('(1^-9^ settimana di lattazione)')
        print('')
        print('<SETTIMANA DI GRAVIDANZA> impostata a 0 (zero)')
    elif gruppo == 'f':
        print('La RAZIONE sarà calcolata per il GRUPPO <fresche>!')
        print('(10^-20^ settimana di lattazione)')
        print('')
    elif gruppo == 's':
        print('La RAZIONE sarà calcolata per il GRUPPO <stanche>!')
        print('(dalla 21^ settimana di lattazione)')
        print('')
    global LW
    LW = askfloat('Entry', 'Inserisci il peso medio di un gruppo omogeneo di animali (in kg)')
    print('PESO VIVO <%f kg> inserito con SUCCESSO!' % LW)


def inserisci_calf_weight():
    global calf_weight
    calf_weight = askfloat('Entry', 'Inserisci il peso medio di un vitello neonato (in kg)')
    if calf_weight < 50:
        print('PESO ALLA NASCITA <%f kg> inserito con SUCCESSO!' % calf_weight)
    else:
        print('ERRORE: verifica il peso alla nascita!')


def inserisci_cow_age():
    global cow_age
    cow_age = askinteger('Entry', "Inserisci l'età media delle bovine in lattazione (in mesi, SOLO SE < 40)")
    if cow_age >= 24 and cow_age < 40:
        print('ETÀ MEDIA DELLE BOVINE IN LATTAZIONE <%d mesi> inserita con SUCCESSO!' % cow_age)
    elif cow_age < 24:
        print("ERRORE: l'età media delle bovine in lattazione non può essere < 24 mesi!")
    elif cow_age >= 40:
        print("ERRORE: hai inserito un'età media delle bovine in lattazione > 40 mesi!") 

  
def inserisci_WOL():
    global WOL
    WOL = askinteger('Entry', 'Inserisci la SETTIMANA DI LATTAZIONE media di un gruppo omogeneo di animali')
    if gruppo == 'F' or gruppo == 'f' or gruppo == 's':
        print('GRUPPO di bovine <%s> inserito con SUCCESSO!' % gruppo)
        print('')
    else:
        print('ERRORE: prova a reinserire il gruppo!')    
    if gruppo == 'F':
        print('La RAZIONE sarà calcolata per il GRUPPO <freschissime>!')
        print('(1^-9^ settimana di lattazione)')
        print('')
        print('<SETTIMANA DI GRAVIDANZA> impostata a 0 (zero)')
    elif gruppo == 'f':
        print('La RAZIONE sarà calcolata per il GRUPPO <fresche>!')
        print('(10^-20^ settimana di lattazione)')
        print('')
    elif gruppo == 's':
        print('La RAZIONE sarà calcolata per il GRUPPO <stanche>!')
        print('(dalla 21^ settimana di lattazione)')
        print('')
    print('PESO VIVO <%f kg> inserito con SUCCESSO!' % LW)
    if gruppo == 'F' and WOL <= 9:
        print('SETTIMANA DI LATTAZIONE <%d^> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'F' and WOL > 9:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere <= 9!" % gruppo)
    elif gruppo == 'f' and WOL <= 9:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere > 9!" % gruppo)        
    elif gruppo == 'f' and WOL == 10:
        print('SETTIMANA DI LATTAZIONE <%dma> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'f' and WOL > 10 and WOL <= 20:
        print('SETTIMANA DI LATTAZIONE <%desima> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'f' and WOL > 20:
        print('ERRORE: la settimana di lattazione del gruppo <%s> non può essere > 20!' % gruppo)
    elif gruppo == 's' and WOL <= 20:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere > 20!" % gruppo)
    elif gruppo == 's' and WOL > 20:
        print('SETTIMANA DI LATTAZIONE <%desima> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))    


def inserisci_WOP():
    global WOP
    if gruppo == 'F':
        print('Bovine del gruppo <F> non gravide! (<SETTIMANA DI GRAVIDANZA> = 0)')
        WOP = 0        
    elif gruppo == 'f':
        WOP = askinteger('Entry', 'Inserisci la SETTIMANA DI GRAVIDANZA media di un gruppo omogeneo di animali')   
        if gruppo == 'f' and WOP <= 9:
            print('SETTIMANA DI GRAVIDANZA <%d^> GRUPPO <%s> inserita con SUCCESSO!' % (WOP, gruppo))
        elif gruppo == 'f' and WOP > 9:
            print("ERRORE: la settimana di gravidanza del gruppo <%s> dev'essere <= 9!" % gruppo)   
    elif gruppo == 's':
        WOP = askinteger('Entry', 'Inserisci la SETTIMANA DI GRAVIDANZA media di un gruppo omogeneo di animali')
        if WOP <= 9:
            print('SETTIMANA DI GRAVIDANZA <%d^> GRUPPO <%s> inserita con SUCCESSO!' % (WOP, gruppo))
        elif WOP == 10:
            print('SETTIMANA DI GRAVIDANZA <%dma> GRUPPO <%s> inserita con SUCCESSO!' % (WOP, gruppo))
        elif WOP > 10 and WOP <= 34 and WOL - WOP >= 10:
            print('SETTIMANA DI GRAVIDANZA <%desima> GRUPPO <%s> inserita con SUCCESSO!' % (WOP, gruppo))
        elif WOP > 34:
            print('ERRORE: se la settimana di gravidanza media è > 34 le bovine dovrebbero essere in asciutta!')
        elif WOL - WOP < 6:
            print("Dopo meno di 6 settimane dall'inizio della lattazione le bovine non possono essere ancora gravide!") 
    
          
def latte_prodotto():
    global MY
    MY = askfloat('Entry', 'Inserisci il LIVELLO PRODUTTIVO giornaliero medio di un gruppo omogeneo di animali (in kg)')
    if gruppo == 'F' or gruppo == 'f' or gruppo == 's':
        print('GRUPPO di bovine <%s> inserito con SUCCESSO!' % gruppo)
        print('')
    else:
        print('ERRORE: prova a reinserire il gruppo!')    
    if gruppo == 'F':
        print('La RAZIONE sarà calcolata per il GRUPPO <freschissime>!')
        print('(1^-9^ settimana di lattazione)')
        print('')
        print('<SETTIMANA DI GRAVIDANZA> impostata a 0 (zero)')
    elif gruppo == 'f':
        print('La RAZIONE sarà calcolata per il GRUPPO <fresche>!')
        print('(10^-20^ settimana di lattazione)')
        print('')
    elif gruppo == 's':
        print('La RAZIONE sarà calcolata per il GRUPPO <stanche>!')
        print('(dalla 21^ settimana di lattazione)')
        print('')
    print('PESO VIVO <%f kg> inserito con SUCCESSO!' % LW)
    if gruppo == 'F' and WOL <= 9:
        print('SETTIMANA DI LATTAZIONE <%d^> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'F' and WOL > 9:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere <= 9!" % gruppo)
    elif gruppo == 'f' and WOL <= 9:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere > 9!" % gruppo)        
    elif gruppo == 'f' and WOL == 10:
        print('SETTIMANA DI LATTAZIONE <%dma> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'f' and WOL > 10 and WOL <= 20:
        print('SETTIMANA DI LATTAZIONE <%desima> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'f' and WOL > 20:
        print('ERRORE: la settimana di lattazione del gruppo <%s> non può essere > 20!' % gruppo)
    elif gruppo == 's' and WOL <= 20:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere > 20!" % gruppo)
    elif gruppo == 's' and WOL > 20:
        print('SETTIMANA DI LATTAZIONE <%desima> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))    
    print('QUANTITÀ MEDIA DI LATTE prodotta al giorno <%f kg> inserita con SUCCESSO!' % MY)       


def GRASSO():
    global FAT_milk
    FAT_milk = askfloat('Entry', 'Inserisci il TENORE DI GRASSO del latte di massa')
    if gruppo == 'F' or gruppo == 'f' or gruppo == 's':
        print('GRUPPO di bovine <%s> inserito con SUCCESSO!' % gruppo)
        print('')
    else:
        print('ERRORE: prova a reinserire il gruppo!')    
    if gruppo == 'F':
        print('La RAZIONE sarà calcolata per il GRUPPO <freschissime>!')
        print('(1^-9^ settimana di lattazione)')
        print('')
        print('<SETTIMANA DI GRAVIDANZA> impostata a 0 (zero)')
    elif gruppo == 'f':
        print('La RAZIONE sarà calcolata per il GRUPPO <fresche>!')
        print('(10^-20^ settimana di lattazione)')
        print('')
    elif gruppo == 's':
        print('La RAZIONE sarà calcolata per il GRUPPO <stanche>!')
        print('(dalla 21^ settimana di lattazione)')
        print('')
    print('PESO VIVO <%f kg> inserito con SUCCESSO!' % LW)
    if gruppo == 'F' and WOL <= 9:
        print('SETTIMANA DI LATTAZIONE <%d^> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'F' and WOL > 9:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere <= 9!" % gruppo)
    elif gruppo == 'f' and WOL <= 9:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere > 9!" % gruppo)        
    elif gruppo == 'f' and WOL == 10:
        print('SETTIMANA DI LATTAZIONE <%dma> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'f' and WOL > 10 and WOL <= 20:
        print('SETTIMANA DI LATTAZIONE <%desima> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'f' and WOL > 20:
        print('ERRORE: la settimana di lattazione del gruppo <%s> non può essere > 20!' % gruppo)
    elif gruppo == 's' and WOL <= 20:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere > 20!" % gruppo)
    elif gruppo == 's' and WOL > 20:
        print('SETTIMANA DI LATTAZIONE <%desima> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))    
    print('QUANTITÀ MEDIA DI LATTE prodotta al giorno <%f kg> inserita con SUCCESSO!' % MY)       
    print('TENORE DI GRASSO del latte di massa <%fx100> inserito con SUCCESSO!' % FAT_milk)


def proteina():
    global CP_milk
    CP_milk = askfloat('Entry', 'Inserisci il TENORE DI PROTEINA del latte di massa')
    if gruppo == 'F' or gruppo == 'f' or gruppo == 's':
        print('GRUPPO di bovine <%s> inserito con SUCCESSO!' % gruppo)
        print('')
    else:
        print('ERRORE: prova a reinserire il gruppo!')    
    if gruppo == 'F':
        print('La RAZIONE sarà calcolata per il GRUPPO <freschissime>!')
        print('(1^-9^ settimana di lattazione)')
        print('')
        print('<SETTIMANA DI GRAVIDANZA> impostata a 0 (zero)')
    elif gruppo == 'f':
        print('La RAZIONE sarà calcolata per il GRUPPO <fresche>!')
        print('(10^-20^ settimana di lattazione)')
        print('')
    elif gruppo == 's':
        print('La RAZIONE sarà calcolata per il GRUPPO <stanche>!')
        print('(dalla 21^ settimana di lattazione)')
        print('')
    print('PESO VIVO <%f kg> inserito con SUCCESSO!' % LW)
    if gruppo == 'F' and WOL <= 9:
        print('SETTIMANA DI LATTAZIONE <%d^> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'F' and WOL > 9:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere <= 9!" % gruppo)
    elif gruppo == 'f' and WOL <= 9:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere > 9!" % gruppo)        
    elif gruppo == 'f' and WOL == 10:
        print('SETTIMANA DI LATTAZIONE <%dma> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'f' and WOL > 10 and WOL <= 20:
        print('SETTIMANA DI LATTAZIONE <%desima> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'f' and WOL > 20:
        print('ERRORE: la settimana di lattazione del gruppo <%s> non può essere > 20!' % gruppo)
    elif gruppo == 's' and WOL <= 20:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere > 20!" % gruppo)
    elif gruppo == 's' and WOL > 20:
        print('SETTIMANA DI LATTAZIONE <%desima> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))    
    print('QUANTITÀ MEDIA DI LATTE prodotta al giorno <%f kg> inserita con SUCCESSO!' % MY)       
    print('TENORE DI GRASSO del latte di massa <%fx100> inserito con SUCCESSO!' % FAT_milk)
    print('TENORE DI PROTEINA del latte di massa <%fx100> inserito con SUCCESSO!' % CP_milk)


def lattosio():
    global LAC_milk
    LAC_milk = askfloat('Entry', 'Inserisci il TENORE DI LATTOSIO del latte di massa')
    if gruppo == 'F' or gruppo == 'f' or gruppo == 's':
        print('GRUPPO di bovine <%s> inserito con SUCCESSO!' % gruppo)
        print('')
    else:
        print('ERRORE: prova a reinserire il gruppo!')    
    if gruppo == 'F':
        print('La RAZIONE sarà calcolata per il GRUPPO <freschissime>!')
        print('(1^-9^ settimana di lattazione)')
        print('')
        print('<SETTIMANA DI GRAVIDANZA> impostata a 0 (zero)')
    elif gruppo == 'f':
        print('La RAZIONE sarà calcolata per il GRUPPO <fresche>!')
        print('(10^-20^ settimana di lattazione)')
        print('')
    elif gruppo == 's':
        print('La RAZIONE sarà calcolata per il GRUPPO <stanche>!')
        print('(dalla 21^ settimana di lattazione)')
        print('')
    print('PESO VIVO <%f kg> inserito con SUCCESSO!' % LW)
    if gruppo == 'F' and WOL <= 9:
        print('SETTIMANA DI LATTAZIONE <%d^> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'F' and WOL > 9:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere <= 9!" % gruppo)
    elif gruppo == 'f' and WOL <= 9:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere > 9!" % gruppo)        
    elif gruppo == 'f' and WOL == 10:
        print('SETTIMANA DI LATTAZIONE <%dma> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'f' and WOL > 10 and WOL <= 20:
        print('SETTIMANA DI LATTAZIONE <%desima> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'f' and WOL > 20:
        print('ERRORE: la settimana di lattazione del gruppo <%s> non può essere > 20!' % gruppo)
    elif gruppo == 's' and WOL <= 20:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere > 20!" % gruppo)
    elif gruppo == 's' and WOL > 20:
        print('SETTIMANA DI LATTAZIONE <%desima> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))    
    print('QUANTITÀ MEDIA DI LATTE prodotta al giorno <%f kg> inserita con SUCCESSO!' % MY)       
    print('TENORE DI GRASSO del latte di massa <%fx100> inserito con SUCCESSO!' % FAT_milk)
    print('TENORE DI PROTEINA del latte di massa <%fx100> inserito con SUCCESSO!' % CP_milk)
    print('TENORE DI LATTOSIO del latte di massa <%fx100> inserito con SUCCESSO!' % LAC_milk)


def prezzo_massimo():
    global PREZZO_MAX
    PREZZO_MAX = askfloat('Entry', 'Inserisci il PREZZO MASSIMO della razione')
    if gruppo == 'F' or gruppo == 'f' or gruppo == 's':
        print('GRUPPO di bovine <%s> inserito con SUCCESSO!' % gruppo)
        print('')
    else:
        print('ERRORE: prova a reinserire il gruppo!')    
    if gruppo == 'F':
        print('La RAZIONE sarà calcolata per il GRUPPO <freschissime>!')
        print('(1^-9^ settimana di lattazione)')
        print('')
        print('<SETTIMANA DI GRAVIDANZA> impostata a 0 (zero)')
    elif gruppo == 'f':
        print('La RAZIONE sarà calcolata per il GRUPPO <fresche>!')
        print('(10^-20^ settimana di lattazione)')
        print('')
    elif gruppo == 's':
        print('La RAZIONE sarà calcolata per il GRUPPO <stanche>!')
        print('(dalla 21^ settimana di lattazione)')
        print('')
    print('PESO VIVO <%f kg> inserito con SUCCESSO!' % LW)
    if gruppo == 'F' and WOL <= 9:
        print('SETTIMANA DI LATTAZIONE <%d^> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'F' and WOL > 9:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere <= 9!" % gruppo)
    elif gruppo == 'f' and WOL <= 9:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere > 9!" % gruppo)        
    elif gruppo == 'f' and WOL == 10:
        print('SETTIMANA DI LATTAZIONE <%dma> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'f' and WOL > 10 and WOL <= 20:
        print('SETTIMANA DI LATTAZIONE <%desima> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'f' and WOL > 20:
        print('ERRORE: la settimana di lattazione del gruppo <%s> non può essere > 20!' % gruppo)
    elif gruppo == 's' and WOL <= 20:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere > 20!" % gruppo)
    elif gruppo == 's' and WOL > 20:
        print('SETTIMANA DI LATTAZIONE <%desima> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))    
    print('QUANTITÀ MEDIA DI LATTE prodotta al giorno <%f kg> inserita con SUCCESSO!' % MY)       
    print('TENORE DI GRASSO del latte di massa <%fx100> inserito con SUCCESSO!' % FAT_milk)
    print('TENORE DI PROTEINA del latte di massa <%fx100> inserito con SUCCESSO!' % CP_milk)
    print('TENORE DI LATTOSIO del latte di massa <%fx100> inserito con SUCCESSO!' % LAC_milk)
    print('PREZZO MASSIMO della razione <%f EURO> inserito con SUCCESSO!' % PREZZO_MAX)


def numero_di_repliche():
    global N_repl
    N_repl = askinteger('Entry', 'Inserisci il NUMERO DI REPLICHE (MIN: 1000; MAX: 9999)')
    if gruppo == 'F' or gruppo == 'f' or gruppo == 's':
        print('GRUPPO di bovine <%s> inserito con SUCCESSO!' % gruppo)
        print('')
    else:
        print('ERRORE: prova a reinserire il gruppo!')    
    if gruppo == 'F':
        print('La RAZIONE sarà calcolata per il GRUPPO <freschissime>!')
        print('(1^-9^ settimana di lattazione)')
        print('')
        print('<SETTIMANA DI GRAVIDANZA> impostata a 0 (zero)')
    elif gruppo == 'f':
        print('La RAZIONE sarà calcolata per il GRUPPO <fresche>!')
        print('(10^-20^ settimana di lattazione)')
        print('')
    elif gruppo == 's':
        print('La RAZIONE sarà calcolata per il GRUPPO <stanche>!')
        print('(dalla 21^ settimana di lattazione)')
        print('')
    print('PESO VIVO <%f kg> inserito con SUCCESSO!' % LW)
    if gruppo == 'F' and WOL <= 9:
        print('SETTIMANA DI LATTAZIONE <%d^> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'F' and WOL > 9:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere <= 9!" % gruppo)
    elif gruppo == 'f' and WOL <= 9:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere > 9!" % gruppo)        
    elif gruppo == 'f' and WOL == 10:
        print('SETTIMANA DI LATTAZIONE <%dma> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'f' and WOL > 10 and WOL <= 20:
        print('SETTIMANA DI LATTAZIONE <%desima> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'f' and WOL > 20:
        print('ERRORE: la settimana di lattazione del gruppo <%s> non può essere > 20!' % gruppo)
    elif gruppo == 's' and WOL <= 20:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere > 20!" % gruppo)
    elif gruppo == 's' and WOL > 20:
        print('SETTIMANA DI LATTAZIONE <%desima> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))    
    print('QUANTITÀ MEDIA DI LATTE prodotta al giorno <%f kg> inserita con SUCCESSO!' % MY)       
    print('TENORE DI GRASSO del latte di massa <%fx100> inserito con SUCCESSO!' % FAT_milk)
    print('TENORE DI PROTEINA del latte di massa <%fx100> inserito con SUCCESSO!' % CP_milk)
    print('TENORE DI LATTOSIO del latte di massa <%fx100> inserito con SUCCESSO!' % LAC_milk)
    print('PREZZO MASSIMO della razione <%f EURO> inserito con SUCCESSO!' % PREZZO_MAX)
    if N_repl >= 1000 and N_repl <= 9999:
        print('N° DI REPLICHE <%d> inserito con SUCCESSO!' % N_repl)
    else:
        print('ERRORE! Hai inserito un N° DI REPLICHE non previsto')


def inserisci_gruppo_LYS_MET():
    global gruppo
    gruppo = askstring('Entry', 'Scegli il GRUPPO di bovine (<F> per freschissime, <f> per fresche, <s> per stanche)')
    if calf_weight < 50:
        print('PESO ALLA NASCITA <%f kg> inserito con SUCCESSO!' % calf_weight)
    else:
        print('ERRORE: verifica il peso alla nascita!')    
    if gruppo == 'F' or gruppo == 'f' or gruppo == 's':
        print('GRUPPO di bovine <%s> inserito con SUCCESSO!' % gruppo)
        print('')
    else:
        print('ERRORE: prova a reinserire il gruppo!')  
    if gruppo == 'F':
        print('La RAZIONE sarà calcolata per il GRUPPO <freschissime>!')
        print('(1^-9^ settimana di lattazione)')
        print('')
        print('<SETTIMANA DI GRAVIDANZA> impostata a 0 (zero)')
    elif gruppo == 'f':
        print('La RAZIONE sarà calcolata per il GRUPPO <fresche>!')
        print('(10^-20^ settimana di lattazione)')
        print('')
    elif gruppo == 's':
        print('La RAZIONE sarà calcolata per il GRUPPO <stanche>!')
        print('(dalla 21^ settimana di lattazione)')
        print('')


def peso_LYS_MET():
    global LW
    LW = askfloat('Entry', 'Inserisci il peso medio di un gruppo omogeneo di animali (in kg)')
    if calf_weight < 50:
        print('PESO ALLA NASCITA <%f kg> inserito con SUCCESSO!' % calf_weight)
    else:
        print('ERRORE: verifica il peso alla nascita!')    
    if gruppo == 'F' or gruppo == 'f' or gruppo == 's':
        print('GRUPPO di bovine <%s> inserito con SUCCESSO!' % gruppo)
        print('')
    else:
        print('ERRORE: prova a reinserire il gruppo!')  
    if gruppo == 'F':
        print('La RAZIONE sarà calcolata per il GRUPPO <freschissime>!')
        print('(1^-9^ settimana di lattazione)')
        print('')
        print('<SETTIMANA DI GRAVIDANZA> impostata a 0 (zero)')
    elif gruppo == 'f':
        print('La RAZIONE sarà calcolata per il GRUPPO <fresche>!')
        print('(10^-20^ settimana di lattazione)')
        print('')
    elif gruppo == 's':
        print('La RAZIONE sarà calcolata per il GRUPPO <stanche>!')
        print('(dalla 21^ settimana di lattazione)')
        print('')    
    print('PESO VIVO <%f kg> inserito con SUCCESSO!' % LW)


def inserisci_calf_weight_LYS_MET():
    global calf_weight
    calf_weight = askfloat('Entry', 'Inserisci il peso medio di un vitello neonato (in kg)')
    if calf_weight < 50:
        print('PESO ALLA NASCITA <%f kg> inserito con SUCCESSO!' % calf_weight)
    else:
        print('ERRORE: verifica il peso alla nascita!')


def inserisci_cow_age_LYS_MET():
    global cow_age
    cow_age = askinteger('Entry', "Inserisci l'età media delle bovine in lattazione (in mesi, SOLO SE < 40)")
    if calf_weight < 50:
        print('PESO ALLA NASCITA <%f kg> inserito con SUCCESSO!' % calf_weight)
    else:
        print('ERRORE: verifica il peso alla nascita!')    
    if gruppo == 'F' or gruppo == 'f' or gruppo == 's':
        print('GRUPPO di bovine <%s> inserito con SUCCESSO!' % gruppo)
        print('')
    else:
        print('ERRORE: prova a reinserire il gruppo!')  
    if gruppo == 'F':
        print('La RAZIONE sarà calcolata per il GRUPPO <freschissime>!')
        print('(1^-9^ settimana di lattazione)')
        print('')
        print('<SETTIMANA DI GRAVIDANZA> impostata a 0 (zero)')
    elif gruppo == 'f':
        print('La RAZIONE sarà calcolata per il GRUPPO <fresche>!')
        print('(10^-20^ settimana di lattazione)')
        print('')
    elif gruppo == 's':
        print('La RAZIONE sarà calcolata per il GRUPPO <stanche>!')
        print('(dalla 21^ settimana di lattazione)')
        print('')    
    print('PESO VIVO <%f kg> inserito con SUCCESSO!' % LW)
    if cow_age >= 24 and cow_age < 40:
        print('ETÀ MEDIA DELLE BOVINE IN LATTAZIONE <%d mesi> inserita con SUCCESSO!' % cow_age)
    elif cow_age < 24:
        print("ERRORE: l'età media delle bovine in lattazione non può essere < 24 mesi!")
    elif cow_age >= 40:
        print("ERRORE: hai inserito un'età media delle bovine in lattazione > 40 mesi!") 

  
def inserisci_WOL_LYS_MET():
    global WOL
    WOL = askinteger('Entry', 'Inserisci la SETTIMANA DI LATTAZIONE media di un gruppo omogeneo di animali')
    if calf_weight < 50:
        print('PESO ALLA NASCITA <%f kg> inserito con SUCCESSO!' % calf_weight)
    else:
        print('ERRORE: verifica il peso alla nascita!')    
    if gruppo == 'F' or gruppo == 'f' or gruppo == 's':
        print('GRUPPO di bovine <%s> inserito con SUCCESSO!' % gruppo)
        print('')
    else:
        print('ERRORE: prova a reinserire il gruppo!')  
    if gruppo == 'F':
        print('La RAZIONE sarà calcolata per il GRUPPO <freschissime>!')
        print('(1^-9^ settimana di lattazione)')
        print('')
        print('<SETTIMANA DI GRAVIDANZA> impostata a 0 (zero)')
    elif gruppo == 'f':
        print('La RAZIONE sarà calcolata per il GRUPPO <fresche>!')
        print('(10^-20^ settimana di lattazione)')
        print('')
    elif gruppo == 's':
        print('La RAZIONE sarà calcolata per il GRUPPO <stanche>!')
        print('(dalla 21^ settimana di lattazione)')
        print('')    
    print('PESO VIVO <%f kg> inserito con SUCCESSO!' % LW)
    if cow_age >= 24 and cow_age < 40:
        print('ETÀ MEDIA DELLE BOVINE IN LATTAZIONE <%d mesi> inserita con SUCCESSO!' % cow_age)
    elif cow_age < 24:
        print("ERRORE: l'età media delle bovine in lattazione non può essere < 24 mesi!")
    elif cow_age >= 40:
        print("ERRORE: hai inserito un'età media delle bovine in lattazione > 40 mesi!") 
    if gruppo == 'F' and WOL <= 9:
        print('SETTIMANA DI LATTAZIONE <%d^> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'F' and WOL > 9:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere <= 9!" % gruppo)
    elif gruppo == 'f' and WOL <= 9:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere > 9!" % gruppo)        
    elif gruppo == 'f' and WOL == 10:
        print('SETTIMANA DI LATTAZIONE <%dma> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'f' and WOL > 10 and WOL <= 20:
        print('SETTIMANA DI LATTAZIONE <%desima> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'f' and WOL > 20:
        print('ERRORE: la settimana di lattazione del gruppo <%s> non può essere > 20!' % gruppo)
    elif gruppo == 's' and WOL <= 20:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere > 20!" % gruppo)
    elif gruppo == 's' and WOL > 20:
        print('SETTIMANA DI LATTAZIONE <%desima> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))    


def inserisci_WOP_LYS_MET():
    global WOP
    if calf_weight < 50:
        print('PESO ALLA NASCITA <%f kg> inserito con SUCCESSO!' % calf_weight)
    else:
        print('ERRORE: verifica il peso alla nascita!')    
    if gruppo == 'F' or gruppo == 'f' or gruppo == 's':
        print('GRUPPO di bovine <%s> inserito con SUCCESSO!' % gruppo)
        print('')
    else:
        print('ERRORE: prova a reinserire il gruppo!')  
    if gruppo == 'F':
        print('La RAZIONE sarà calcolata per il GRUPPO <freschissime>!')
        print('(1^-9^ settimana di lattazione)')
        print('')
        print('<SETTIMANA DI GRAVIDANZA> impostata a 0 (zero)')
    elif gruppo == 'f':
        print('La RAZIONE sarà calcolata per il GRUPPO <fresche>!')
        print('(10^-20^ settimana di lattazione)')
        print('')
    elif gruppo == 's':
        print('La RAZIONE sarà calcolata per il GRUPPO <stanche>!')
        print('(dalla 21^ settimana di lattazione)')
        print('')    
    print('PESO VIVO <%f kg> inserito con SUCCESSO!' % LW)
    if cow_age >= 24 and cow_age < 40:
        print('ETÀ MEDIA DELLE BOVINE IN LATTAZIONE <%d mesi> inserita con SUCCESSO!' % cow_age)
    elif cow_age < 24:
        print("ERRORE: l'età media delle bovine in lattazione non può essere < 24 mesi!")
    elif cow_age >= 40:
        print("ERRORE: hai inserito un'età media delle bovine in lattazione > 40 mesi!") 
    if gruppo == 'F' and WOL <= 9:
        print('SETTIMANA DI LATTAZIONE <%d^> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'F' and WOL > 9:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere <= 9!" % gruppo)
    elif gruppo == 'f' and WOL <= 9:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere > 9!" % gruppo)        
    elif gruppo == 'f' and WOL == 10:
        print('SETTIMANA DI LATTAZIONE <%dma> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'f' and WOL > 10 and WOL <= 20:
        print('SETTIMANA DI LATTAZIONE <%desima> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'f' and WOL > 20:
        print('ERRORE: la settimana di lattazione del gruppo <%s> non può essere > 20!' % gruppo)
    elif gruppo == 's' and WOL <= 20:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere > 20!" % gruppo)
    elif gruppo == 's' and WOL > 20:
        print('SETTIMANA DI LATTAZIONE <%desima> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))    
    if gruppo == 'F':
        print('Bovine del gruppo <F> non gravide! (<SETTIMANA DI GRAVIDANZA> = 0)')
        WOP = 0       
    elif gruppo == 'f':
        WOP = askinteger('Entry', 'Inserisci la SETTIMANA DI GRAVIDANZA media di un gruppo omogeneo di animali')
    
        if gruppo == 'f' and WOP <= 9:
            print('SETTIMANA DI GRAVIDANZA <%d^> GRUPPO <%s> inserita con SUCCESSO!' % (WOP, gruppo))
        elif gruppo == 'f' and WOP > 9:
            print("ERRORE: la settimana di gravidanza del gruppo <%s> dev'essere <= 9!" % gruppo)  
    elif gruppo == 's':
        WOP = askinteger('Entry', 'Inserisci la SETTIMANA DI GRAVIDANZA media di un gruppo omogeneo di animali')
        if WOP <= 9:
            print('SETTIMANA DI GRAVIDANZA <%d^> GRUPPO <%s> inserita con SUCCESSO!' % (WOP, gruppo))
        elif WOP == 10:
            print('SETTIMANA DI GRAVIDANZA <%dma> GRUPPO <%s> inserita con SUCCESSO!' % (WOP, gruppo))
        elif WOP > 10 and WOP <= 34 and WOL - WOP >= 10:
            print('SETTIMANA DI GRAVIDANZA <%desima> GRUPPO <%s> inserita con SUCCESSO!' % (WOP, gruppo))
        elif WOP > 34:
            print('ERRORE: se la settimana di gravidanza media è > 34 le bovine dovrebbero essere in asciutta!')
        elif WOL - WOP < 6:
            print("Dopo meno di 6 settimane dall'inizio della lattazione le bovine non possono essere ancora gravide!") 
    
          
def latte_prodotto_LYS_MET():
    global MY
    MY = askfloat('Entry', 'Inserisci il LIVELLO PRODUTTIVO giornaliero medio di un gruppo omogeneo di animali (in kg)')
    if calf_weight < 50:
        print('PESO ALLA NASCITA <%f kg> inserito con SUCCESSO!' % calf_weight)
    else:
        print('ERRORE: verifica il peso alla nascita!')    
    if gruppo == 'F' or gruppo == 'f' or gruppo == 's':
        print('GRUPPO di bovine <%s> inserito con SUCCESSO!' % gruppo)
        print('')
    else:
        print('ERRORE: prova a reinserire il gruppo!')  
    if gruppo == 'F':
        print('La RAZIONE sarà calcolata per il GRUPPO <freschissime>!')
        print('(1^-9^ settimana di lattazione)')
        print('')
        print('<SETTIMANA DI GRAVIDANZA> impostata a 0 (zero)')
    elif gruppo == 'f':
        print('La RAZIONE sarà calcolata per il GRUPPO <fresche>!')
        print('(10^-20^ settimana di lattazione)')
        print('')
    elif gruppo == 's':
        print('La RAZIONE sarà calcolata per il GRUPPO <stanche>!')
        print('(dalla 21^ settimana di lattazione)')
        print('')    
    print('PESO VIVO <%f kg> inserito con SUCCESSO!' % LW)
    if cow_age >= 24 and cow_age < 40:
        print('ETÀ MEDIA DELLE BOVINE IN LATTAZIONE <%d mesi> inserita con SUCCESSO!' % cow_age)
    elif cow_age < 24:
        print("ERRORE: l'età media delle bovine in lattazione non può essere < 24 mesi!")
    elif cow_age >= 40:
        print("ERRORE: hai inserito un'età media delle bovine in lattazione > 40 mesi!") 
    if gruppo == 'F' and WOL <= 9:
        print('SETTIMANA DI LATTAZIONE <%d^> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'F' and WOL > 9:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere <= 9!" % gruppo)
    elif gruppo == 'f' and WOL <= 9:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere > 9!" % gruppo)        
    elif gruppo == 'f' and WOL == 10:
        print('SETTIMANA DI LATTAZIONE <%dma> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'f' and WOL > 10 and WOL <= 20:
        print('SETTIMANA DI LATTAZIONE <%desima> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'f' and WOL > 20:
        print('ERRORE: la settimana di lattazione del gruppo <%s> non può essere > 20!' % gruppo)
    elif gruppo == 's' and WOL <= 20:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere > 20!" % gruppo)
    elif gruppo == 's' and WOL > 20:
        print('SETTIMANA DI LATTAZIONE <%desima> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))    
    if gruppo == 'F':
        print('Bovine del gruppo <F> non gravide! (<SETTIMANA DI GRAVIDANZA> = 0)')
        WOP = 0      
    elif gruppo == 'f':
        WOP = askinteger('Entry', 'Inserisci la SETTIMANA DI GRAVIDANZA media di un gruppo omogeneo di animali')   
        if gruppo == 'f' and WOP <= 9:
            print('SETTIMANA DI GRAVIDANZA <%d^> GRUPPO <%s> inserita con SUCCESSO!' % (WOP, gruppo))
        elif gruppo == 'f' and WOP > 9:
            print("ERRORE: la settimana di gravidanza del gruppo <%s> dev'essere <= 9!" % gruppo)    
    elif gruppo == 's':
        WOP = askinteger('Entry', 'Inserisci la SETTIMANA DI GRAVIDANZA media di un gruppo omogeneo di animali')
        if WOP <= 9:
            print('SETTIMANA DI GRAVIDANZA <%d^> GRUPPO <%s> inserita con SUCCESSO!' % (WOP, gruppo))
        elif WOP == 10:
            print('SETTIMANA DI GRAVIDANZA <%dma> GRUPPO <%s> inserita con SUCCESSO!' % (WOP, gruppo))
        elif WOP > 10 and WOP <= 34 and WOL - WOP >= 10:
            print('SETTIMANA DI GRAVIDANZA <%desima> GRUPPO <%s> inserita con SUCCESSO!' % (WOP, gruppo))
        elif WOP > 34:
            print('ERRORE: se la settimana di gravidanza media è > 34 le bovine dovrebbero essere in asciutta!')
        elif WOL - WOP < 6:
            print("Dopo meno di 6 settimane dall'inizio della lattazione le bovine non possono essere ancora gravide!") 
    print('QUANTITÀ MEDIA DI LATTE prodotta al giorno <%f kg> inserita con SUCCESSO!' % MY)       


def GRASSO_LYS_MET():
    global FAT_milk
    FAT_milk = askfloat('Entry', 'Inserisci il TENORE DI GRASSO del latte di massa')
    if calf_weight < 50:
        print('PESO ALLA NASCITA <%f kg> inserito con SUCCESSO!' % calf_weight)
    else:
        print('ERRORE: verifica il peso alla nascita!')    
    if gruppo == 'F' or gruppo == 'f' or gruppo == 's':
        print('GRUPPO di bovine <%s> inserito con SUCCESSO!' % gruppo)
        print('')
    else:
        print('ERRORE: prova a reinserire il gruppo!')  
    if gruppo == 'F':
        print('La RAZIONE sarà calcolata per il GRUPPO <freschissime>!')
        print('(1^-9^ settimana di lattazione)')
        print('')
        print('<SETTIMANA DI GRAVIDANZA> impostata a 0 (zero)')
    elif gruppo == 'f':
        print('La RAZIONE sarà calcolata per il GRUPPO <fresche>!')
        print('(10^-20^ settimana di lattazione)')
        print('')
    elif gruppo == 's':
        print('La RAZIONE sarà calcolata per il GRUPPO <stanche>!')
        print('(dalla 21^ settimana di lattazione)')
        print('')    
    print('PESO VIVO <%f kg> inserito con SUCCESSO!' % LW)
    if cow_age >= 24 and cow_age < 40:
        print('ETÀ MEDIA DELLE BOVINE IN LATTAZIONE <%d mesi> inserita con SUCCESSO!' % cow_age)
    elif cow_age < 24:
        print("ERRORE: l'età media delle bovine in lattazione non può essere < 24 mesi!")
    elif cow_age >= 40:
        print("ERRORE: hai inserito un'età media delle bovine in lattazione > 40 mesi!") 
    if gruppo == 'F' and WOL <= 9:
        print('SETTIMANA DI LATTAZIONE <%d^> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'F' and WOL > 9:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere <= 9!" % gruppo)
    elif gruppo == 'f' and WOL <= 9:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere > 9!" % gruppo)        
    elif gruppo == 'f' and WOL == 10:
        print('SETTIMANA DI LATTAZIONE <%dma> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'f' and WOL > 10 and WOL <= 20:
        print('SETTIMANA DI LATTAZIONE <%desima> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'f' and WOL > 20:
        print('ERRORE: la settimana di lattazione del gruppo <%s> non può essere > 20!' % gruppo)
    elif gruppo == 's' and WOL <= 20:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere > 20!" % gruppo)
    elif gruppo == 's' and WOL > 20:
        print('SETTIMANA DI LATTAZIONE <%desima> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))    
    if gruppo == 'F':
        print('Bovine del gruppo <F> non gravide! (<SETTIMANA DI GRAVIDANZA> = 0)')
        WOP = 0      
    elif gruppo == 'f':
        WOP = askinteger('Entry', 'Inserisci la SETTIMANA DI GRAVIDANZA media di un gruppo omogeneo di animali')   
        if gruppo == 'f' and WOP <= 9:
            print('SETTIMANA DI GRAVIDANZA <%d^> GRUPPO <%s> inserita con SUCCESSO!' % (WOP, gruppo))
        elif gruppo == 'f' and WOP > 9:
            print("ERRORE: la settimana di gravidanza del gruppo <%s> dev'essere <= 9!" % gruppo)    
    elif gruppo == 's':
        WOP = askinteger('Entry', 'Inserisci la SETTIMANA DI GRAVIDANZA media di un gruppo omogeneo di animali')
        if WOP <= 9:
            print('SETTIMANA DI GRAVIDANZA <%d^> GRUPPO <%s> inserita con SUCCESSO!' % (WOP, gruppo))
        elif WOP == 10:
            print('SETTIMANA DI GRAVIDANZA <%dma> GRUPPO <%s> inserita con SUCCESSO!' % (WOP, gruppo))
        elif WOP > 10 and WOP <= 34 and WOL - WOP >= 10:
            print('SETTIMANA DI GRAVIDANZA <%desima> GRUPPO <%s> inserita con SUCCESSO!' % (WOP, gruppo))
        elif WOP > 34:
            print('ERRORE: se la settimana di gravidanza media è > 34 le bovine dovrebbero essere in asciutta!')
        elif WOL - WOP < 6:
            print("Dopo meno di 6 settimane dall'inizio della lattazione le bovine non possono essere ancora gravide!") 
    print('QUANTITÀ MEDIA DI LATTE prodotta al giorno <%f kg> inserita con SUCCESSO!' % MY)       
    print('TENORE DI GRASSO del latte di massa <%fx100> inserito con SUCCESSO!' % FAT_milk)


def proteina_LYS_MET():
    global CP_milk
    CP_milk = askfloat('Entry', 'Inserisci il TENORE DI PROTEINA del latte di massa')
    if calf_weight < 50:
        print('PESO ALLA NASCITA <%f kg> inserito con SUCCESSO!' % calf_weight)
    else:
        print('ERRORE: verifica il peso alla nascita!')    
    if gruppo == 'F' or gruppo == 'f' or gruppo == 's':
        print('GRUPPO di bovine <%s> inserito con SUCCESSO!' % gruppo)
        print('')
    else:
        print('ERRORE: prova a reinserire il gruppo!')  
    if gruppo == 'F':
        print('La RAZIONE sarà calcolata per il GRUPPO <freschissime>!')
        print('(1^-9^ settimana di lattazione)')
        print('')
        print('<SETTIMANA DI GRAVIDANZA> impostata a 0 (zero)')
    elif gruppo == 'f':
        print('La RAZIONE sarà calcolata per il GRUPPO <fresche>!')
        print('(10^-20^ settimana di lattazione)')
        print('')
    elif gruppo == 's':
        print('La RAZIONE sarà calcolata per il GRUPPO <stanche>!')
        print('(dalla 21^ settimana di lattazione)')
        print('')    
    print('PESO VIVO <%f kg> inserito con SUCCESSO!' % LW)
    if cow_age >= 24 and cow_age < 40:
        print('ETÀ MEDIA DELLE BOVINE IN LATTAZIONE <%d mesi> inserita con SUCCESSO!' % cow_age)
    elif cow_age < 24:
        print("ERRORE: l'età media delle bovine in lattazione non può essere < 24 mesi!")
    elif cow_age >= 40:
        print("ERRORE: hai inserito un'età media delle bovine in lattazione > 40 mesi!") 
    if gruppo == 'F' and WOL <= 9:
        print('SETTIMANA DI LATTAZIONE <%d^> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'F' and WOL > 9:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere <= 9!" % gruppo)
    elif gruppo == 'f' and WOL <= 9:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere > 9!" % gruppo)        
    elif gruppo == 'f' and WOL == 10:
        print('SETTIMANA DI LATTAZIONE <%dma> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'f' and WOL > 10 and WOL <= 20:
        print('SETTIMANA DI LATTAZIONE <%desima> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'f' and WOL > 20:
        print('ERRORE: la settimana di lattazione del gruppo <%s> non può essere > 20!' % gruppo)
    elif gruppo == 's' and WOL <= 20:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere > 20!" % gruppo)
    elif gruppo == 's' and WOL > 20:
        print('SETTIMANA DI LATTAZIONE <%desima> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))    
    if gruppo == 'F':
        print('Bovine del gruppo <F> non gravide! (<SETTIMANA DI GRAVIDANZA> = 0)')
        WOP = 0      
    elif gruppo == 'f':
        WOP = askinteger('Entry', 'Inserisci la SETTIMANA DI GRAVIDANZA media di un gruppo omogeneo di animali')   
        if gruppo == 'f' and WOP <= 9:
            print('SETTIMANA DI GRAVIDANZA <%d^> GRUPPO <%s> inserita con SUCCESSO!' % (WOP, gruppo))
        elif gruppo == 'f' and WOP > 9:
            print("ERRORE: la settimana di gravidanza del gruppo <%s> dev'essere <= 9!" % gruppo)    
    elif gruppo == 's':
        WOP = askinteger('Entry', 'Inserisci la SETTIMANA DI GRAVIDANZA media di un gruppo omogeneo di animali')
        if WOP <= 9:
            print('SETTIMANA DI GRAVIDANZA <%d^> GRUPPO <%s> inserita con SUCCESSO!' % (WOP, gruppo))
        elif WOP == 10:
            print('SETTIMANA DI GRAVIDANZA <%dma> GRUPPO <%s> inserita con SUCCESSO!' % (WOP, gruppo))
        elif WOP > 10 and WOP <= 34 and WOL - WOP >= 10:
            print('SETTIMANA DI GRAVIDANZA <%desima> GRUPPO <%s> inserita con SUCCESSO!' % (WOP, gruppo))
        elif WOP > 34:
            print('ERRORE: se la settimana di gravidanza media è > 34 le bovine dovrebbero essere in asciutta!')
        elif WOL - WOP < 6:
            print("Dopo meno di 6 settimane dall'inizio della lattazione le bovine non possono essere ancora gravide!") 
    print('QUANTITÀ MEDIA DI LATTE prodotta al giorno <%f kg> inserita con SUCCESSO!' % MY)       
    print('TENORE DI GRASSO del latte di massa <%fx100> inserito con SUCCESSO!' % FAT_milk)
    print('TENORE DI PROTEINA del latte di massa <%fx100> inserito con SUCCESSO!' % CP_milk)


def lattosio_LYS_MET():
    global LAC_milk
    LAC_milk = askfloat('Entry', 'Inserisci il TENORE DI LATTOSIO del latte di massa')
    if calf_weight < 50:
        print('PESO ALLA NASCITA <%f kg> inserito con SUCCESSO!' % calf_weight)
    else:
        print('ERRORE: verifica il peso alla nascita!')    
    if gruppo == 'F' or gruppo == 'f' or gruppo == 's':
        print('GRUPPO di bovine <%s> inserito con SUCCESSO!' % gruppo)
        print('')
    else:
        print('ERRORE: prova a reinserire il gruppo!')  
    if gruppo == 'F':
        print('La RAZIONE sarà calcolata per il GRUPPO <freschissime>!')
        print('(1^-9^ settimana di lattazione)')
        print('')
        print('<SETTIMANA DI GRAVIDANZA> impostata a 0 (zero)')
    elif gruppo == 'f':
        print('La RAZIONE sarà calcolata per il GRUPPO <fresche>!')
        print('(10^-20^ settimana di lattazione)')
        print('')
    elif gruppo == 's':
        print('La RAZIONE sarà calcolata per il GRUPPO <stanche>!')
        print('(dalla 21^ settimana di lattazione)')
        print('')    
    print('PESO VIVO <%f kg> inserito con SUCCESSO!' % LW)
    if cow_age >= 24 and cow_age < 40:
        print('ETÀ MEDIA DELLE BOVINE IN LATTAZIONE <%d mesi> inserita con SUCCESSO!' % cow_age)
    elif cow_age < 24:
        print("ERRORE: l'età media delle bovine in lattazione non può essere < 24 mesi!")
    elif cow_age >= 40:
        print("ERRORE: hai inserito un'età media delle bovine in lattazione > 40 mesi!") 
    if gruppo == 'F' and WOL <= 9:
        print('SETTIMANA DI LATTAZIONE <%d^> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'F' and WOL > 9:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere <= 9!" % gruppo)
    elif gruppo == 'f' and WOL <= 9:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere > 9!" % gruppo)        
    elif gruppo == 'f' and WOL == 10:
        print('SETTIMANA DI LATTAZIONE <%dma> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'f' and WOL > 10 and WOL <= 20:
        print('SETTIMANA DI LATTAZIONE <%desima> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'f' and WOL > 20:
        print('ERRORE: la settimana di lattazione del gruppo <%s> non può essere > 20!' % gruppo)
    elif gruppo == 's' and WOL <= 20:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere > 20!" % gruppo)
    elif gruppo == 's' and WOL > 20:
        print('SETTIMANA DI LATTAZIONE <%desima> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))    
    if gruppo == 'F':
        print('Bovine del gruppo <F> non gravide! (<SETTIMANA DI GRAVIDANZA> = 0)')
        WOP = 0      
    elif gruppo == 'f':
        WOP = askinteger('Entry', 'Inserisci la SETTIMANA DI GRAVIDANZA media di un gruppo omogeneo di animali')   
        if gruppo == 'f' and WOP <= 9:
            print('SETTIMANA DI GRAVIDANZA <%d^> GRUPPO <%s> inserita con SUCCESSO!' % (WOP, gruppo))
        elif gruppo == 'f' and WOP > 9:
            print("ERRORE: la settimana di gravidanza del gruppo <%s> dev'essere <= 9!" % gruppo)    
    elif gruppo == 's':
        WOP = askinteger('Entry', 'Inserisci la SETTIMANA DI GRAVIDANZA media di un gruppo omogeneo di animali')
        if WOP <= 9:
            print('SETTIMANA DI GRAVIDANZA <%d^> GRUPPO <%s> inserita con SUCCESSO!' % (WOP, gruppo))
        elif WOP == 10:
            print('SETTIMANA DI GRAVIDANZA <%dma> GRUPPO <%s> inserita con SUCCESSO!' % (WOP, gruppo))
        elif WOP > 10 and WOP <= 34 and WOL - WOP >= 10:
            print('SETTIMANA DI GRAVIDANZA <%desima> GRUPPO <%s> inserita con SUCCESSO!' % (WOP, gruppo))
        elif WOP > 34:
            print('ERRORE: se la settimana di gravidanza media è > 34 le bovine dovrebbero essere in asciutta!')
        elif WOL - WOP < 6:
            print("Dopo meno di 6 settimane dall'inizio della lattazione le bovine non possono essere ancora gravide!") 
    print('QUANTITÀ MEDIA DI LATTE prodotta al giorno <%f kg> inserita con SUCCESSO!' % MY)       
    print('TENORE DI GRASSO del latte di massa <%fx100> inserito con SUCCESSO!' % FAT_milk)
    print('TENORE DI PROTEINA del latte di massa <%fx100> inserito con SUCCESSO!' % CP_milk)
    print('TENORE DI LATTOSIO del latte di massa <%fx100> inserito con SUCCESSO!' % LAC_milk)


def prezzo_massimo_LYS_MET():
    global PREZZO_MAX
    PREZZO_MAX = askfloat('Entry', 'Inserisci il PREZZO MASSIMO della razione')
    if calf_weight < 50:
        print('PESO ALLA NASCITA <%f kg> inserito con SUCCESSO!' % calf_weight)
    else:
        print('ERRORE: verifica il peso alla nascita!')    
    if gruppo == 'F' or gruppo == 'f' or gruppo == 's':
        print('GRUPPO di bovine <%s> inserito con SUCCESSO!' % gruppo)
        print('')
    else:
        print('ERRORE: prova a reinserire il gruppo!')  
    if gruppo == 'F':
        print('La RAZIONE sarà calcolata per il GRUPPO <freschissime>!')
        print('(1^-9^ settimana di lattazione)')
        print('')
        print('<SETTIMANA DI GRAVIDANZA> impostata a 0 (zero)')
    elif gruppo == 'f':
        print('La RAZIONE sarà calcolata per il GRUPPO <fresche>!')
        print('(10^-20^ settimana di lattazione)')
        print('')
    elif gruppo == 's':
        print('La RAZIONE sarà calcolata per il GRUPPO <stanche>!')
        print('(dalla 21^ settimana di lattazione)')
        print('')    
    print('PESO VIVO <%f kg> inserito con SUCCESSO!' % LW)
    if cow_age >= 24 and cow_age < 40:
        print('ETÀ MEDIA DELLE BOVINE IN LATTAZIONE <%d mesi> inserita con SUCCESSO!' % cow_age)
    elif cow_age < 24:
        print("ERRORE: l'età media delle bovine in lattazione non può essere < 24 mesi!")
    elif cow_age >= 40:
        print("ERRORE: hai inserito un'età media delle bovine in lattazione > 40 mesi!") 
    if gruppo == 'F' and WOL <= 9:
        print('SETTIMANA DI LATTAZIONE <%d^> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'F' and WOL > 9:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere <= 9!" % gruppo)
    elif gruppo == 'f' and WOL <= 9:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere > 9!" % gruppo)        
    elif gruppo == 'f' and WOL == 10:
        print('SETTIMANA DI LATTAZIONE <%dma> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'f' and WOL > 10 and WOL <= 20:
        print('SETTIMANA DI LATTAZIONE <%desima> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'f' and WOL > 20:
        print('ERRORE: la settimana di lattazione del gruppo <%s> non può essere > 20!' % gruppo)
    elif gruppo == 's' and WOL <= 20:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere > 20!" % gruppo)
    elif gruppo == 's' and WOL > 20:
        print('SETTIMANA DI LATTAZIONE <%desima> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))    
    if gruppo == 'F':
        print('Bovine del gruppo <F> non gravide! (<SETTIMANA DI GRAVIDANZA> = 0)')
        WOP = 0      
    elif gruppo == 'f':
        WOP = askinteger('Entry', 'Inserisci la SETTIMANA DI GRAVIDANZA media di un gruppo omogeneo di animali')   
        if gruppo == 'f' and WOP <= 9:
            print('SETTIMANA DI GRAVIDANZA <%d^> GRUPPO <%s> inserita con SUCCESSO!' % (WOP, gruppo))
        elif gruppo == 'f' and WOP > 9:
            print("ERRORE: la settimana di gravidanza del gruppo <%s> dev'essere <= 9!" % gruppo)    
    elif gruppo == 's':
        WOP = askinteger('Entry', 'Inserisci la SETTIMANA DI GRAVIDANZA media di un gruppo omogeneo di animali')
        if WOP <= 9:
            print('SETTIMANA DI GRAVIDANZA <%d^> GRUPPO <%s> inserita con SUCCESSO!' % (WOP, gruppo))
        elif WOP == 10:
            print('SETTIMANA DI GRAVIDANZA <%dma> GRUPPO <%s> inserita con SUCCESSO!' % (WOP, gruppo))
        elif WOP > 10 and WOP <= 34 and WOL - WOP >= 10:
            print('SETTIMANA DI GRAVIDANZA <%desima> GRUPPO <%s> inserita con SUCCESSO!' % (WOP, gruppo))
        elif WOP > 34:
            print('ERRORE: se la settimana di gravidanza media è > 34 le bovine dovrebbero essere in asciutta!')
        elif WOL - WOP < 6:
            print("Dopo meno di 6 settimane dall'inizio della lattazione le bovine non possono essere ancora gravide!") 
    print('QUANTITÀ MEDIA DI LATTE prodotta al giorno <%f kg> inserita con SUCCESSO!' % MY)       
    print('TENORE DI GRASSO del latte di massa <%fx100> inserito con SUCCESSO!' % FAT_milk)
    print('TENORE DI PROTEINA del latte di massa <%fx100> inserito con SUCCESSO!' % CP_milk)
    print('TENORE DI LATTOSIO del latte di massa <%fx100> inserito con SUCCESSO!' % LAC_milk)
    print('PREZZO MASSIMO della razione <%f EURO> inserito con SUCCESSO!' % PREZZO_MAX)


def numero_di_repliche_LYS_MET():
    global N_repl
    N_repl = askinteger('Entry', 'Inserisci il NUMERO DI REPLICHE (MIN: 1000; MAX: 9999)')
    if calf_weight < 50:
        print('PESO ALLA NASCITA <%f kg> inserito con SUCCESSO!' % calf_weight)
    else:
        print('ERRORE: verifica il peso alla nascita!')    
    if gruppo == 'F' or gruppo == 'f' or gruppo == 's':
        print('GRUPPO di bovine <%s> inserito con SUCCESSO!' % gruppo)
        print('')
    else:
        print('ERRORE: prova a reinserire il gruppo!')  
    if gruppo == 'F':
        print('La RAZIONE sarà calcolata per il GRUPPO <freschissime>!')
        print('(1^-9^ settimana di lattazione)')
        print('')
        print('<SETTIMANA DI GRAVIDANZA> impostata a 0 (zero)')
    elif gruppo == 'f':
        print('La RAZIONE sarà calcolata per il GRUPPO <fresche>!')
        print('(10^-20^ settimana di lattazione)')
        print('')
    elif gruppo == 's':
        print('La RAZIONE sarà calcolata per il GRUPPO <stanche>!')
        print('(dalla 21^ settimana di lattazione)')
        print('')    
    print('PESO VIVO <%f kg> inserito con SUCCESSO!' % LW)
    if cow_age >= 24 and cow_age < 40:
        print('ETÀ MEDIA DELLE BOVINE IN LATTAZIONE <%d mesi> inserita con SUCCESSO!' % cow_age)
    elif cow_age < 24:
        print("ERRORE: l'età media delle bovine in lattazione non può essere < 24 mesi!")
    elif cow_age >= 40:
        print("ERRORE: hai inserito un'età media delle bovine in lattazione > 40 mesi!") 
    if gruppo == 'F' and WOL <= 9:
        print('SETTIMANA DI LATTAZIONE <%d^> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'F' and WOL > 9:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere <= 9!" % gruppo)
    elif gruppo == 'f' and WOL <= 9:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere > 9!" % gruppo)        
    elif gruppo == 'f' and WOL == 10:
        print('SETTIMANA DI LATTAZIONE <%dma> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'f' and WOL > 10 and WOL <= 20:
        print('SETTIMANA DI LATTAZIONE <%desima> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))
    elif gruppo == 'f' and WOL > 20:
        print('ERRORE: la settimana di lattazione del gruppo <%s> non può essere > 20!' % gruppo)
    elif gruppo == 's' and WOL <= 20:
        print("ERRORE: la settimana di lattazione del gruppo <%s> dev'essere > 20!" % gruppo)
    elif gruppo == 's' and WOL > 20:
        print('SETTIMANA DI LATTAZIONE <%desima> GRUPPO <%s> inserita con SUCCESSO!' % (WOL, gruppo))    
    if gruppo == 'F':
        print('Bovine del gruppo <F> non gravide! (<SETTIMANA DI GRAVIDANZA> = 0)')
        WOP = 0      
    elif gruppo == 'f':
        WOP = askinteger('Entry', 'Inserisci la SETTIMANA DI GRAVIDANZA media di un gruppo omogeneo di animali')   
        if gruppo == 'f' and WOP <= 9:
            print('SETTIMANA DI GRAVIDANZA <%d^> GRUPPO <%s> inserita con SUCCESSO!' % (WOP, gruppo))
        elif gruppo == 'f' and WOP > 9:
            print("ERRORE: la settimana di gravidanza del gruppo <%s> dev'essere <= 9!" % gruppo)    
    elif gruppo == 's':
        WOP = askinteger('Entry', 'Inserisci la SETTIMANA DI GRAVIDANZA media di un gruppo omogeneo di animali')
        if WOP <= 9:
            print('SETTIMANA DI GRAVIDANZA <%d^> GRUPPO <%s> inserita con SUCCESSO!' % (WOP, gruppo))
        elif WOP == 10:
            print('SETTIMANA DI GRAVIDANZA <%dma> GRUPPO <%s> inserita con SUCCESSO!' % (WOP, gruppo))
        elif WOP > 10 and WOP <= 34 and WOL - WOP >= 10:
            print('SETTIMANA DI GRAVIDANZA <%desima> GRUPPO <%s> inserita con SUCCESSO!' % (WOP, gruppo))
        elif WOP > 34:
            print('ERRORE: se la settimana di gravidanza media è > 34 le bovine dovrebbero essere in asciutta!')
        elif WOL - WOP < 6:
            print("Dopo meno di 6 settimane dall'inizio della lattazione le bovine non possono essere ancora gravide!") 
    print('QUANTITÀ MEDIA DI LATTE prodotta al giorno <%f kg> inserita con SUCCESSO!' % MY)       
    print('TENORE DI GRASSO del latte di massa <%fx100> inserito con SUCCESSO!' % FAT_milk)
    print('TENORE DI PROTEINA del latte di massa <%fx100> inserito con SUCCESSO!' % CP_milk)
    print('TENORE DI LATTOSIO del latte di massa <%fx100> inserito con SUCCESSO!' % LAC_milk)
    print('PREZZO MASSIMO della razione <%f EURO> inserito con SUCCESSO!' % PREZZO_MAX)
    if N_repl >= 1000 and N_repl <= 9999:
        print('N° DI REPLICHE <%d> inserito con SUCCESSO!' % N_repl)
    else:
        print('ERRORE! Hai inserito un N° DI REPLICHE non previsto')


def arrotonda(float):
    return(round(float, 2))


def visualizza_parametri_CNCPS_inseriti():
    try:
        print('La RAZIONE verrà salvata nel FILE DI TESTO <%s/%s.txt>' % (cartella, nome_file_razione))
        print('I PARAMETRI verranno salvati nel FILE DI TESTO <%s/%s.txt>' % (cartella, nome_file_parametri))
        print('I FABBISOGNI verranno salvati nel FILE DI TESTO <%s/%s.txt>' % (cartella, nome_file_fabbisogni))
        print('Gli APPORTI verranno salvati nel FILE DI TESTO <%s/%s.txt>' % (cartella, nome_file_apporti)) 
        print('La RAZIONE sarà calcolata per il GRUPPO delle bovine <%s>!' % gruppo)
        print('')
        print('PARAMETRI inseriti da %s il %s alle ore %s' % (user, data, current_time)) 
        print('')
        print('METODO DI CALCOLO della razione => <%s>' % metodo)
        print('PESO VIVO MEDIO BOVINE IN LATTAZIONE => %f kg' % LW)
        if WOL == 1:
            print('SETTIMANA DI LATTAZIONE media => 1^')
        elif WOL == 2:
            print('SETTIMANA DI LATTAZIONE media => 2^')
        elif WOL == 3:
            print('SETTIMANA DI LATTAZIONE media => 3^')
        elif WOL == 4:
            print('SETTIMANA DI LATTAZIONE media => 4^')
        elif WOL == 5:
            print('SETTIMANA DI LATTAZIONE media => 5^')
        elif WOL == 6:
            print('SETTIMANA DI LATTAZIONE media => 6^')
        elif WOL == 7:
            print('SETTIMANA DI LATTAZIONE media => 7^')
        elif WOL == 8:
            print('SETTIMANA DI LATTAZIONE media => 8^')
        elif WOL == 9:
            print('SETTIMANA DI LATTAZIONE media => 9^')
        elif WOL == 10:
            print('SETTIMANA DI LATTAZIONE media => 10^')
        elif WOL >= 11:
            print('SETTIMANA DI LATTAZIONE media => %d^' % WOL)
        print('LIVELLO PRODUTTIVO medio => %f kg di latte al giorno' % MY)
        print('TENORE DI GRASSO del latte => %fx100' % FAT_milk)
        print('TENORE DI PROTEINA del latte => %fx100' % CP_milk)
        print('TENORE DI LATTOSIO del latte => %fx100' % LAC_milk)
        print('PREZZO MASSIMO della razione => %f EURO' % PREZZO_MAX)
        print('NUMERO DI REPLICHE => %d' % N_repl)

    except NameError:
        print('Non ho trovato PARAMETRI da visualizzare!')
        print('Forse non li hai ancora inseriti...')


def visualizza_parametri_LYS_MET_inseriti():
    try:
        print('La RAZIONE verrà salvata nel FILE DI TESTO <%s/%s.txt>' % (cartella, nome_file_razione))
        print('I PARAMETRI verranno salvati nel FILE DI TESTO <%s/%s.txt>' % (cartella, nome_file_parametri))
        print('I FABBISOGNI verranno salvati nel FILE DI TESTO <%s/%s.txt>' % (cartella, nome_file_fabbisogni))
        print('Gli APPORTI verranno salvati nel FILE DI TESTO <%s/%s.txt>' % (cartella, nome_file_apporti)) 
        print('La razione sarà calcolata per il GRUPPO delle bovine <%s>!' % gruppo)
        print('')
        print('PARAMETRI inseriti da %s il %s alle ore %s' % (user, data, current_time))
        print('') 
        print('METODO DI CALCOLO della razione => <%s>' % metodo)
        print('')
        print('PESO MEDIO ALLA NASCITA => %f kg' % calf_weight)
        print('PESO MEDIO BOVINE IN LATTAZIONE => %f kg' % LW)
        print('ETÀ MEDIA BOVINE IN LATTAZIONE => %d mesi' % cow_age)    
        if WOL == 1:
            print('SETTIMANA DI LATTAZIONE media => 1^')
        elif WOL == 2:
            print('SETTIMANA DI LATTAZIONE media => 2^')
        elif WOL == 3:
            print('SETTIMANA DI LATTAZIONE media => 3^')
        elif WOL == 4:
            print('SETTIMANA DI LATTAZIONE media => 4^')
        elif WOL == 5:
            print('SETTIMANA DI LATTAZIONE media => 5^')
        elif WOL == 6:
            print('SETTIMANA DI LATTAZIONE media => 6^')
        elif WOL == 7:
            print('SETTIMANA DI LATTAZIONE media => 7^')
        elif WOL == 8:
            print('SETTIMANA DI LATTAZIONE media => 8^')
        elif WOL == 9:
            print('SETTIMANA DI LATTAZIONE media => 9^')
        elif WOL == 10:
            print('SETTIMANA DI LATTAZIONE media => 10^')
        elif WOL >= 11:
            print('SETTIMANA DI LATTAZIONE media => %d^' % WOL)    
        if WOP == 0:
            print('SETTIMANA DI GRAVIDANZA media => <0^>')
            print('Le bovine del gruppo prescelto (<freschissime>) non sono gravide!')      
        if WOP == 1:
            print('SETTIMANA DI GRAVIDANZA media => 1^')
        elif WOP == 2:
            print('SETTIMANA DI GRAVIDANZA media => 2^')
        elif WOP == 3:
            print('SETTIMANA DI GRAVIDANZA media => 3^')
        elif WOP == 4:
            print('SETTIMANA DI GRAVIDANZA media => 4^')
        elif WOP == 5:
            print('SETTIMANA DI GRAVIDANZA media => 5^')
        elif WOP == 6:
            print('SETTIMANA DI GRAVIDANZA media => 6^')
        elif WOP == 7:
            print('SETTIMANA DI GRAVIDANZA media => 7^')
        elif WOP == 8:
            print('SETTIMANA DI GRAVIDANZA media => 8^')
        elif WOP == 9:
            print('SETTIMANA DI GRAVIDANZA media => 9^')
        elif WOP == 10:
            print('SETTIMANA DI GRAVIDANZA media => 10^')
        elif WOP >= 11:
            print('SETTIMANA DI GRAVIDANZA media => %desima' % WOP)       
        print('LIVELLO PRODUTTIVO medio => %f kg di latte al giorno' % MY)
        print('TENORE DI GRASSO del latte => %fx100' % FAT_milk)
        print('TENORE DI PROTEINA del latte => %fx100' % CP_milk)
        print('TENORE DI LATTOSIO del latte => %fx100' % LAC_milk)
        print('PREZZO MASSIMO della razione => %f EURO' % PREZZO_MAX)
        print('NUMERO DI REPLICHE => %d' % N_repl)

    except NameError:
        print('Non ho trovato PARAMETRI da visualizzare!')
        print('Forse non li hai ancora inseriti...')


def importa_parametri():

# https://stackoverflow.com/questions/82831/how-do-i-check-whether-a-file-exists-without-exceptions
# https://www.adamsmith.haus/python/answers/how-to-get-the-last-modified-time-of-a-file-in-python
    
    import re
    from pathlib import Path
    global calf_weight, cow_age, LW, WOL, WOP, MY, FAT_milk, CP_milk, LAC_milk, N_repl, giorno_di_inserimento, data_di_inserimento, ora_di_inserimento, metodo, LW, WOL, MY, FAT_milk, CP_milk, LAC_milk, N_repl, nome_file_apporti, nome_file_dati, nome_file_fabbisogni, nome_file_quantità, nome_file_parametri, nome_file_razione, Parametri_decimali, Parametri_interi, TESTO_A, TESTO_F, TESTO_P, TESTO_Q, TESTO_R  

    if Path("nome_file_razione.txt").exists():
        TESTO_R = open('nome_file_razione.txt').read()
    nome_file_razione = TESTO_R[0:(len(TESTO_R)-1)]
    
    if Path("nome_file_fabbisogni.txt").exists():
        TESTO_F = open('nome_file_fabbisogni.txt').read()
    nome_file_fabbisogni = TESTO_F[0:(len(TESTO_F)-1)]

    if Path("nome_file_apporti.txt").exists():
        TESTO_A = open('nome_file_apporti.txt').read()
    nome_file_apporti = TESTO_A[0:(len(TESTO_A)-1)]

    if Path("nome_file_dati.txt").exists():
        TESTO_D = open('nome_file_dati.txt').read()
    nome_file_dati = TESTO_D[0:(len(TESTO_D)-1)]

    if Path("nome_file_quantità.txt").exists():
        TESTO_Q = open('nome_file_quantità.txt').read()
    nome_file_quantità = TESTO_Q[0:(len(TESTO_Q)-1)]

    
    print('Inserisci il nome del FILE DI TESTO in cui hai salvato i PARAMETRI')
    nome_file_parametri = input()
    if Path("PARAMETRI_PyR_%s.txt" % nome_file_parametri).exists():
        Parametri_decimali = re.findall('[\d]*[.][\d]+', open('PARAMETRI_PyR_%s.txt' % nome_file_parametri).read())
        Parametri_interi = re.findall('\d+', open('PARAMETRI_PyR_%s.txt' % nome_file_parametri).read())
        TESTO_P = open('PARAMETRI_PyR_%s.txt' % nome_file_parametri).read()
        metodo = TESTO_P[20:27]
    
        
        if metodo == '_CNCPS_':
    
            if TESTO_P[30:33] == 'Mon':
                giorno_di_inserimento = 'Lunedì'
            elif TESTO_P[30:33] == 'Tue':
                giorno_di_inserimento = 'Martedì'
            elif TESTO_P[30:33] == 'Wed':
                giorno_di_inserimento = 'Mercoledì'
            elif TESTO_P[30:33] == 'Thu':
                giorno_di_inserimento = 'Giovedì'
            elif TESTO_P[30:33] == 'Fri':
                giorno_di_inserimento = 'Venerdì'
            elif TESTO_P[30:33] == 'Sat':
                giorno_di_inserimento = 'Sabato'
            elif TESTO_P[30:33] == 'Sun':
                giorno_di_inserimento = 'Domenica'        
            
            data_di_inserimento = TESTO_P[0:10]
            ora_di_inserimento = TESTO_P[11:19]
            gruppo = TESTO_P[28]
            LW = float(Parametri_decimali[0])
            WOL = int(Parametri_interi[8])
            MY = float(Parametri_decimali[1])
            FAT_milk = float(Parametri_decimali[2])
            CP_milk = float(Parametri_decimali[3])
            LAC_milk = float(Parametri_decimali[4])
            PREZZO_MAX = float(Parametri_decimali[5])
            N_repl = int(Parametri_interi[19])  
            
            print('PARAMETRI inseriti da %s, %s %s alle ore %s' % (user, giorno_di_inserimento, data_di_inserimento, ora_di_inserimento))
            print('')
            print('') 
            print('FILE RAZIONE => <%s.txt>' % nome_file_razione)
            print('FILE PARAMETRI => <PARAMETRI_PyR_%s.txt>' % nome_file_parametri)
            print('FILE FABBISOGNI => <%s.txt>' % nome_file_fabbisogni)
            print('FILE APPORTI => <%s.txt>' % nome_file_apporti)
            print('FILE DATI => <%s.py>' % nome_file_dati)
            print('FILE quantità => <%s.py>' % nome_file_quantità)
            print('')
            print('METODO DI CALCOLO della razione => <%s>' % metodo)
     
            if gruppo == 'F':
                print('GRUPPO => <freschissime>')
            elif gruppo == 'f':
                print('GRUPPO => <fresche>')
            elif gruppo == 's':
                print('GRUPPO => <stanche>')
                     
            print('PESO VIVO MEDIO BOVINE IN LATTAZIONE => %f kg' % LW)        
            print('SETTIMANA DI LATTAZIONE media => <%d^>' % WOL)
            print('LIVELLO PRODUTTIVO giornaliero medio => %f kg di latte al giorno' % MY)
            print('TENORE DI GRASSO del latte => %fx100' % FAT_milk)
            print('TENORE DI PROTEINA del latte => %fx100' % CP_milk)
            print('TENORE DI LATTOSIO del latte => %fx100' % LAC_milk)
            print('PREZZO MASSIMO della razione => %f EURO' % PREZZO_MAX)
            print('N° DI REPLICHE => %d' % N_repl)

            
        elif metodo == 'LYS_MET':        

            if TESTO_P[30:33] == 'Mon':
                giorno_di_inserimento = 'Lunedì'
            elif TESTO_P[30:33] == 'Tue':
                giorno_di_inserimento = 'Martedì'
            elif TESTO_P[30:33] == 'Wed':
                giorno_di_inserimento = 'Mercoledì'
            elif TESTO_P[30:33] == 'Thu':
                giorno_di_inserimento = 'Giovedì'
            elif TESTO_P[30:33] == 'Fri':
                giorno_di_inserimento = 'Venerdì'
            elif TESTO_P[30:33] == 'Sat':
                giorno_di_inserimento = 'Sabato'
            elif TESTO_P[30:33] == 'Sun':
                giorno_di_inserimento = 'Domenica'
        
            data_di_inserimento = TESTO_P[0:10]
            ora_di_inserimento = TESTO_P[11:19]
            gruppo = TESTO_P[28]

            calf_weight = float(Parametri_decimali[0])
            LW = float(Parametri_decimali[1])
            cow_age = int(Parametri_interi[10])
            WOL = int(Parametri_interi[11])
            WOP = int(Parametri_interi[12])
            MY = float(Parametri_decimali[2])
            FAT_milk = float(Parametri_decimali[3])
            CP_milk = float(Parametri_decimali[4])
            LAC_milk = float(Parametri_decimali[5])
            PREZZO_MAX = float(Parametri_decimali[6])
            N_repl = int(Parametri_interi[23])
             

            print('PARAMETRI inseriti da %s, %s %s alle ore %s' % (user, giorno_di_inserimento, data_di_inserimento, ora_di_inserimento))
            print('')
            print('')
            print('FILE RAZIONE => <%s.txt>' % nome_file_razione)
            print('FILE PARAMETRI => <PARAMETRI_PyR_%s.txt>' % nome_file_parametri)
            print('FILE FABBISOGNI => <%s.txt>' % nome_file_fabbisogni)
            print('FILE APPORTI => <%s.txt>' % nome_file_apporti)
            print('FILE DATI => <%s.py>' % nome_file_dati)
            print('FILE quantità => <%s.py>' % nome_file_quantità)
            print('')
            print('METODO DI CALCOLO della razione => <%s>' % metodo)

            if gruppo == 'F':
                print('GRUPPO => <freschissime>')
            elif gruppo == 'f':
                print('GRUPPO => <fresche>')
            elif gruppo == 's':
                print('GRUPPO => <stanche>')

            print('PESO ALLA NASCITA medio => %f kg' % calf_weight)
            print('PESO MEDIO BOVINE IN LATTAZIONE => %f kg' % LW)
            print('ETÀ MEDIA BOVINE IN LATTAZIONE => %f mesi' % cow_age)
            print('SETTIMANA DI LATTAZIONE media => <%d^>' % WOL)
            print('SETTIMANA DI GRAVIDANZA media => <%d^>' % WOP)
            print('LIVELLO PRODUTTIVO giornaliero medio => %f kg di latte al giorno' % MY)
            print('TENORE DI GRASSO del latte => %fx100' % FAT_milk)
            print('TENORE DI PROTEINA del latte => %fx100' % CP_milk)
            print('TENORE DI LATTOSIO del latte => %fx100' % LAC_milk)
            print('PREZZO MASSIMO della razione => %f EURO' % PREZZO_MAX)
            print('N° DI REPLICHE => %d' % N_repl)
        
        
    else:
        print("Non ho trovato il FILE <PARAMETRI_PyR_%s.txt>!" % nome_file_parametri)
        print('')
        print('Verifica il nome del FILE e che esso si trovi nella CARTELLA <%s>!' % cartella)
        print('')
        print('Se non hai ancora creato alcun FILE dei PARAMETRI, dopo aver scelto un METODO DI CALCOLO,')
        print('inserisci i PARAMETRI richiesti!')
        
        
        
###############################################################################################################################



def salva_parametri_CNCPS_su_file():
    try:
        P = []
        P.append(LW)
        P.append(WOL)
        P.append(MY)
        P.append(FAT_milk)
        P.append(CP_milk)
        P.append(LAC_milk)
        P.append(PREZZO_MAX)
        P.append(N_repl)
        oggi = date.today()
        ora = datetime.datetime.now()
        giorno = datetime.datetime.now().strftime("%A")
        data_inserimento_parametri = oggi.strftime('%d/%m/%Y')
        ora_inserimento_parametri = ora.strftime("%H:%M:%S")
        if giorno == 'Monday': 
            print('PARAMETRI INSERITI da %s Lunedì %s, %s' % (user, data_inserimento_parametri, ora_inserimento_parametri))
        if giorno == 'Tuesday': 
            print('PARAMETRI INSERITI da %s Martedì %s, %s' % (user, data_inserimento_parametri, ora_inserimento_parametri))
        if giorno == 'Wednesday': 
            print('PARAMETRI INSERITI da %s Mercoledì %s, %s' % (user, data_inserimento_parametri, ora_inserimento_parametri))
        if giorno == 'Thursday': 
            print('PARAMETRI INSERITI da %s Giovedì %s, %s' % (user, data_inserimento_parametri, ora_inserimento_parametri))
        if giorno == 'Friday': 
            print('PARAMETRI INSERITI da %s Venerdì %s, %s' % (user, data_inserimento_parametri, ora_inserimento_parametri))
        if giorno == 'Saturday': 
            print('PARAMETRI INSERITI da %s Sabato %s, %s' % (user, data_inserimento_parametri, ora_inserimento_parametri))
        if giorno == 'Sunday': 
            print('PARAMETRI INSERITI da %s Domenica %s, %s' % (user, data_inserimento_parametri, ora_inserimento_parametri))   
        with open('PARAMETRI_PyR_%s.txt' % nome_file_parametri, 'w') as external_file:
            print(data_inserimento_parametri, ora_inserimento_parametri, metodo, gruppo, giorno, P, file=external_file)
        external_file.close()
        print('Hai scelto il METODO DI CALCOLO della razione <%s>' % metodo)
        print('PARAMETRI salvati su file con SUCCESSO!')
        
    except NameError:
        print('Impossibile salvare i PARAMETRI su file!')
        print('Devi prima inserirli utilizzando il menù del METODO DI CALCOLO della razione che hai scelto')

###############################################################################################################################


def salva_parametri_LYS_MET_su_file():
#   try:
    P = []
    P.append(calf_weight)
    P.append(LW)
    P.append(cow_age)
    P.append(WOL)
    P.append(WOP)
    P.append(MY)
    P.append(FAT_milk)
    P.append(CP_milk)
    P.append(LAC_milk)
    P.append(PREZZO_MAX)
    P.append(N_repl)
    oggi = date.today()
    ora = datetime.datetime.now()
    giorno = datetime.datetime.now().strftime("%A")
    data_inserimento_parametri = oggi.strftime('%d/%m/%Y')
    ora_inserimento_parametri = ora.strftime("%H:%M:%S")
    if giorno == 'Monday': 
        print('PARAMETRI INSERITI da %s Lunedì %s, %s' % (user, data_inserimento_parametri, ora_inserimento_parametri))
    if giorno == 'Tuesday': 
        print('PARAMETRI INSERITI da %s Martedì %s, %s' % (user, data_inserimento_parametri, ora_inserimento_parametri))
    if giorno == 'Wednesday': 
        print('PARAMETRI INSERITI da %s Mercoledì %s, %s' % (user, data_inserimento_parametri, ora_inserimento_parametri))
    if giorno == 'Thursday': 
        print('PARAMETRI INSERITI da %s Giovedì %s, %s' % (user, data_inserimento_parametri, ora_inserimento_parametri))
    if giorno == 'Friday': 
        print('PARAMETRI INSERITI da %s Venerdì %s, %s' % (user, data_inserimento_parametri, ora_inserimento_parametri))
    if giorno == 'Saturday': 
        print('PARAMETRI INSERITI da %s Sabato %s, %s' % (user, data_inserimento_parametri, ora_inserimento_parametri))
    if giorno == 'Sunday': 
        print('PARAMETRI INSERITI da %s Domenica %s, %s' % (user, data_inserimento_parametri, ora_inserimento_parametri))      
    with open('PARAMETRI_PyR_%s.txt' % nome_file_parametri, 'w') as external_file:
        print(data_inserimento_parametri, ora_inserimento_parametri, metodo, gruppo, giorno, P, file=external_file)
    external_file.close()
    print('Hai scelto il METODO DI CALCOLO della razione <%s>' % metodo)
    print('PARAMETRI salvati su file con SUCCESSO!')
        
#   except NameError:
#       print('Impossibile salvare i PARAMETRI su file!')
#       print('Devi prima inserirli utilizzando il menù del METODO DI CALCOLO della razione che hai scelto')


###############################################################################################################################
################################################# FUNZIONE CALCOLA FABBISOGNI #################################################
###############################################################################################################################



def calcola_fabbisogni():


    global nome_file_fabbisogni, MW, FCM, DMI, CP, LYS, MET, FG, NDF, ADF, FAT, AM, NSC, ZUC, Ca_mant, Ca_latt, Ca_tot, P_mant, P_latt, P_tot, UFL_mant, UFL_latt, UFL_tot, PDI, PDIN, PDIE, RDP, RUP, LysDI, MetDI, F, F_arr, metodo

       
            
    if metodo == 'LYS_MET':
     
        MW = LW**0.75						# peso metabolico
        FCM = (0.4+(0.15*FAT_milk))*MY				# latte corretto in GRASSO al 4%
        DMI = (0.372*FCM+0.0968*MW)*(1-math.exp(-0.192*(WOL+3.67)))	# Capacità d'ingestione (kg di Sostanza Secca)
        CP = 0.18*DMI*1000						# Fabbisogno di PROTEINA GREZZA (in grammi)
#   LYS = VALORE DA INSERIRE*CP						#         //         // Lisina (in grammi)
#   MET = VALORE DA INSERIRE*CP						#         //         // Metionina (in grammi)
# https://www.adisseo.com/wp-content/uploads/2019/11/3-aa-requirements-of-dairy-cows-cg-schwab.pdf
        
        FG = 0.17*DMI*1000						#         //         // FIBRA GREZZA (in grammi)
        NDF = 0.012*LW*1000						#         //         // NDF (in grammi)
        ADF = 0.2*DMI*1000						#         //         // ADF (in grammi)
        FAT = 0.05*DMI*1000						#         //         // GRASSO (in grammi)
        AM = 0.25*DMI*1000						#         //         // AMIDO (in grammi)
        NSC = NDF/0.9						#         //         // Non Structural Carbohydrates (AMIDO + ZUCCHERI, in grammi)
        ZUC = NSC - AM						#         //         // ZUCCHERI
        Ca_mant = LW*0.031/0.38					#         //         // mantenimento di Ca (in grammi)
        Ca_latt = FCM*1.22/0.38					#         //         // lattazione di Ca (in grammi)
        Ca_tot = Ca_mant+Ca_latt					#         //         totale di Ca (in grammi)
        P_mant = DMI*1.2						#         //         // mantenimento di P (in grammi)
        P_latt = FCM*0.9/0.6					#         //         // lattazione di P (in grammi)
        P_tot = P_mant+P_latt					#         //         totale di P (in grammi)
        UFL_mant = 0.08*MW/1.73					#         // energetico di mantenimento (in Unità Foraggere Latte)
        UFL_latt = (0.0929*FAT_milk+0.0547*CP_milk+0.0395*LAC_milk)*MY/1.73	#         // energetico di produzione (in Unità Foraggere Latte)

        UFL_tot = UFL_mant+UFL_latt
        PDI = (3.25*MW)+(422-10.4*cow_age)+(MY*CP_milk*10/0.64)+(0.07*calf_weight*math.exp(0.111*WOP))

# cow_age è in mesi (DA INSERIRE SE < 40)
# CP_milk (g di proteina / kg di latte)
# PDI = MANT. + ACCR. + LATT. + GRAV.
        
        F = []
        F.append(DMI)
        F.append(CP)
        F.append(FG)
        F.append(NDF)
        F.append(ADF)
        F.append(FAT)
        F.append(AM)
        F.append(ZUC)
        F.append(Ca_tot)
        F.append(P_tot)
        F.append(UFL_tot)
        F.append(PDI)	        
        F_arr = np.array(F)
  
        print('FABBISOGNI metodo <%s> calcolati con SUCCESSO!' % metodo)
        print('')
        print('Adesso puoi iniziare a scegliere gli alimenti')
        print('')        
        print("Inserisci la quantità di un alimento per ciascuna delle seguenti categorie:")
        print('')
        print('1) <FORAGGI>')
        print('')
        print('2) <CEREALI>')
        print('')
        print('3) <FONTI PROTEICHE>')
        print('')
        print('')
        print("Successivamente inserisci altri alimenti, FINO AD UN N° MAX DI 9 (3 alimenti inseriti manualmente + 6 alimenti inseriti in automatico)")
        print('')           



    elif metodo == '_CNCPS_':     
        
        MW = LW**0.75						# peso metabolico
        FCM = (0.4+(0.15*FAT_milk))*MY				# latte corretto in GRASSO al 4%
        DMI = (0.372*FCM+0.0968*MW)*(1-math.exp(-0.192*(WOL+3.67)))	# Capacità d'ingestione (kg di Sostanza Secca)
        CP = 0.18*DMI*1000						# Fabbisogno di PROTEINA GREZZA (in grammi)
        RDP = 0.6*CP						#         //         //        //        degradabile (in grammi)
        RUP = 0.4*CP						#         //         //        //        indegradabile (in grammi)
        FG = 0.17*DMI*1000						#         //         // FIBRA GREZZA (in grammi)
        NDF = 0.012*LW*1000						#         //         // NDF (in grammi)
        ADF = 0.2*DMI*1000						#         //         // ADF (in grammi)
        FAT = 0.05*DMI*1000						#         //         // GRASSO (in grammi)
        AM = 0.25*DMI*1000						#         //         // AMIDO (in grammi)
        NSC = NDF/0.9						#         //         // Non Structural Carbohydrates (AMIDO + ZUCCHERI, in grammi)
        ZUC = NSC - AM						#         //         // ZUCCHERI
        Ca_mant = LW*0.031/0.38					#         //         // mantenimento di Ca (in grammi)
        Ca_latt = FCM*1.22/0.38					#         //         // lattazione di Ca (in grammi)
        Ca_tot = Ca_mant+Ca_latt					#         //         totale di Ca (in grammi)
        P_mant = DMI*1.2						#         //         // mantenimento di P (in grammi)
        P_latt = FCM*0.9/0.6					#         //         // lattazione di P (in grammi)
        P_tot = P_mant+P_latt					#         //         totale di P (in grammi)
        UFL_mant = 0.08*MW/1.73					#         // energetico di mantenimento (in Unità Foraggere Latte)
        UFL_latt = (0.0929*FAT_milk+0.0547*CP_milk+0.0395*LAC_milk)*MY/1.73	#         // energetico di produzione (in Unità Foraggere Latte)
        									
# NE L (Mcal/kg) = (0.0929 x % fat) + (0.0563 x % true protein) + (0.0395 x % lactose)
# If lactose is not available, 4.85% should be assumed. Milk CP is determined by N x 6.38, and milk CP contains about 7% non-protein nitrogen. The coefficient in the above equation for milk CP would be 0.0547.
# Eastridge, M. L. (2002). Energy in the new dairy INRA LYS_MET. The Ohio State University.


        UFL_tot = UFL_mant+UFL_latt
        
        F = []
        F.append(DMI)
        F.append(CP)
        F.append(RDP)
        F.append(RUP)
        F.append(FG)
        F.append(NDF)
        F.append(ADF)
        F.append(FAT)
        F.append(AM)
        F.append(ZUC)
        F.append(Ca_tot)
        F.append(P_tot)
        F.append(UFL_tot)	        
        F_arr = np.array(F)

        
        with open('%s.txt' % nome_file_fabbisogni, 'w') as external_file:
                print(F, file=external_file)
        external_file.close()
        
        print('FABBISOGNI metodo <%s> calcolati con SUCCESSO!' % metodo)
        print('')
        print('Adesso puoi iniziare a scegliere gli alimenti')
        print('')        
        print("Inserisci la quantità di un alimento per ciascuna delle seguenti categorie:")
        print('')
        print('1) <FORAGGI>')
        print('')
        print('2) <CEREALI>')
        print('')
        print('3) <FONTI PROTEICHE>')
        print('')
        print('')
        print("Successivamente inserisci altri alimenti, FINO AD UN N° MAX DI 9 (3 alimenti inseriti manualmente + 6 alimenti inseriti in automatico)")
        print('')
        print('                                                                                        *	*	*')


    
    else:
        print('Nessun METODO DI CALCOLO trovato nella CARTELLA <%s>!' % cartella)
        print('')
        print('Per favore, dopo aver scelto un <metodo> inserisci i parametri richiesti!')



###############################################################################################################################
###############################################################################################################################
###############################################################################################################################




###############################################################################################################################
#################################################### FUNZIONE ESPORTA DATI ####################################################
###############################################################################################################################



def esporta_dati():



    global metodo
    
    if metodo == 'LYS_MET':
    
    
        print('Hai scelto il metodo di calcolo <%s>' % metodo)
        
        if len(ITEMS) == 5:
    
            print(ITEMS)
            print(len(ITEMS))

                
            with open('%s.py' % nome_file_dati, 'w') as external_file:
                
                print("COMPOSIZIONE_ITEM_1 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[0][0], ARRAYS[0][1], ARRAYS[0][2], ARRAYS[0][3], ARRAYS[0][4], ARRAYS[0][5], ARRAYS[0][6], ARRAYS[0][7], ARRAYS[0][8], ARRAYS[0][9], ARRAYS[0][10], ARRAYS[0][11]), file=external_file)
                print("COMPOSIZIONE_ITEM_2 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[1][0], ARRAYS[1][1], ARRAYS[1][2], ARRAYS[1][3], ARRAYS[1][4], ARRAYS[1][5], ARRAYS[1][6], ARRAYS[1][7], ARRAYS[1][8], ARRAYS[1][9], ARRAYS[1][10], ARRAYS[1][11]), file=external_file)
                print("COMPOSIZIONE_ITEM_3 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[2][0], ARRAYS[2][1], ARRAYS[2][2], ARRAYS[2][3], ARRAYS[2][4], ARRAYS[2][5], ARRAYS[2][6], ARRAYS[2][7], ARRAYS[2][8], ARRAYS[2][9], ARRAYS[2][10], ARRAYS[2][11]), file=external_file)
                print("COMPOSIZIONE_ITEM_4 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[3][0], ARRAYS[3][1], ARRAYS[3][2], ARRAYS[3][3], ARRAYS[3][4], ARRAYS[3][5], ARRAYS[3][6], ARRAYS[3][7], ARRAYS[3][8], ARRAYS[3][9], ARRAYS[3][10], ARRAYS[3][11]), file=external_file)
                print("COMPOSIZIONE_ITEM_5 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[4][0], ARRAYS[4][1], ARRAYS[4][2], ARRAYS[4][3], ARRAYS[4][4], ARRAYS[4][5], ARRAYS[4][6], ARRAYS[4][7], ARRAYS[4][8], ARRAYS[4][9], ARRAYS[4][10], ARRAYS[4][11]), file=external_file)
                

                print("alimenti = ['%s', '%s', '%s', '%s', '%s']" % (ITEMS[0], ITEMS[1], ITEMS[2], ITEMS[3], ITEMS[4]), file=external_file)

                print("QUANTITÀ = [%f, %f, %f, %f, %f]" % (Q, QM, QFP, quantità_alimento_1[0], quantità_alimento_2[0]), file=external_file)
      
                print("LISINA = [%f, %f, %f, %f, %f]" % (LISINA[0], LISINA[1], LISINA[2], LISINA[3], LISINA[4]), file=external_file)

                print("METIONINA = [%f, %f, %f, %f, %f]" % (METIONINA[0], METIONINA[1], METIONINA[2], METIONINA[3], METIONINA[4]), file=external_file)

                print("PDIE = [%f, %f, %f, %f, %f]" % (PDIE[0], PDIE[1], PDIE[2], PDIE[3], PDIE[4]), file=external_file)

                print("PDIN = [%f, %f, %f, %f, %f]" % (PDIN[0], PDIN[1], PDIN[2], PDIN[3], PDIN[4]), file=external_file)

# ATTENZIONE! Nella versione del 31.05.22 solo i primi 3 elementi dei vettori <lisina> e <metionina> (ossia quelli che si riferiscono agli alimenti inseriti manualmente) erano già stati moltiplicati per la quantità in kg! 
                                                   
                if len(PREZZI) == len(ITEMS):      
                    print("prezzi = [%f, %f, %f, %f, %f]" % (PREZZI[0], PREZZI[1], PREZZI[2], PREZZI[3], PREZZI[4]), file=external_file)
                else:
                    print('Impossibile creare la lista dei PREZZI: ci sono uno o più alimenti non quotati!')
                                                               
            external_file.close()


            with open('%s.py' % nome_file_quantità, 'w') as external_file:
                print("QUANTITÀ = [%f, %f, %f, %f, %f]" % (Q, QM, QFP, quantità_alimento_1[0], quantità_alimento_2[0]), file=external_file)
                            
            external_file.close() 
            
            print('DATI esportati nel FILE DI TESTO <%s.py> con successo!' % nome_file_dati)
            print('')
            print('quantità dei singoli alimenti esportate nel FILE DI TESTO <%s.py> con successo!' % nome_file_quantità)
            print('')
            print('Lista dei PREZZI DEGLI ALIMENTI (euro/TON) inseriti nella razione')
            print('')
            print(PREZZI)   


        elif len(ITEMS) == 6:
    
            print(ITEMS)
            print(len(ITEMS))

                
            with open('%s.py' % nome_file_dati, 'w') as external_file:
                
                print("COMPOSIZIONE_ITEM_1 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[0][0], ARRAYS[0][1], ARRAYS[0][2], ARRAYS[0][3], ARRAYS[0][4], ARRAYS[0][5], ARRAYS[0][6], ARRAYS[0][7], ARRAYS[0][8], ARRAYS[0][9], ARRAYS[0][10], ARRAYS[0][11]), file=external_file)
                print("COMPOSIZIONE_ITEM_2 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[1][0], ARRAYS[1][1], ARRAYS[1][2], ARRAYS[1][3], ARRAYS[1][4], ARRAYS[1][5], ARRAYS[1][6], ARRAYS[1][7], ARRAYS[1][8], ARRAYS[1][9], ARRAYS[1][10], ARRAYS[1][11]), file=external_file)
                print("COMPOSIZIONE_ITEM_3 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[2][0], ARRAYS[2][1], ARRAYS[2][2], ARRAYS[2][3], ARRAYS[2][4], ARRAYS[2][5], ARRAYS[2][6], ARRAYS[2][7], ARRAYS[2][8], ARRAYS[2][9], ARRAYS[2][10], ARRAYS[2][11]), file=external_file)
                print("COMPOSIZIONE_ITEM_4 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[3][0], ARRAYS[3][1], ARRAYS[3][2], ARRAYS[3][3], ARRAYS[3][4], ARRAYS[3][5], ARRAYS[3][6], ARRAYS[3][7], ARRAYS[3][8], ARRAYS[3][9], ARRAYS[3][10], ARRAYS[3][11]), file=external_file)
                print("COMPOSIZIONE_ITEM_5 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[4][0], ARRAYS[4][1], ARRAYS[4][2], ARRAYS[4][3], ARRAYS[4][4], ARRAYS[4][5], ARRAYS[4][6], ARRAYS[4][7], ARRAYS[4][8], ARRAYS[4][9], ARRAYS[4][10], ARRAYS[4][11]), file=external_file)
                print("COMPOSIZIONE_ITEM_6 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[5][0], ARRAYS[5][1], ARRAYS[5][2], ARRAYS[5][3], ARRAYS[5][4], ARRAYS[5][5], ARRAYS[5][6], ARRAYS[5][7], ARRAYS[5][8], ARRAYS[5][9], ARRAYS[5][10], ARRAYS[5][11]), file=external_file)
                

                print("alimenti = ['%s', '%s', '%s', '%s', '%s', '%s']" % (ITEMS[0], ITEMS[1], ITEMS[2], ITEMS[3], ITEMS[4], ITEMS[5]), file=external_file)

                print("QUANTITÀ = [%f, %f, %f, %f, %f, %f]" % (Q, QM, QFP, quantità_alimento_1[0], quantità_alimento_2[0], quantità_alimento_3[0]), file=external_file)
      
                print("LISINA = [%f, %f, %f, %f, %f, %f]" % (LISINA[0], LISINA[1], LISINA[2], LISINA[3], LISINA[4], LISINA[5]), file=external_file)

                print("METIONINA = [%f, %f, %f, %f, %f, %f]" % (METIONINA[0], METIONINA[1], METIONINA[2], METIONINA[3], METIONINA[4], METIONINA[5]), file=external_file)

                print("PDIE = [%f, %f, %f, %f, %f, %f]" % (PDIE[0], PDIE[1], PDIE[2], PDIE[3], PDIE[4], PDIE[5]), file=external_file)

                print("PDIN = [%f, %f, %f, %f, %f, %f]" % (PDIN[0], PDIN[1], PDIN[2], PDIN[3], PDIN[4], PDIN[5]), file=external_file)

# ATTENZIONE! Nella versione del 31.05.22 solo i primi 3 elementi dei vettori <lisina> e <metionina> (ossia quelli che si riferiscono agli alimenti inseriti manualmente) erano già stati moltiplicati per la quantità in kg! 
                                                   
                if len(PREZZI) == len(ITEMS):      
                        print("prezzi = [%f, %f, %f, %f, %f, %f]" % (PREZZI[0], PREZZI[1], PREZZI[2], PREZZI[3], PREZZI[4], PREZZI[5]), file=external_file)
                else:
                        print('Impossibile creare la lista dei PREZZI: ci sono uno o più alimenti non quotati!')
                                                               
            external_file.close()


            with open('%s.py' % nome_file_quantità, 'w') as external_file:
                print("QUANTITÀ = [%f, %f, %f, %f, %f, %f]" % (Q, QM, QFP, quantità_alimento_1[0], quantità_alimento_2[0], quantità_alimento_3[0]), file=external_file)
                            
            external_file.close() 
            
            print('DATI esportati nel FILE DI TESTO <%s.py> con successo!' % nome_file_dati)
            print('')
            print('quantità dei singoli alimenti esportate nel FILE DI TESTO <%s.py> con successo!' % nome_file_quantità)
            print('')
            print('Lista dei PREZZI DEGLI ALIMENTI (euro/TON) inseriti nella razione')
            print('')
            print(PREZZI)   



        elif len(ITEMS) == 7:
    
            print(ITEMS)
            print(len(ITEMS))

                
            with open('%s.py' % nome_file_dati, 'w') as external_file:
                
                print("COMPOSIZIONE_ITEM_1 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[0][0], ARRAYS[0][1], ARRAYS[0][2], ARRAYS[0][3], ARRAYS[0][4], ARRAYS[0][5], ARRAYS[0][6], ARRAYS[0][7], ARRAYS[0][8], ARRAYS[0][9], ARRAYS[0][10], ARRAYS[0][11]), file=external_file)
                print("COMPOSIZIONE_ITEM_2 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[1][0], ARRAYS[1][1], ARRAYS[1][2], ARRAYS[1][3], ARRAYS[1][4], ARRAYS[1][5], ARRAYS[1][6], ARRAYS[1][7], ARRAYS[1][8], ARRAYS[1][9], ARRAYS[1][10], ARRAYS[1][11]), file=external_file)
                print("COMPOSIZIONE_ITEM_3 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[2][0], ARRAYS[2][1], ARRAYS[2][2], ARRAYS[2][3], ARRAYS[2][4], ARRAYS[2][5], ARRAYS[2][6], ARRAYS[2][7], ARRAYS[2][8], ARRAYS[2][9], ARRAYS[2][10], ARRAYS[2][11]), file=external_file)
                print("COMPOSIZIONE_ITEM_4 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[3][0], ARRAYS[3][1], ARRAYS[3][2], ARRAYS[3][3], ARRAYS[3][4], ARRAYS[3][5], ARRAYS[3][6], ARRAYS[3][7], ARRAYS[3][8], ARRAYS[3][9], ARRAYS[3][10], ARRAYS[3][11]), file=external_file)
                print("COMPOSIZIONE_ITEM_5 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[4][0], ARRAYS[4][1], ARRAYS[4][2], ARRAYS[4][3], ARRAYS[4][4], ARRAYS[4][5], ARRAYS[4][6], ARRAYS[4][7], ARRAYS[4][8], ARRAYS[4][9], ARRAYS[4][10], ARRAYS[4][11]), file=external_file)
                print("COMPOSIZIONE_ITEM_6 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[5][0], ARRAYS[5][1], ARRAYS[5][2], ARRAYS[5][3], ARRAYS[5][4], ARRAYS[5][5], ARRAYS[5][6], ARRAYS[5][7], ARRAYS[5][8], ARRAYS[5][9], ARRAYS[5][10], ARRAYS[5][11]), file=external_file)
                print("COMPOSIZIONE_ITEM_7 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[6][0], ARRAYS[6][1], ARRAYS[6][2], ARRAYS[6][3], ARRAYS[6][4], ARRAYS[6][5], ARRAYS[6][6], ARRAYS[6][7], ARRAYS[6][8], ARRAYS[6][9], ARRAYS[6][10], ARRAYS[6][11]), file=external_file)
                

                print("alimenti = ['%s', '%s', '%s', '%s', '%s', '%s', '%s']" % (ITEMS[0], ITEMS[1], ITEMS[2], ITEMS[3], ITEMS[4], ITEMS[5], ITEMS[6]), file=external_file)

                print("QUANTITÀ = [%f, %f, %f, %f, %f, %f, %f]" % (Q, QM, QFP, quantità_alimento_1[0], quantità_alimento_2[0], quantità_alimento_3[0], quantità_alimento_4[0]), file=external_file)
      
                print("LISINA = [%f, %f, %f, %f, %f, %f, %f]" % (LISINA[0], LISINA[1], LISINA[2], LISINA[3], LISINA[4], LISINA[5], LISINA[6]), file=external_file)

                print("METIONINA = [%f, %f, %f, %f, %f, %f, %f]" % (METIONINA[0], METIONINA[1], METIONINA[2], METIONINA[3], METIONINA[4], METIONINA[5], METIONINA[6]), file=external_file)

                print("PDIE = [%f, %f, %f, %f, %f, %f, %f]" % (PDIE[0], PDIE[1], PDIE[2], PDIE[3], PDIE[4], PDIE[5], PDIE[6]), file=external_file)

                print("PDIN = [%f, %f, %f, %f, %f, %f, %f]" % (PDIN[0], PDIN[1], PDIN[2], PDIN[3], PDIN[4], PDIN[5], PDIN[6]), file=external_file)

# ATTENZIONE! Nella versione del 31.05.22 solo i primi 3 elementi dei vettori <lisina> e <metionina> (ossia quelli che si riferiscono agli alimenti inseriti manualmente) erano già stati moltiplicati per la quantità in kg! 
                                                   
                if len(PREZZI) == len(ITEMS):      
                    print("prezzi = [%f, %f, %f, %f, %f, %f, %f]" % (PREZZI[0], PREZZI[1], PREZZI[2], PREZZI[3], PREZZI[4], PREZZI[5], PREZZI[6]), file=external_file)
                else:
                    print('Impossibile creare la lista dei PREZZI: ci sono uno o più alimenti non quotati!')
                                                               
            external_file.close()


            with open('%s.py' % nome_file_quantità, 'w') as external_file:
                print("QUANTITÀ = [%f, %f, %f, %f, %f, %f, %f]" % (Q, QM, QFP, quantità_alimento_1[0], quantità_alimento_2[0], quantità_alimento_3[0], quantità_alimento_4[0]), file=external_file)
                            
            external_file.close() 
            
            print('DATI esportati nel FILE DI TESTO <%s.py> con successo!' % nome_file_dati)
            print('')
            print('quantità dei singoli alimenti esportate nel FILE DI TESTO <%s.py> con successo!' % nome_file_quantità)
            print('')
            print('Lista dei PREZZI DEGLI ALIMENTI (euro/TON) inseriti nella razione')
            print('')
            print(PREZZI)   


        elif len(ITEMS) == 8:
    
            print(ITEMS)
            print(len(ITEMS))

                
            with open('%s.py' % nome_file_dati, 'w') as external_file:
                
                print("COMPOSIZIONE_ITEM_1 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[0][0], ARRAYS[0][1], ARRAYS[0][2], ARRAYS[0][3], ARRAYS[0][4], ARRAYS[0][5], ARRAYS[0][6], ARRAYS[0][7], ARRAYS[0][8], ARRAYS[0][9], ARRAYS[0][10], ARRAYS[0][11]), file=external_file)
                print("COMPOSIZIONE_ITEM_2 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[1][0], ARRAYS[1][1], ARRAYS[1][2], ARRAYS[1][3], ARRAYS[1][4], ARRAYS[1][5], ARRAYS[1][6], ARRAYS[1][7], ARRAYS[1][8], ARRAYS[1][9], ARRAYS[1][10], ARRAYS[1][11]), file=external_file)
                print("COMPOSIZIONE_ITEM_3 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[2][0], ARRAYS[2][1], ARRAYS[2][2], ARRAYS[2][3], ARRAYS[2][4], ARRAYS[2][5], ARRAYS[2][6], ARRAYS[2][7], ARRAYS[2][8], ARRAYS[2][9], ARRAYS[2][10], ARRAYS[2][11]), file=external_file)
                print("COMPOSIZIONE_ITEM_4 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[3][0], ARRAYS[3][1], ARRAYS[3][2], ARRAYS[3][3], ARRAYS[3][4], ARRAYS[3][5], ARRAYS[3][6], ARRAYS[3][7], ARRAYS[3][8], ARRAYS[3][9], ARRAYS[3][10], ARRAYS[3][11]), file=external_file)
                print("COMPOSIZIONE_ITEM_5 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[4][0], ARRAYS[4][1], ARRAYS[4][2], ARRAYS[4][3], ARRAYS[4][4], ARRAYS[4][5], ARRAYS[4][6], ARRAYS[4][7], ARRAYS[4][8], ARRAYS[4][9], ARRAYS[4][10], ARRAYS[4][11]), file=external_file)
                print("COMPOSIZIONE_ITEM_6 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[5][0], ARRAYS[5][1], ARRAYS[5][2], ARRAYS[5][3], ARRAYS[5][4], ARRAYS[5][5], ARRAYS[5][6], ARRAYS[5][7], ARRAYS[5][8], ARRAYS[5][9], ARRAYS[5][10], ARRAYS[5][11]), file=external_file)
                print("COMPOSIZIONE_ITEM_7 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[6][0], ARRAYS[6][1], ARRAYS[6][2], ARRAYS[6][3], ARRAYS[6][4], ARRAYS[6][5], ARRAYS[6][6], ARRAYS[6][7], ARRAYS[6][8], ARRAYS[6][9], ARRAYS[6][10], ARRAYS[6][11]), file=external_file)
                print("COMPOSIZIONE_ITEM_8 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[7][0], ARRAYS[7][1], ARRAYS[7][2], ARRAYS[7][3], ARRAYS[7][4], ARRAYS[7][5], ARRAYS[7][6], ARRAYS[7][7], ARRAYS[7][8], ARRAYS[7][9], ARRAYS[7][10], ARRAYS[7][11]), file=external_file)
                

                print("alimenti = ['%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s']" % (ITEMS[0], ITEMS[1], ITEMS[2], ITEMS[3], ITEMS[4], ITEMS[5], ITEMS[6], ITEMS[7]), file=external_file)

                print("QUANTITÀ = [%f, %f, %f, %f, %f, %f, %f, %f]" % (Q, QM, QFP, quantità_alimento_1[0], quantità_alimento_2[0], quantità_alimento_3[0], quantità_alimento_4[0], quantità_alimento_5[0]), file=external_file)
      
                print("LISINA = [%f, %f, %f, %f, %f, %f, %f, %f]" % (LISINA[0], LISINA[1], LISINA[2], LISINA[3], LISINA[4], LISINA[5], LISINA[6], LISINA[7]), file=external_file)

                print("METIONINA = [%f, %f, %f, %f, %f, %f, %f, %f]" % (METIONINA[0], METIONINA[1], METIONINA[2], METIONINA[3], METIONINA[4], METIONINA[5], METIONINA[6], METIONINA[7]), file=external_file)

                print("PDIE = [%f, %f, %f, %f, %f, %f, %f, %f]" % (PDIE[0], PDIE[1], PDIE[2], PDIE[3], PDIE[4], PDIE[5], PDIE[6], PDIE[7]), file=external_file)

                print("PDIN = [%f, %f, %f, %f, %f, %f, %f, %f]" % (PDIN[0], PDIN[1], PDIN[2], PDIN[3], PDIN[4], PDIN[5], PDIN[6], PDIN[7]), file=external_file)
                
                if len(PREZZI) == len(ITEMS):      
                        print("prezzi = [%f, %f, %f, %f, %f, %f, %f, %f]" % (PREZZI[0], PREZZI[1], PREZZI[2], PREZZI[3], PREZZI[4], PREZZI[5], PREZZI[6], PREZZI[7]), file=external_file)
                else:
                        print('Impossibile creare la lista dei PREZZI: ci sono uno o più alimenti non quotati!')
                                                               
            external_file.close()


            with open('%s.py' % nome_file_quantità, 'w') as external_file:
                print("QUANTITÀ = [%f, %f, %f, %f, %f, %f, %f, %f]" % (Q, QM, QFP, quantità_alimento_1[0], quantità_alimento_2[0], quantità_alimento_3[0], quantità_alimento_4[0], quantità_alimento_5[0]), file=external_file)
                            
            external_file.close() 
            
            print('DATI esportati nel FILE DI TESTO <%s.py> con successo!' % nome_file_dati)
            print('')
            print('quantità dei singoli alimenti esportate nel FILE DI TESTO <%s.py> con successo!' % nome_file_quantità)
            print('')
            print('Lista dei PREZZI DEGLI ALIMENTI (euro/TON) inseriti nella razione')
            print('')
            print(PREZZI)  


    elif len(ITEMS) == 9:
    
            print(ITEMS)
            print(len(ITEMS))

                
            with open('%s.py' % nome_file_dati, 'w') as external_file:
                
                print("COMPOSIZIONE_ITEM_1 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[0][0], ARRAYS[0][1], ARRAYS[0][2], ARRAYS[0][3], ARRAYS[0][4], ARRAYS[0][5], ARRAYS[0][6], ARRAYS[0][7], ARRAYS[0][8], ARRAYS[0][9], ARRAYS[0][10], ARRAYS[0][11]), file=external_file)
                print("COMPOSIZIONE_ITEM_2 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[1][0], ARRAYS[1][1], ARRAYS[1][2], ARRAYS[1][3], ARRAYS[1][4], ARRAYS[1][5], ARRAYS[1][6], ARRAYS[1][7], ARRAYS[1][8], ARRAYS[1][9], ARRAYS[1][10], ARRAYS[1][11]), file=external_file)
                print("COMPOSIZIONE_ITEM_3 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[2][0], ARRAYS[2][1], ARRAYS[2][2], ARRAYS[2][3], ARRAYS[2][4], ARRAYS[2][5], ARRAYS[2][6], ARRAYS[2][7], ARRAYS[2][8], ARRAYS[2][9], ARRAYS[2][10], ARRAYS[2][11]), file=external_file)
                print("COMPOSIZIONE_ITEM_4 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[3][0], ARRAYS[3][1], ARRAYS[3][2], ARRAYS[3][3], ARRAYS[3][4], ARRAYS[3][5], ARRAYS[3][6], ARRAYS[3][7], ARRAYS[3][8], ARRAYS[3][9], ARRAYS[3][10], ARRAYS[3][11]), file=external_file)
                print("COMPOSIZIONE_ITEM_5 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[4][0], ARRAYS[4][1], ARRAYS[4][2], ARRAYS[4][3], ARRAYS[4][4], ARRAYS[4][5], ARRAYS[4][6], ARRAYS[4][7], ARRAYS[4][8], ARRAYS[4][9], ARRAYS[4][10], ARRAYS[4][11]), file=external_file)
                print("COMPOSIZIONE_ITEM_6 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[5][0], ARRAYS[5][1], ARRAYS[5][2], ARRAYS[5][3], ARRAYS[5][4], ARRAYS[5][5], ARRAYS[5][6], ARRAYS[5][7], ARRAYS[5][8], ARRAYS[5][9], ARRAYS[5][10], ARRAYS[5][11]), file=external_file)
                print("COMPOSIZIONE_ITEM_7 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[6][0], ARRAYS[6][1], ARRAYS[6][2], ARRAYS[6][3], ARRAYS[6][4], ARRAYS[6][5], ARRAYS[6][6], ARRAYS[6][7], ARRAYS[6][8], ARRAYS[6][9], ARRAYS[6][10], ARRAYS[6][11]), file=external_file)
                print("COMPOSIZIONE_ITEM_8 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[7][0], ARRAYS[7][1], ARRAYS[7][2], ARRAYS[7][3], ARRAYS[7][4], ARRAYS[7][5], ARRAYS[7][6], ARRAYS[7][7], ARRAYS[7][8], ARRAYS[7][9], ARRAYS[7][10], ARRAYS[7][11]), file=external_file)
                print("COMPOSIZIONE_ITEM_9 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[8][0], ARRAYS[8][1], ARRAYS[8][2], ARRAYS[8][3], ARRAYS[8][4], ARRAYS[8][5], ARRAYS[8][6], ARRAYS[8][7], ARRAYS[8][8], ARRAYS[8][9], ARRAYS[8][10], ARRAYS[8][11]), file=external_file)
                

                print("alimenti = ['%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s']" % (ITEMS[0], ITEMS[1], ITEMS[2], ITEMS[3], ITEMS[4], ITEMS[5], ITEMS[6], ITEMS[7], ITEMS[8]), file=external_file)

                print("QUANTITÀ = [%f, %f, %f, %f, %f, %f, %f, %f, %f]" % (Q, QM, QFP, quantità_alimento_1[0], quantità_alimento_2[0], quantità_alimento_3[0], quantità_alimento_4[0], quantità_alimento_5[0], quantità_alimento_6[0]), file=external_file)
      
                print("LISINA = [%f, %f, %f, %f, %f, %f, %f, %f, %f]" % (LISINA[0], LISINA[1], LISINA[2], LISINA[3], LISINA[4], LISINA[5], LISINA[6], LISINA[7], LISINA[8]), file=external_file)

                print("METIONINA = [%f, %f, %f, %f, %f, %f, %f, %f, %f]" % (METIONINA[0], METIONINA[1], METIONINA[2], METIONINA[3], METIONINA[4], METIONINA[5], METIONINA[6], METIONINA[7], METIONINA[8]), file=external_file)

                print("PDIE = [%f, %f, %f, %f, %f, %f, %f, %f, %f]" % (PDIE[0], PDIE[1], PDIE[2], PDIE[3], PDIE[4], PDIE[5], PDIE[6], PDIE[7], PDIE[8]), file=external_file)

                print("PDIN = [%f, %f, %f, %f, %f, %f, %f, %f, %f]" % (PDIN[0], PDIN[1], PDIN[2], PDIN[3], PDIN[4], PDIN[5], PDIN[6], PDIN[7], PDIN[8]), file=external_file)



# ATTENZIONE! Nella versione del 31.05.22 solo i primi 3 elementi dei vettori <lisina> e <metionina> (ossia quelli che si riferiscono agli alimenti inseriti manualmente) erano già stati moltiplicati per la quantità in kg! 
                                                   
                if len(PREZZI) == len(ITEMS):      
                    print("prezzi = [%f, %f, %f, %f, %f, %f, %f, %f, %f]" % (PREZZI[0], PREZZI[1], PREZZI[2], PREZZI[3], PREZZI[4], PREZZI[5], PREZZI[6], PREZZI[7], PREZZI[8]), file=external_file)
                else:
                    print('Impossibile creare la lista dei PREZZI: ci sono uno o più alimenti non quotati!')
                                                               
            external_file.close()


            with open('%s.py' % nome_file_quantità, 'w') as external_file:
                print("QUANTITÀ = [%f, %f, %f, %f, %f, %f, %f, %f, %f]" % (Q, QM, QFP, quantità_alimento_1[0], quantità_alimento_2[0], quantità_alimento_3[0], quantità_alimento_4[0], quantità_alimento_5[0], quantità_alimento_6[0]), file=external_file)
                            
            external_file.close() 
            
            print('DATI esportati nel FILE DI TESTO <%s.py> con successo!' % nome_file_dati)
            print('')
            print('quantità dei singoli alimenti esportate nel FILE DI TESTO <%s.py> con successo!' % nome_file_quantità)
            print('')
            print('Lista dei PREZZI DEGLI ALIMENTI (euro/TON) inseriti nella razione')
            print('')
            print(PREZZI)   

#       else:
#           print('OPS: qualcosa non ha funzionato!')
#           print('Riprova inserendo un N° DI ALIMENTI corretto!') 
#           print(ITEMS)
#           print(len(ITEMS))
                                                


################################################################ FUNZIONE <ESPORTA_DATI> - METODO <_CNCPS_> ################################################################
# STO LAVORANDO QUI!


    elif metodo == '_CNCPS_':
    
    
        print('Hai scelto il metodo di calcolo <%s>' % metodo)
        
        print('Hai scelto il metodo di calcolo <%s>' % metodo)
        
        if len(ITEMS) == 5:
    
            print(ITEMS)
            print(len(ITEMS))

                
            with open('%s.py' % nome_file_dati, 'w') as external_file:
                
                print("COMPOSIZIONE_ITEM_1 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[0][0], ARRAYS[0][1], ARRAYS[0][2], ARRAYS[0][3], ARRAYS[0][4], ARRAYS[0][5], ARRAYS[0][6], ARRAYS[0][7], ARRAYS[0][8], ARRAYS[0][9], ARRAYS[0][10], ARRAYS[0][11], ARRAYS[0][12]), file=external_file)
                print("COMPOSIZIONE_ITEM_2 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[1][0], ARRAYS[1][1], ARRAYS[1][2], ARRAYS[1][3], ARRAYS[1][4], ARRAYS[1][5], ARRAYS[1][6], ARRAYS[1][7], ARRAYS[1][8], ARRAYS[1][9], ARRAYS[1][10], ARRAYS[1][11], ARRAYS[1][12]), file=external_file)
                print("COMPOSIZIONE_ITEM_3 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[2][0], ARRAYS[2][1], ARRAYS[2][2], ARRAYS[2][3], ARRAYS[2][4], ARRAYS[2][5], ARRAYS[2][6], ARRAYS[2][7], ARRAYS[2][8], ARRAYS[2][9], ARRAYS[2][10], ARRAYS[2][11], ARRAYS[2][12]), file=external_file)
                print("COMPOSIZIONE_ITEM_4 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[3][0], ARRAYS[3][1], ARRAYS[3][2], ARRAYS[3][3], ARRAYS[3][4], ARRAYS[3][5], ARRAYS[3][6], ARRAYS[3][7], ARRAYS[3][8], ARRAYS[3][9], ARRAYS[3][10], ARRAYS[3][11], ARRAYS[3][12]), file=external_file)
                print("COMPOSIZIONE_ITEM_5 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[4][0], ARRAYS[4][1], ARRAYS[4][2], ARRAYS[4][3], ARRAYS[4][4], ARRAYS[4][5], ARRAYS[4][6], ARRAYS[4][7], ARRAYS[4][8], ARRAYS[4][9], ARRAYS[4][10], ARRAYS[4][11], ARRAYS[4][12]), file=external_file)
                

                print("alimenti = ['%s', '%s', '%s', '%s', '%s']" % (ITEMS[0], ITEMS[1], ITEMS[2], ITEMS[3], ITEMS[4]), file=external_file)

                print("QUANTITÀ = [%f, %f, %f, %f, %f]" % (Q, QM, QFP, quantità_alimento_1[0], quantità_alimento_2[0]), file=external_file)
      

# ATTENZIONE! Nella versione del 31.05.22 solo i primi 3 elementi dei vettori <lisina> e <metionina> (ossia quelli che si riferiscono agli alimenti inseriti manualmente) erano già stati moltiplicati per la quantità in kg! 
                                                   
                if len(PREZZI) == len(ITEMS):      
                    print("prezzi = [%f, %f, %f, %f, %f]" % (PREZZI[0], PREZZI[1], PREZZI[2], PREZZI[3], PREZZI[4]), file=external_file)
                else:
                    print('Impossibile creare la lista dei PREZZI: ci sono uno o più alimenti non quotati!')
                                                               
            external_file.close()


            with open('%s.py' % nome_file_quantità, 'w') as external_file:
                print("QUANTITÀ = [%f, %f, %f, %f, %f]" % (Q, QM, QFP, quantità_alimento_1[0], quantità_alimento_2[0]), file=external_file)
                            
            external_file.close() 
            
            print('DATI esportati nel FILE DI TESTO <%s.py> con successo!' % nome_file_dati)
            print('')
            print('quantità dei singoli alimenti esportate nel FILE DI TESTO <%s.py> con successo!' % nome_file_quantità)
            print('')
            print('Lista dei PREZZI DEGLI ALIMENTI (euro/TON) inseriti nella razione')
            print('')
            print(PREZZI)   


        elif len(ITEMS) == 6:
    
            print(ITEMS)
            print(len(ITEMS))

                
            with open('%s.py' % nome_file_dati, 'w') as external_file:
                
                print("COMPOSIZIONE_ITEM_1 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[0][0], ARRAYS[0][1], ARRAYS[0][2], ARRAYS[0][3], ARRAYS[0][4], ARRAYS[0][5], ARRAYS[0][6], ARRAYS[0][7], ARRAYS[0][8], ARRAYS[0][9], ARRAYS[0][10], ARRAYS[0][11], ARRAYS[0][12]), file=external_file)
                print("COMPOSIZIONE_ITEM_2 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[1][0], ARRAYS[1][1], ARRAYS[1][2], ARRAYS[1][3], ARRAYS[1][4], ARRAYS[1][5], ARRAYS[1][6], ARRAYS[1][7], ARRAYS[1][8], ARRAYS[1][9], ARRAYS[1][10], ARRAYS[1][11], ARRAYS[1][12]), file=external_file)
                print("COMPOSIZIONE_ITEM_3 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[2][0], ARRAYS[2][1], ARRAYS[2][2], ARRAYS[2][3], ARRAYS[2][4], ARRAYS[2][5], ARRAYS[2][6], ARRAYS[2][7], ARRAYS[2][8], ARRAYS[2][9], ARRAYS[2][10], ARRAYS[2][11], ARRAYS[2][12]), file=external_file)
                print("COMPOSIZIONE_ITEM_4 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[3][0], ARRAYS[3][1], ARRAYS[3][2], ARRAYS[3][3], ARRAYS[3][4], ARRAYS[3][5], ARRAYS[3][6], ARRAYS[3][7], ARRAYS[3][8], ARRAYS[3][9], ARRAYS[3][10], ARRAYS[3][11], ARRAYS[3][12]), file=external_file)
                print("COMPOSIZIONE_ITEM_5 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[4][0], ARRAYS[4][1], ARRAYS[4][2], ARRAYS[4][3], ARRAYS[4][4], ARRAYS[4][5], ARRAYS[4][6], ARRAYS[4][7], ARRAYS[4][8], ARRAYS[4][9], ARRAYS[4][10], ARRAYS[4][11], ARRAYS[4][12]), file=external_file)
                print("COMPOSIZIONE_ITEM_6 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[5][0], ARRAYS[5][1], ARRAYS[5][2], ARRAYS[5][3], ARRAYS[5][4], ARRAYS[5][5], ARRAYS[5][6], ARRAYS[5][7], ARRAYS[5][8], ARRAYS[5][9], ARRAYS[5][10], ARRAYS[5][11], ARRAYS[5][12]), file=external_file)
                

                print("alimenti = ['%s', '%s', '%s', '%s', '%s', '%s']" % (ITEMS[0], ITEMS[1], ITEMS[2], ITEMS[3], ITEMS[4], ITEMS[5]), file=external_file)

                print("QUANTITÀ = [%f, %f, %f, %f, %f, %f]" % (Q, QM, QFP, quantità_alimento_1[0], quantità_alimento_2[0], quantità_alimento_3[0]), file=external_file)
      

# ATTENZIONE! Nella versione del 31.05.22 solo i primi 3 elementi dei vettori <lisina> e <metionina> (ossia quelli che si riferiscono agli alimenti inseriti manualmente) erano già stati moltiplicati per la quantità in kg! 
                                                   
                if len(PREZZI) == len(ITEMS):      
                        print("prezzi = [%f, %f, %f, %f, %f, %f]" % (PREZZI[0], PREZZI[1], PREZZI[2], PREZZI[3], PREZZI[4], PREZZI[5]), file=external_file)
                else:
                        print('Impossibile creare la lista dei PREZZI: ci sono uno o più alimenti non quotati!')
                                                               
            external_file.close()


            with open('%s.py' % nome_file_quantità, 'w') as external_file:
                print("QUANTITÀ = [%f, %f, %f, %f, %f, %f]" % (Q, QM, QFP, quantità_alimento_1[0], quantità_alimento_2[0], quantità_alimento_3[0]), file=external_file)
                            
            external_file.close() 
            
            print('DATI esportati nel FILE DI TESTO <%s.py> con successo!' % nome_file_dati)
            print('')
            print('quantità dei singoli alimenti esportate nel FILE DI TESTO <%s.py> con successo!' % nome_file_quantità)
            print('')
            print('Lista dei PREZZI DEGLI ALIMENTI (euro/TON) inseriti nella razione')
            print('')
            print(PREZZI)   



        elif len(ITEMS) == 7:
    
            print(ITEMS)
            print(len(ITEMS))

                
            with open('%s.py' % nome_file_dati, 'w') as external_file:
                
                print("COMPOSIZIONE_ITEM_1 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[0][0], ARRAYS[0][1], ARRAYS[0][2], ARRAYS[0][3], ARRAYS[0][4], ARRAYS[0][5], ARRAYS[0][6], ARRAYS[0][7], ARRAYS[0][8], ARRAYS[0][9], ARRAYS[0][10], ARRAYS[0][11], ARRAYS[0][12]), file=external_file)
                print("COMPOSIZIONE_ITEM_2 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[1][0], ARRAYS[1][1], ARRAYS[1][2], ARRAYS[1][3], ARRAYS[1][4], ARRAYS[1][5], ARRAYS[1][6], ARRAYS[1][7], ARRAYS[1][8], ARRAYS[1][9], ARRAYS[1][10], ARRAYS[1][11], ARRAYS[1][12]), file=external_file)
                print("COMPOSIZIONE_ITEM_3 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[2][0], ARRAYS[2][1], ARRAYS[2][2], ARRAYS[2][3], ARRAYS[2][4], ARRAYS[2][5], ARRAYS[2][6], ARRAYS[2][7], ARRAYS[2][8], ARRAYS[2][9], ARRAYS[2][10], ARRAYS[2][11], ARRAYS[2][12]), file=external_file)
                print("COMPOSIZIONE_ITEM_4 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[3][0], ARRAYS[3][1], ARRAYS[3][2], ARRAYS[3][3], ARRAYS[3][4], ARRAYS[3][5], ARRAYS[3][6], ARRAYS[3][7], ARRAYS[3][8], ARRAYS[3][9], ARRAYS[3][10], ARRAYS[3][11], ARRAYS[3][12]), file=external_file)
                print("COMPOSIZIONE_ITEM_5 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[4][0], ARRAYS[4][1], ARRAYS[4][2], ARRAYS[4][3], ARRAYS[4][4], ARRAYS[4][5], ARRAYS[4][6], ARRAYS[4][7], ARRAYS[4][8], ARRAYS[4][9], ARRAYS[4][10], ARRAYS[4][11], ARRAYS[4][12]), file=external_file)
                print("COMPOSIZIONE_ITEM_6 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[5][0], ARRAYS[5][1], ARRAYS[5][2], ARRAYS[5][3], ARRAYS[5][4], ARRAYS[5][5], ARRAYS[5][6], ARRAYS[5][7], ARRAYS[5][8], ARRAYS[5][9], ARRAYS[5][10], ARRAYS[5][11], ARRAYS[5][12]), file=external_file)
                print("COMPOSIZIONE_ITEM_7 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[6][0], ARRAYS[6][1], ARRAYS[6][2], ARRAYS[6][3], ARRAYS[6][4], ARRAYS[6][5], ARRAYS[6][6], ARRAYS[6][7], ARRAYS[6][8], ARRAYS[6][9], ARRAYS[6][10], ARRAYS[6][11], ARRAYS[6][12]), file=external_file)
                

                print("alimenti = ['%s', '%s', '%s', '%s', '%s', '%s', '%s']" % (ITEMS[0], ITEMS[1], ITEMS[2], ITEMS[3], ITEMS[4], ITEMS[5], ITEMS[6]), file=external_file)

                print("QUANTITÀ = [%f, %f, %f, %f, %f, %f, %f]" % (Q, QM, QFP, quantità_alimento_1[0], quantità_alimento_2[0], quantità_alimento_3[0], quantità_alimento_4[0]), file=external_file)
      

# ATTENZIONE! Nella versione del 31.05.22 solo i primi 3 elementi dei vettori <lisina> e <metionina> (ossia quelli che si riferiscono agli alimenti inseriti manualmente) erano già stati moltiplicati per la quantità in kg! 
                                                   
                if len(PREZZI) == len(ITEMS):      
                    print("prezzi = [%f, %f, %f, %f, %f, %f, %f]" % (PREZZI[0], PREZZI[1], PREZZI[2], PREZZI[3], PREZZI[4], PREZZI[5], PREZZI[6]), file=external_file)
                else:
                    print('Impossibile creare la lista dei PREZZI: ci sono uno o più alimenti non quotati!')
                                                               
            external_file.close()


            with open('%s.py' % nome_file_quantità, 'w') as external_file:
                print("QUANTITÀ = [%f, %f, %f, %f, %f, %f, %f]" % (Q, QM, QFP, quantità_alimento_1[0], quantità_alimento_2[0], quantità_alimento_3[0], quantità_alimento_4[0]), file=external_file)
                            
            external_file.close() 
            
            print('DATI esportati nel FILE DI TESTO <%s.py> con successo!' % nome_file_dati)
            print('')
            print('quantità dei singoli alimenti esportate nel FILE DI TESTO <%s.py> con successo!' % nome_file_quantità)
            print('')
            print('Lista dei PREZZI DEGLI ALIMENTI (euro/TON) inseriti nella razione')
            print('')
            print(PREZZI)   


        elif len(ITEMS) == 8:
    
            print(ITEMS)
            print(len(ITEMS))

                
            with open('%s.py' % nome_file_dati, 'w') as external_file:
                
                print("COMPOSIZIONE_ITEM_1 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[0][0], ARRAYS[0][1], ARRAYS[0][2], ARRAYS[0][3], ARRAYS[0][4], ARRAYS[0][5], ARRAYS[0][6], ARRAYS[0][7], ARRAYS[0][8], ARRAYS[0][9], ARRAYS[0][10], ARRAYS[0][11], ARRAYS[0][12]), file=external_file)
                print("COMPOSIZIONE_ITEM_2 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[1][0], ARRAYS[1][1], ARRAYS[1][2], ARRAYS[1][3], ARRAYS[1][4], ARRAYS[1][5], ARRAYS[1][6], ARRAYS[1][7], ARRAYS[1][8], ARRAYS[1][9], ARRAYS[1][10], ARRAYS[1][11], ARRAYS[1][12]), file=external_file)
                print("COMPOSIZIONE_ITEM_3 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[2][0], ARRAYS[2][1], ARRAYS[2][2], ARRAYS[2][3], ARRAYS[2][4], ARRAYS[2][5], ARRAYS[2][6], ARRAYS[2][7], ARRAYS[2][8], ARRAYS[2][9], ARRAYS[2][10], ARRAYS[2][11], ARRAYS[2][12]), file=external_file)
                print("COMPOSIZIONE_ITEM_4 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[3][0], ARRAYS[3][1], ARRAYS[3][2], ARRAYS[3][3], ARRAYS[3][4], ARRAYS[3][5], ARRAYS[3][6], ARRAYS[3][7], ARRAYS[3][8], ARRAYS[3][9], ARRAYS[3][10], ARRAYS[3][11], ARRAYS[3][12]), file=external_file)
                print("COMPOSIZIONE_ITEM_5 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[4][0], ARRAYS[4][1], ARRAYS[4][2], ARRAYS[4][3], ARRAYS[4][4], ARRAYS[4][5], ARRAYS[4][6], ARRAYS[4][7], ARRAYS[4][8], ARRAYS[4][9], ARRAYS[4][10], ARRAYS[4][11], ARRAYS[4][12]), file=external_file)
                print("COMPOSIZIONE_ITEM_6 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[5][0], ARRAYS[5][1], ARRAYS[5][2], ARRAYS[5][3], ARRAYS[5][4], ARRAYS[5][5], ARRAYS[5][6], ARRAYS[5][7], ARRAYS[5][8], ARRAYS[5][9], ARRAYS[5][10], ARRAYS[5][11], ARRAYS[5][12]), file=external_file)
                print("COMPOSIZIONE_ITEM_7 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[6][0], ARRAYS[6][1], ARRAYS[6][2], ARRAYS[6][3], ARRAYS[6][4], ARRAYS[6][5], ARRAYS[6][6], ARRAYS[6][7], ARRAYS[6][8], ARRAYS[6][9], ARRAYS[6][10], ARRAYS[6][11], ARRAYS[6][12]), file=external_file)
                print("COMPOSIZIONE_ITEM_8 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[7][0], ARRAYS[7][1], ARRAYS[7][2], ARRAYS[7][3], ARRAYS[7][4], ARRAYS[7][5], ARRAYS[7][6], ARRAYS[7][7], ARRAYS[7][8], ARRAYS[7][9], ARRAYS[7][10], ARRAYS[7][11], ARRAYS[7][12]), file=external_file)
                

                print("alimenti = ['%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s']" % (ITEMS[0], ITEMS[1], ITEMS[2], ITEMS[3], ITEMS[4], ITEMS[5], ITEMS[6], ITEMS[7]), file=external_file)

                print("QUANTITÀ = [%f, %f, %f, %f, %f, %f, %f, %f]" % (Q, QM, QFP, quantità_alimento_1[0], quantità_alimento_2[0], quantità_alimento_3[0], quantità_alimento_4[0], quantità_alimento_5[0]), file=external_file)
      
                
                if len(PREZZI) == len(ITEMS):      
                        print("prezzi = [%f, %f, %f, %f, %f, %f, %f, %f]" % (PREZZI[0], PREZZI[1], PREZZI[2], PREZZI[3], PREZZI[4], PREZZI[5], PREZZI[6], PREZZI[7]), file=external_file)
                else:
                        print('Impossibile creare la lista dei PREZZI: ci sono uno o più alimenti non quotati!')
                                                               
            external_file.close()


            with open('%s.py' % nome_file_quantità, 'w') as external_file:
                print("QUANTITÀ = [%f, %f, %f, %f, %f, %f, %f, %f]" % (Q, QM, QFP, quantità_alimento_1[0], quantità_alimento_2[0], quantità_alimento_3[0], quantità_alimento_4[0], quantità_alimento_5[0]), file=external_file)
                            
            external_file.close() 
            
            print('DATI esportati nel FILE DI TESTO <%s.py> con successo!' % nome_file_dati)
            print('')
            print('quantità dei singoli alimenti esportate nel FILE DI TESTO <%s.py> con successo!' % nome_file_quantità)
            print('')
            print('Lista dei PREZZI DEGLI ALIMENTI (euro/TON) inseriti nella razione')
            print('')
            print(PREZZI)  


    elif len(ITEMS) == 9:
    
            print(ITEMS)
            print(len(ITEMS))

                
            with open('%s.py' % nome_file_dati, 'w') as external_file:
                
                print("COMPOSIZIONE_ITEM_1 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[0][0], ARRAYS[0][1], ARRAYS[0][2], ARRAYS[0][3], ARRAYS[0][4], ARRAYS[0][5], ARRAYS[0][6], ARRAYS[0][7], ARRAYS[0][8], ARRAYS[0][9], ARRAYS[0][10], ARRAYS[0][11], ARRAYS[0][12]), file=external_file)
                print("COMPOSIZIONE_ITEM_2 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[1][0], ARRAYS[1][1], ARRAYS[1][2], ARRAYS[1][3], ARRAYS[1][4], ARRAYS[1][5], ARRAYS[1][6], ARRAYS[1][7], ARRAYS[1][8], ARRAYS[1][9], ARRAYS[1][10], ARRAYS[1][11], ARRAYS[1][12]), file=external_file)
                print("COMPOSIZIONE_ITEM_3 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[2][0], ARRAYS[2][1], ARRAYS[2][2], ARRAYS[2][3], ARRAYS[2][4], ARRAYS[2][5], ARRAYS[2][6], ARRAYS[2][7], ARRAYS[2][8], ARRAYS[2][9], ARRAYS[2][10], ARRAYS[2][11], ARRAYS[2][12]), file=external_file)
                print("COMPOSIZIONE_ITEM_4 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[3][0], ARRAYS[3][1], ARRAYS[3][2], ARRAYS[3][3], ARRAYS[3][4], ARRAYS[3][5], ARRAYS[3][6], ARRAYS[3][7], ARRAYS[3][8], ARRAYS[3][9], ARRAYS[3][10], ARRAYS[3][11], ARRAYS[3][12]), file=external_file)
                print("COMPOSIZIONE_ITEM_5 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[4][0], ARRAYS[4][1], ARRAYS[4][2], ARRAYS[4][3], ARRAYS[4][4], ARRAYS[4][5], ARRAYS[4][6], ARRAYS[4][7], ARRAYS[4][8], ARRAYS[4][9], ARRAYS[4][10], ARRAYS[4][11], ARRAYS[4][12]), file=external_file)
                print("COMPOSIZIONE_ITEM_6 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[5][0], ARRAYS[5][1], ARRAYS[5][2], ARRAYS[5][3], ARRAYS[5][4], ARRAYS[5][5], ARRAYS[5][6], ARRAYS[5][7], ARRAYS[5][8], ARRAYS[5][9], ARRAYS[5][10], ARRAYS[5][11], ARRAYS[5][12]), file=external_file)
                print("COMPOSIZIONE_ITEM_7 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[6][0], ARRAYS[6][1], ARRAYS[6][2], ARRAYS[6][3], ARRAYS[6][4], ARRAYS[6][5], ARRAYS[6][6], ARRAYS[6][7], ARRAYS[6][8], ARRAYS[6][9], ARRAYS[6][10], ARRAYS[6][11], ARRAYS[6][12]), file=external_file)
                print("COMPOSIZIONE_ITEM_8 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[7][0], ARRAYS[7][1], ARRAYS[7][2], ARRAYS[7][3], ARRAYS[7][4], ARRAYS[7][5], ARRAYS[7][6], ARRAYS[7][7], ARRAYS[7][8], ARRAYS[7][9], ARRAYS[7][10], ARRAYS[7][11], ARRAYS[7][12]), file=external_file)
                print("COMPOSIZIONE_ITEM_9 = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]" % (ARRAYS[8][0], ARRAYS[8][1], ARRAYS[8][2], ARRAYS[8][3], ARRAYS[8][4], ARRAYS[8][5], ARRAYS[8][6], ARRAYS[8][7], ARRAYS[8][8], ARRAYS[8][9], ARRAYS[8][10], ARRAYS[8][11], ARRAYS[8][12]), file=external_file)
                

                print("alimenti = ['%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s']" % (ITEMS[0], ITEMS[1], ITEMS[2], ITEMS[3], ITEMS[4], ITEMS[5], ITEMS[6], ITEMS[7], ITEMS[8]), file=external_file)

                print("QUANTITÀ = [%f, %f, %f, %f, %f, %f, %f, %f, %f]" % (Q, QM, QFP, quantità_alimento_1[0], quantità_alimento_2[0], quantità_alimento_3[0], quantità_alimento_4[0], quantità_alimento_5[0], quantità_alimento_6[0]), file=external_file)
      


# ATTENZIONE! Nella versione del 31.05.22 solo i primi 3 elementi dei vettori <lisina> e <metionina> (ossia quelli che si riferiscono agli alimenti inseriti manualmente) erano già stati moltiplicati per la quantità in kg! 
                                                   
                if len(PREZZI) == len(ITEMS):      
                    print("prezzi = [%f, %f, %f, %f, %f, %f, %f, %f, %f]" % (PREZZI[0], PREZZI[1], PREZZI[2], PREZZI[3], PREZZI[4], PREZZI[5], PREZZI[6], PREZZI[7], PREZZI[8]), file=external_file)
                else:
                    print('Impossibile creare la lista dei PREZZI: ci sono uno o più alimenti non quotati!')
                                                               
            external_file.close()


            with open('%s.py' % nome_file_quantità, 'w') as external_file:
                print("QUANTITÀ = [%f, %f, %f, %f, %f, %f, %f, %f, %f]" % (Q, QM, QFP, quantità_alimento_1[0], quantità_alimento_2[0], quantità_alimento_3[0], quantità_alimento_4[0], quantità_alimento_5[0], quantità_alimento_6[0]), file=external_file)
                            
            external_file.close() 
            
            print('DATI esportati nel FILE DI TESTO <%s.py> con successo!' % nome_file_dati)
            print('')
            print('quantità dei singoli alimenti esportate nel FILE DI TESTO <%s.py> con successo!' % nome_file_quantità)
            print('')
            print('Lista dei PREZZI DEGLI ALIMENTI (euro/TON) inseriti nella razione')
            print('')
            print(PREZZI)   

#       else:
#           print('OPS: qualcosa non ha funzionato!')
#           print('Riprova inserendo un N° DI ALIMENTI corretto!') 
#           print(ITEMS)
#           print(len(ITEMS))
                                

                

######################################################################################################################
######################################################################################################################
######################################################################################################################


    
###############################################################################################################################


def resetta_tutto():
    chiedi_conferma = askstring('Entry', 'Vuoi resettare tutti i dati inseriti? <y>: sì, <n>: no!')
    if chiedi_conferma == 'y':
        global ARR, COSTO_RAZIONE, F, P, S
        ARR = []
        COSTO_RAZIONE = []
        ITEMS = []
        PREZZI = []
        quantità = []
        S = []
        F = []
        P = []
        S = []
        if Path("PARAMETRI_PyR_%s.txt" % nome_file_parametri).exists():
            os.system('rm PARAMETRI_PyR_%s.txt' % nome_file_parametri)
            print('file <PARAMETRI_PyR_%s.txt> eliminato con SUCCESSO!' % nome_file_parametri)
        else:
            print('Non ho trovato il file <PARAMETRI_PyR_%s.txt>' % nome_file_parametri)
        print('')
        print('PARAMETRI ed ALIMENTI precedentemente inseriti sono stati cancellati con SUCCESSO!')
        print('')
        print('Per continuare, scegli un METODO DI CALCOLO della razione ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
    else:
        print('Nessun PARAMETRO trovato nella CARTELLA <%s>!' % cartella)   


def cancella_alimenti_inseriti():
    chiedi_conferma = askstring('Entry', 'Vuoi cancellare gli alimenti inseriti? <y>: sì, <n>: no!')
    if chiedi_conferma == 'y':
        global ARR, COSTO_RAZIONE, ITEMS, LISINA, METIONINA, PDIE, PDIN, PREZZI, quantità, S
        ARR = []
        COSTO_RAZIONE = []
        ITEMS = []
        LISINA = []
        METIONINA = []
        PDIE = []
        PDIN = []
        PREZZI = []
        quantità = []
        S = []
            
        print('')
        print('Gli ALIMENTI precedentemente inseriti sono stati cancellati con SUCCESSO!')
        print('')
        print('Per continuare, scegli nuovamente alcuni alimenti')
        print('')
    else:
        print('Operazione annullata con SUCCESSO!')    


def stampa_fabbisogni_CNCPS():
    
    F = []
    F.append(DMI)
    F.append(CP)
    F.append(RDP)
    F.append(RUP)
    F.append(FG)
    F.append(NDF)
    F.append(ADF)
    F.append(FAT)
    F.append(AM)
    F.append(ZUC)
    F.append(Ca_tot)
    F.append(P_tot)
    F.append(UFL_tot)

    print('FABBISOGNI calcolati secondo il METODO <Cornell %s>' % metodo)
    print('')
    print('')
    print('CAPACITÀ DI INGESTIONE => %f kg di Sostanza Secca' % F[0])
    print('Fabbisogno di PROTEINA GREZZA => %f g' % F[1])
    print('Fabbisogno di PROTEINA DEGRADABILE => %f g' % F[2])
    print('Fabbisogno di PROTEINA INDEGRADABILE => %f g' % F[3])
    print('Fabbisogno di FIBRA GREZZA => %f g' % F[4])
    print('Fabbisogno di NDF => %f g' % F[5])
    print('Fabbisogno di ADF => %f g' % F[6]) 
    print('Fabbisogno di GRASSO => %f g' % F[7])
    print('Fabbisogno di AMIDO => %f g' % F[8])
    print('Fabbisogno di ZUCCHERI => %f g' % F[9])
    print('Fabbisogno di CALCIO => %f g' % F[10])
    print('Fabbisogno di FOSFORO => %f g' % F[11])
    print('Fabbisogno di ENERGIA NETTA => %f Unità Foraggere Latte' % F[12])
    print('')
    


def stampa_fabbisogni_LYS_MET():
    
    F = []
    F.append(DMI)
    F.append(CP)
    F.append(FG)
    F.append(NDF)
    F.append(ADF)
    F.append(FAT)
    F.append(AM)
    F.append(ZUC)
    F.append(Ca_tot)
    F.append(P_tot)
    F.append(UFL_tot)
    F.append(PDI)
 
    print('FABBISOGNI calcolati secondo il METODO <INRA %s>' % metodo)
    print('')
    print('')
    print('CAPACITÀ DI INGESTIONE => %f kg di Sostanza Secca' % F[0])
    print('Fabbisogno di PROTEINA GREZZA => %f g' % F[1])
    print('Fabbisogno di FIBRA GREZZA => %f g' % F[2])
    print('Fabbisogno di NDF => %f g' % F[3])
    print('Fabbisogno di ADF => %f g' % F[4]) 
    print('Fabbisogno di GRASSO => %f g' % F[5])
    print('Fabbisogno di AMIDO => %f g' % F[6])
    print('Fabbisogno di ZUCCHERI => %f g' % F[7])
    print('Fabbisogno di CALCIO => %f g' % F[8])
    print('Fabbisogno di FOSFORO => %f g' % F[9])
    print('Fabbisogno di ENERGIA NETTA => %f Unità Foraggere Latte' % F[10])
    print('Fabbisogno di PROTEINA DIGERIBILE INTESTINALE => %f g' % F[11])
    print('')
    


def stampa_fabbisogni():
    
    if metodo == '_CNCPS_':
        stampa_fabbisogni_CNCPS()
    elif metodo == 'LYS_MET':
        stampa_fabbisogni_LYS_MET()
    
    else:
        print('Nessun METODO DI CALCOLO della razione è stato trovato nella CARTELLA <%s>!' % cartella)
        print('')
        print('Per favore scegline uno')
        print('')
        print('')
        print('')
        print('')
        print('')
        print('')
        print('')
        print('')
        print('')
        print('')
        print('')
        


def stampa_prezzi_teseo():
    import ssl, urllib.request
    import pandas as pd				
    from html_table_parser.parser import HTMLTableParser		
    from datetime import datetime, timedelta
    from contextlib import redirect_stdout
    
    ssl._create_default_https_context = ssl._create_unverified_context					
    data_aggiornamento_teseo = datetime.today().strftime('%d.%m.%Y')

    def url_get_contents(url):					

        req = urllib.request.Request(url=url)			
        f = urllib.request.urlopen(req)
        return f.read()						

    xhtml = url_get_contents('https://teseo.clal.it').decode('utf-8')
    p = HTMLTableParser()						
    p.feed(xhtml)										
    teseo = pd.DataFrame(p.tables[58])

# print('FONTE: https://teseo.clal.it/')

    with open('listino_prezzi_teseo.txt', 'w', encoding = "utf-8") as f:
        with redirect_stdout(f):
            print(teseo)
        
    with open('listino_prezzi_teseo.txt', 'r') as file:
        filedata = file.read()

    filedata = filedata.replace("In calo", "=> ")
    filedata = filedata.replace("In aumento", "=> ")
    filedata = filedata.replace("Prezzo", "prezzo")
    filedata = filedata.replace("frumento", "Frumento")
    filedata = filedata.replace(" /ton ", "EURO/ton; VARIAZIONE: ")

    print('Prezzi aggiornati al %s (https://teseo.clal.it/?section=conf_CEREALI)' % data_aggiornamento_teseo)
    print(filedata)
    

def apri_razione():
    file_razione = input()
    if Path("%s.txt" % file_razione).exists():
        os.system('gedit %s.txt' % file_razione)
    else:
        print('Nessuna RAZIONE è stata trovata nella CARTELLA <%s>!' % cartella)
        print('Sicuro di averne già creata una?')


###############################################################################################################################
###############################################################################################################################


def barplot():

    import re
    from reportlab.lib.pagesizes import letter
    from reportlab.pdfgen import canvas

    print('Inserisci il nome del file in cui vuoi salvare il BARPLOT')
    nome_file_barplot = input()
    print("Il barplot verrà salvato nel file <BARPLOT_PyR_%s.png>" % nome_file_barplot)
     
#   print('Inserisci il nome del PDF in cui vuoi salvare il BARPLOT')
#   nome_barplot_pdf = input()
    print("Il BARPLOT verrà salvato nel file <BARPLOT_PyR_%s.txt>" % nome_file_barplot)
    
#   print('Inserisci il nome del file in cui hai salvato i FABBISOGNI')
#   nome_file_fabbisogni = input()
    print("FABBISOGNI letti dal file <FABBISOGNI_PyR_%s.txt> con successo!" % nome_file_barplot)
    
#   print('Inserisci il nome del file in cui hai salvato gli APPORTI')
#   nome_file_apporti = input()
    print("APPORTI letti dal file <APPORTI_PyR_%s.txt con successo!>" % nome_file_barplot)
    
    try:
        if metodo == '_CNCPS_':

            F = re.findall(r"[+-]?\d+(?:\.\d+)?", open('FABBISOGNI_PyR_%s.txt' % nome_file_barplot).read())
            
            for i in range(len(F)):
                F[i] = float(F[i])
    
            F_SS = F[0]
            F_UFL = F[12]
            for i in range(len(F)):
                F[i] = F[i]/1000
    
            F[0] = F_SS
            F[12] = F_UFL

            for i in range(len(F)):
                F[i] = round(F[i], 2)

            A = re.findall(r"[+-]?\d+(?:\.\d+)?", open('APPORTI_PyR_%s.txt' % nome_file_barplot).read())
            print(A)

            for i in range(len(A)):
                A[i] = float(A[i])

            A_SS = A[0]
            A_UFL = A[12]
            for i in range(len(A)):
                A[i] = A[i]/1000
   
            A[0] = A_SS
            A[12] = A_UFL

            for i in range(len(A)):
                A[i] = round(A[i], 2)

            labels = ['DM', 'CP', 'RDP', 'RUP', 'FG', 'NDF', 'ADF', 'FAT', 'AM', 'ZUC', 'Ca', 'P', 'UFL']
	
            x = np.arange(len(labels))

            width = 0.35
            fig, ax = plt.subplots()
            rects1 = ax.bar(x - width/2, F, width, label='Fabbisogni')
            rects2 = ax.bar(x + width/2, A, width, label='Apporti')

            ax.set_ylabel('kg (o UFL)')
            ax.set_title('FABBISOGNI vs APPORTI')
            ax.set_xticks(x, labels)
            ax.legend()
            ax.bar_label(rects1, padding=3)
            ax.bar_label(rects2, padding=3)
            fig.tight_layout()
            plt.savefig('BARPLOT_PyR_%s.png' % nome_file_barplot, dpi=400)
            plt.show()

        
        else:
            F = re.findall(r"[+-]?\d+(?:\.\d+)?", open('FABBISOGNI_PyR_%s.txt' % nome_file_barplot).read())
            
            for i in range(len(F)):
                F[i] = float(F[i])
    
            F_SS = F[0]
            F_UFL = F[10]
            for i in range(len(F)):
                F[i] = F[i]/1000
    
            F[0] = F_SS
            F[10] = F_UFL

            for i in range(len(F)):
                F[i] = round(F[i], 2)

            A = re.findall(r"[+-]?\d+(?:\.\d+)?", open('APPORTI_PyR_%s.txt' % nome_file_barplot).read())
            print(A)

            for i in range(len(A)):
                A[i] = float(A[i])

            A_SS = A[0]
            A_UFL = A[10]
            for i in range(len(A)):
                A[i] = A[i]/1000
   
            A[0] = A_SS
            A[10] = A_UFL

            for i in range(len(A)):
                A[i] = round(A[i], 2)

            labels = ['DM', 'CP', 'FG', 'NDF', 'ADF', 'FAT', 'AM', 'ZUC', 'Ca', 'P', 'UFL', 'PDI']
	
            x = np.arange(len(labels))

            width = 0.35
            fig, ax = plt.subplots()
            rects1 = ax.bar(x - width/2, F, width, label='Fabbisogni')
            rects2 = ax.bar(x + width/2, A, width, label='Apporti')

            ax.set_ylabel('kg (o UFL)')
            ax.set_title('FABBISOGNI vs APPORTI')
            ax.set_xticks(x, labels)
            ax.legend()
            ax.bar_label(rects1, padding=3)
            ax.bar_label(rects2, padding=3)
            fig.tight_layout()
            plt.savefig('BARPLOT_PyR_%s.png' % nome_file_barplot, dpi=400)

# https://github.com/driscollis/reportlabbookcode/blob/master/chapter1_canvas/image_on_canvas.py

        def add_image(image_path):
            my_canvas = canvas.Canvas("REPORT_PyR_%s.pdf" % nome_file_barplot, pagesize=letter)
            my_canvas.drawImage(image_path, 30, 300, width=520, height=300)
            my_canvas.save()
            os.system('evince REPORT_PyR_%s.pdf' % nome_file_barplot)

        if __name__ == '__main__':
            image_path = '/Users/%s/PYTHON/BARPLOT_PyR_%s.png' % (user, nome_file_barplot)
            add_image(image_path)

            plt.show()

    except NameError:
        print('METODO DI CALCOLO non trovato! Devi prima sceglierne (o importarne) uno') 


###############################################################################################################################
###############################################################################################################################


def chiedi_nome_file_razione():
    file_razione = input()
    os.system('gedit RAZIONE_PyR_%s' % file_razione)


###############################################################################################################################
###############################################################################################################################




def quit():
    chiedi_conferma = askstring('Entry', 'Vuoi uscire dal programma? <y>: sì, <n>: no!')
    if chiedi_conferma == 'y':
        Tk.quit(root)
    else:
        print('Operazione annullata con SUCCESSO!')


###############################################################################################################################
###############################################################################################################################



### FUNZIONI APPORTI MANUALI ###


                                     ### FORAGGI quantità ###

def apporto_insilato_mais():
    global M, Q, app_FOR_man, app_FIEME2TA, Q_FIELO, Q_FIEPRASTA1TA, Q_FIEPRASTA2TA, Q_FIESIME, Q_FIEME1TA, Q_FIEME2TA, Q_INSILO, Q_INSIMA, Q_PASTOMAISINT, Q_PASTOMAISGRA, FIEME2TA_arr, F, F_arr_FORAGGIo, F_arr_ric, Q_PDIE, Q_PDIN, Q_LysDI, Q_MetDI, costo_FORAGGIO_quantità, prezzo_FORAGGIO_quantità, metodo, ARRAYS, ITEMS, LISINA, METIONINA, PDIE, PDIN
    try:    
        from crea_db_PREZZI_Alessandria_L import prezzo_MAIS_INSILATO
    except ImportError:
        print('Non ho trovato il LISTINO PREZZI <BORSA MERCI di Alessandria> nella CARTELLA <%s>!' % cartella)
        print('')
        print("Devi prima crearlo, selezionando l'opzione <Crea il listino della Borsa di Alessandria> nel menù <Prezzi>")        
#   try:
    prezzo_FORAGGIO_quantità = prezzo_MAIS_INSILATO
    M = 'SILOMAIS'
    ITEMS.append(M)
    PREZZI.append(prezzo_FORAGGIO_quantità) 
    Q_INSIMA = askfloat('Entry', 'Inserisci la quantità di <%s> (in kg)' % M)
    Q = Q_INSIMA
    if type(prezzo_FORAGGIO_quantità) is float:         
        costo_MAIS_INSILATO = Q * prezzo_FORAGGIO_quantità / 1000
        costo_FORAGGIO_quantità = costo_MAIS_INSILATO
    else:
        print("Prezzo dell'alimento <%s> => NON DISPONIBILE" % M)    
    if metodo == '_CNCPS_':   
        from importa_MySQLdb_insilato_mais import INSIMA_arr
    else:
        from importa_MySQLdb_insilato_mais_LYS_MET import INSIMA_arr, PDIE_INSIMA, LysDI_INSIMA, MetDI_INSIMA
        Q_PDIE = Q * PDIE_INSIMA
        Q_PDIN = Q * INSIMA_arr[11]
        Q_LysDI = Q * LysDI_INSIMA
        Q_MetDI = Q * MetDI_INSIMA       
        LISINA.append(LysDI_INSIMA)
        METIONINA.append(MetDI_INSIMA)
        PDIE.append(PDIE_INSIMA)
        PDIN.append(INSIMA_arr[11]) 
    ARRAYS.append(INSIMA_arr)
    app_INSIMA = Q_INSIMA * INSIMA_arr
    app_FOR_man = app_INSIMA
    F_arr = np.array(F)
    F_arr_ric = F_arr - app_INSIMA
    F_arr_FORAGGIo = F_arr - app_FOR_man      
    print('Hai inserito %f kg di <%s>' % (Q, M))
    print("Prezzo dell'alimento <%s> => %f EURO/ton" % (M, prezzo_FORAGGIO_quantità))
#   except NameError:
#       print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
#       print('')
#       print('Hai a disposizione i seguenti metodi:')
#       print('')
#       print('1) <cornell _CNCPS_>')
#       print('')
#       print('2) <INRA LYS_MET>')
#       print('')
#       print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def apporto_pastone_mais_granella():
    global M, Q, app_FOR_man, app_FIEME2TA, Q_FIELO, Q_FIEPRASTA1TA, Q_FIEPRASTA2TA, Q_FIESIME, Q_FIEME1TA, Q_FIEME2TA, Q_INSILO, Q_INSIMA, Q_PASTOMAISINT, Q_PASTOMAISGRA, FIEME2TA_arr, F, F_arr_FORAGGIo, F_arr_ric, Q_PDIE, Q_PDIN, Q_LysDI, Q_MetDI, costo_FORAGGIO_quantità, prezzo_FORAGGIO_quantità, metodo, ARRAYS, ITEMS
    try:    
        from crea_db_PREZZI_clal_L import prezzo_MAIS_PASTONE_INTEGRALE_COSTO_PR
    except ImportError:
        print('Non ho trovato il LISTINO PREZZI <CLAL> nella CARTELLA <%s>!' % cartella)
        print('')
        print("Devi prima crearlo, selezionando l'opzione <Crea il listino <CLAL>> nel menù <Prezzi>") 
#   try:     
    prezzo_FORAGGIO_quantità = prezzo_MAIS_PASTONE_INTEGRALE_COSTO_PR
    M = 'MAIS PAST. GRAN.'
    ITEMS.append(M)
    PREZZI.append(prezzo_FORAGGIO_quantità) 
    Q_PASTOMAISGRA = askfloat('Entry', 'Inserisci la quantità di <%s> (in kg)' % M)
    Q = Q_PASTOMAISGRA
    if type(prezzo_FORAGGIO_quantità) is float:          
        costo_MAIS_PASTONE_GRANELLA = Q * prezzo_FORAGGIO_quantità / 1000
        costo_FORAGGIO_quantità = costo_MAIS_PASTONE_GRANELLA
        print("Prezzo del PASTONE DI MAIS INTEGRALE => %f EURO/ton" % prezzo_MAIS_PASTONE_INTEGRALE_COSTO_PR)
    else:
        print("Prezzo del PASTONE DI MAIS INTEGRALE => NON DISPONIBILE")   
    if metodo == '_CNCPS_':
        from importa_MySQLdb_pastone_mais_granella import PASTOMAISGRA_arr
        app_PASTOMAISINT = Q_PASTOMAISGRA * PASTOMAISGRA_arr
        app_FOR_man = app_PASTOMAISINT 
        F_arr = np.array(F)
        F_arr_ric = F_arr - app_PASTOMAISINT
        F_arr_FORAGGIo = F_arr - app_FOR_man     
        print('Hai inserito %f kg di <%s>' % (Q, M))
    else:
        print("Alimento <%s> non disponibile con il METODO <%s>" % (M, metodo))
    ARRAYS.append(PASTOMAISGRA_arr)
#   except NameError:
#       print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
#       print('')
#       print('Hai a disposizione i seguenti metodi:')
#       print('')
#       print('1) <cornell _CNCPS_>')
#       print('')
#       print('2) <INRA LYS_MET>')
#       print('')
#       print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def apporto_pastone_mais_integrale():
    global M, Q, app_FOR_man, app_FIEME2TA, Q_FIELO, Q_FIEPRASTA1TA, Q_FIEPRASTA2TA, Q_FIESIME, Q_FIEME1TA, Q_FIEME2TA, Q_INSILO, Q_INSIMA, Q_PASTOMAISINT, Q_PASTOMAISGRA, FIEME2TA_arr, F, F_arr_FORAGGIo, F_arr_ric, Q_PDIE, Q_PDIN, Q_LysDI, Q_MetDI, costo_FORAGGIO_quantità, prezzo_FORAGGIO_quantità, metodo, ARRAYS, ITEMS
    try:    
        from crea_db_PREZZI_clal_L import prezzo_MAIS_PASTONE_INTEGRALE_COSTO_PR
    except ImportError:
        print('Non ho trovato il LISTINO PREZZI <CLAL> nella CARTELLA <%s>!' % cartella)
        print('')
        print("Devi prima crearlo, selezionando l'opzione <Crea il listino <CLAL>> nel menù <Prezzi>") 
#   try:  
    prezzo_FORAGGIO_quantità = prezzo_MAIS_PASTONE_INTEGRALE_COSTO_PR
    M = 'MAIS PAST. INT.'
    ITEMS.append(M)
    PREZZI.append(prezzo_FORAGGIO_quantità)
    Q_PASTOMAISINT = askfloat('Entry', 'Inserisci la quantità di <%s> (in kg)' % M)
    Q = Q_PASTOMAISINT    
    if type(prezzo_FORAGGIO_quantità) is float:          
        costo_MAIS_PASTONE_INTEGRALE = Q * prezzo_FORAGGIO_quantità / 1000
        costo_FORAGGIO_quantità = costo_MAIS_PASTONE_INTEGRALE
        print("Prezzo del PASTONE DI MAIS INTEGRALE => %f EURO/ton" % prezzo_MAIS_PASTONE_INTEGRALE_COSTO_PR)
    else:
        print("Prezzo del PASTONE DI MAIS INTEGRALE => NON DISPONIBILE")      
    if metodo == '_CNCPS_':
        from importa_MySQLdb_pastone_mais_integrale import PASTOMAISINT_arr
        app_PASTOMAISINT = Q_PASTOMAISINT * PASTOMAISINT_arr
        app_FOR_man = app_PASTOMAISINT 
        F_arr = np.array(F)
        F_arr_ric = F_arr - app_PASTOMAISINT
        F_arr_FORAGGIo = F_arr - app_FOR_man     
        print('Hai inserito %f kg di <%s>' % (Q, M))
    else:
        print("Alimento <%s> non disponibile con il METODO <%s>" % (M, metodo))
    ARRAYS.append(PASTOMAISINT_arr)
#   except NameError:
#       print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
#       print('')
#       print('Hai a disposizione i seguenti metodi:')
#       print('')
#       print('1) <cornell _CNCPS_>')
#       print('')
#       print('2) <INRA LYS_MET>')
#       print('')
#       print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def apporto_insilato_loietto():
    global M, Q, app_FOR_man, app_FIEME2TA, Q_FIELO, Q_FIEPRASTA1TA, Q_FIEPRASTA2TA, Q_FIESIME, Q_FIEME1TA, Q_FIEME2TA, Q_INSILO, Q_INSIMA, Q_PASTOMAISINT, Q_PASTOMAISGRA, FIEME2TA_arr, F, F_arr_FORAGGIo, F_arr_ric, Q_PDIE, Q_PDIN, Q_LysDI, Q_MetDI, costo_FORAGGIO_quantità, prezzo_FORAGGIO_quantità, metodo, ARRAYS, ITEMS, LISINA, METIONINA, PDIE, PDIN
    try:    
        from crea_db_PREZZI_Alessandria_L import prezzo_LOIETTO_INSILATO
    except ImportError:
        print('Non ho trovato il LISTINO PREZZI <BORSA MERCI di Alessandria> nella CARTELLA <%s>!' % cartella)
        print('')
        print("Devi prima crearlo, selezionando l'opzione <Crea il listino della Borsa di Alessandria> nel menù <Prezzi>")   
#   try:
    prezzo_FORAGGIO_quantità = prezzo_LOIETTO_INSILATO
    M = 'SILOIETTO'
    ITEMS.append(M)
    PREZZI.append(prezzo_FORAGGIO_quantità) 
    Q_INSILO = askfloat('Entry', 'Inserisci la quantità di <%s> (in kg)' % M)
    Q = Q_INSILO
    if type(prezzo_FORAGGIO_quantità) is float:         
        costo_LOIETTO_INSILATO = Q * prezzo_FORAGGIO_quantità / 1000
        costo_FORAGGIO_quantità = costo_LOIETTO_INSILATO
    else:
        print("Prezzo dell'alimento <%s> => NON DISPONIBILE" % M)    
    if metodo == '_CNCPS_':   
        from importa_MySQLdb_insilato_loietto import INSILO_arr
    else:
        from importa_MySQLdb_insilato_loietto_LYS_MET import INSILO_arr, PDIE_INSILO, LysDI_INSILO, MetDI_INSILO
        Q_PDIE = Q * PDIE_INSILO
        Q_PDIN = Q * INSILO_arr[11]
        Q_LysDI = Q * LysDI_INSILO
        Q_MetDI = Q * MetDI_INSILO    
        LISINA.append(LysDI_INSILO)
        METIONINA.append(MetDI_INSILO)
        PDIE.append(PDIE_INSILO)
        PDIN.append(INSILO_arr[11])
    ARRAYS.append(INSILO_arr)
    app_INSILO = Q_INSILO * INSILO_arr
    app_FOR_man = app_INSILO
    F_arr = np.array(F)
    F_arr_ric = F_arr - app_INSILO
    F_arr_FORAGGIo = F_arr - app_FOR_man      
    print('Hai inserito %f kg di <%s>' % (Q, M))
    print("Prezzo dell'alimento <%s> => %f EURO/ton" % (M, prezzo_FORAGGIO_quantità))
#   except NameError:
#       print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
#       print('')
#       print('Hai a disposizione i seguenti metodi:')
#       print('')
#       print('1) <cornell _CNCPS_>')
#       print('')
#       print('2) <INRA LYS_MET>')
#       print('')
#       print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def apporto_fieno_loietto():
    global M, Q, app_FOR_man, app_FIEME2TA, Q_FIELO, Q_FIEPRASTA1TA, Q_FIEPRASTA2TA, Q_FIESIME, Q_FIEME1TA, Q_FIEME2TA, Q_INSILO, Q_INSIMA, Q_PASTOMAISINT, Q_PASTOMAISGRA, FIEME2TA_arr, F, F_arr_FORAGGIo, F_arr_ric, Q_PDIE, Q_PDIN, Q_LysDI, Q_MetDI, costo_FORAGGIO_quantità, prezzo_FORAGGIO_quantità, metodo, ARRAYS, ITEMS, LISINA, METIONINA, PDIE, PDIN
    try:    
        from crea_db_PREZZI_Milano_L import prezzo_FIENO_MAGGENGO
    except ImportError:
        print('Non ho trovato il LISTINO PREZZI <BORSA MERCI di Milano> nella CARTELLA <%s>!' % cartella)
        print('')
        print("Devi prima crearlo, selezionando l'opzione <Crea il listino della Borsa di Milano> nel menù <Prezzi>")        
#   try:
    prezzo_FORAGGIO_quantità = prezzo_FIENO_MAGGENGO
    M = 'FIENO LOIET.'
    ITEMS.append(M)
    PREZZI.append(prezzo_FORAGGIO_quantità)   
    Q_FIELO = askfloat('Entry', 'Inserisci la quantità di <%s> (in kg)' % M)
    Q = Q_FIELO
    if type(prezzo_FORAGGIO_quantità) is float:         
        costo_FIENO_MAGGENGO = Q * prezzo_FORAGGIO_quantità / 1000
        costo_FORAGGIO_quantità = costo_FIENO_MAGGENGO
    else:
        print("Prezzo dell'alimento <%s> => NON DISPONIBILE" % M)    
    if metodo == '_CNCPS_':   
        from importa_MySQLdb_fieno_loietto import FIELO_arr
    else:
        from importa_MySQLdb_fieno_loietto_LYS_MET import FIELO_arr, PDIE_FIELO, LysDI_FIELO, MetDI_FIELO
        Q_PDIE = Q * PDIE_FIELO
        Q_PDIN = Q * FIELO_arr[11]
        Q_LysDI = Q * LysDI_FIELO
        Q_MetDI = Q * MetDI_FIELO    
        LISINA.append(LysDI_FIELO)
        METIONINA.append(MetDI_FIELO)
        PDIE.append(PDIE_FIELO)
        PDIN.append(FIELO_arr[11])
    ARRAYS.append(FIELO_arr)
    app_FIELO = Q_FIELO * FIELO_arr
    app_FOR_man = app_FIELO
    F_arr = np.array(F)
    F_arr_ric = F_arr - app_FIELO
    F_arr_FORAGGIo = F_arr - app_FOR_man      
    print('Hai inserito %f kg di <%s>' % (Q, M))
    print("Prezzo dell'alimento <%s> => %f EURO/ton" % (M, prezzo_FORAGGIO_quantità))
#   except NameError:
#       print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
#       print('')
#       print('Hai a disposizione i seguenti metodi:')
#       print('')
#       print('1) <cornell _CNCPS_>')
#       print('')
#       print('2) <INRA LYS_MET>')
#       print('')
#       print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def apporto_fieno_silos_medica():
    global M, Q, app_FOR_man, app_FIEME2TA, Q_FIELO, Q_FIEPRASTA1TA, Q_FIEPRASTA2TA, Q_FIESIME, Q_FIEME1TA, Q_FIEME2TA, Q_INSILO, Q_INSIMA, Q_PASTOMAISINT, Q_PASTOMAISGRA, FIEME2TA_arr, F, F_arr_FORAGGIo, F_arr_ric, Q_PDIE, Q_PDIN, Q_LysDI, Q_MetDI, costo_FORAGGIO_quantità, prezzo_FORAGGIO_quantità, metodo, ARRAYS, ITEMS
    prezzo_FIENO_SILOS_MEDICA = 50.0      
#   try:     
    prezzo_FORAGGIO_quantità = prezzo_FIENO_SILOS_MEDICA
    M = 'FIENOSILOMED'
    ITEMS.append(M)
    PREZZI.append(prezzo_FORAGGIO_quantità)
    Q_FIESIME = askfloat('Entry', 'Inserisci la quantità di <%s> (in kg)' % M)
    Q = Q_FIESIME
    if type(prezzo_FORAGGIO_quantità) is float:          
        costo_FIENO_SILOS_MEDICA = Q * prezzo_FORAGGIO_quantità / 1000
        costo_FORAGGIO_quantità = costo_FIENO_SILOS_MEDICA
        print("Prezzo del PASTONE DI MAIS INTEGRALE => %f EURO/ton" % prezzo_FIENO_SILOS_MEDICA)
    else:
        print("Prezzo del PASTONE DI MAIS INTEGRALE => NON DISPONIBILE")   
    if metodo == '_CNCPS_':
        from importa_MySQLdb_fieno_silos_medica import FIESIME_arr
        ARRAYS.append(FIESIME_arr)
        app_FIESIME = Q_FIESIME * FIESIME_arr
        app_FOR_man = app_FIESIME 
        F_arr = np.array(F)
        F_arr_ric = F_arr - app_FIESIME
        F_arr_FORAGGIo = F_arr - app_FOR_man     
        print('Hai inserito %f kg di <%s>' % (Q, M))
    else:
        print("Alimento <%s> non disponibile con il METODO <%s>" % (M, metodo))
#   except NameError:
#       print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
#       print('')
#       print('Hai a disposizione i seguenti metodi:')
#       print('')
#       print('1) <cornell _CNCPS_>')
#       print('')
#       print('2) <INRA LYS_MET>')
#       print('')
#       print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def apporto_fieno_medica_I_taglio():
    global M, Q, app_FOR_man, app_FIEME2TA, Q_FIELO, Q_FIEPRASTA1TA, Q_FIEPRASTA2TA, Q_FIESIME, Q_FIEME1TA, Q_FIEME2TA, Q_INSILO, Q_INSIMA, Q_PASTOMAISINT, Q_PASTOMAISGRA, FIEME2TA_arr, F, F_arr_FORAGGIo, F_arr_ric, Q_PDIE, Q_PDIN, Q_LysDI, Q_MetDI, costo_FORAGGIO_quantità, prezzo_FORAGGIO_quantità, metodo, ARRAYS, ITEMS, LISINA, METIONINA, PDIE, PDIN
    try:    
        from crea_db_PREZZI_Bologna_L import prezzo_FIENO_MEDICA_17_1_TAGLIO_ROTBAL_B
    except ImportError:
        print('Non ho trovato il LISTINO PREZZI <BORSA MERCI di Bologna> nella CARTELLA <%s>!' % cartella)
        print('')
        print("Devi prima crearlo, selezionando l'opzione <Crea il listino della Borsa di Bologna> nel menù <Prezzi>")        
#   try:
    prezzo_FORAGGIO_quantità = prezzo_FIENO_MEDICA_17_1_TAGLIO_ROTBAL_B
    M = 'FIENO MED. I'
    ITEMS.append(M)
    PREZZI.append(prezzo_FORAGGIO_quantità)  
    Q_FIEME1TA = askfloat('Entry', 'Inserisci la quantità di <%s> (in kg)' % M)
    Q = Q_FIEME1TA
    if type(prezzo_FORAGGIO_quantità) is float:         
        costo_FIENO_MEDICA_17_1_TAGLIO_ROTBAL_B = Q * prezzo_FORAGGIO_quantità / 1000
        costo_FORAGGIO_quantità = costo_FIENO_MEDICA_17_1_TAGLIO_ROTBAL_B
    else:
        print("Prezzo dell'alimento <%s> => NON DISPONIBILE" % M)    
    if metodo == '_CNCPS_':   
        from importa_MySQLdb_fieno_medica_I_taglio import FIEME1TA_arr
    else:
        from importa_MySQLdb_fieno_medica_I_taglio_LYS_MET import FIEME1TA_arr, PDIE_FIEME1TA, LysDI_FIEME1TA, MetDI_FIEME1TA
        Q_PDIE = Q * PDIE_FIEME1TA
        Q_PDIN = Q * FIEME1TA_arr[11]
        Q_LysDI = Q * LysDI_FIEME1TA
        Q_MetDI = Q * MetDI_FIEME1TA    
        LISINA.append(LysDI_FIEME1TA)
        METIONINA.append(MetDI_FIEME1TA)        
        PDIE.append(PDIE_FIEME1TA)
        PDIN.append(FIEME1TA_arr[11])
    ARRAYS.append(FIEME1TA_arr)
    app_FIEME1TA = Q_FIEME1TA * FIEME1TA_arr
    app_FOR_man = app_FIEME1TA
    F_arr = np.array(F)
    F_arr_ric = F_arr - app_FIEME1TA
    F_arr_FORAGGIo = F_arr - app_FOR_man      
    print('Hai inserito %f kg di <%s>' % (Q, M))
    print("Prezzo dell'alimento <%s> => %f EURO/ton" % (M, prezzo_FORAGGIO_quantità))
#   except NameError:
#       print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
#       print('')
#       print('Hai a disposizione i seguenti metodi:')
#       print('')
#       print('1) <cornell _CNCPS_>')
#       print('')
#       print('2) <INRA LYS_MET>')
#       print('')
#       print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def apporto_fieno_medica_II_taglio():
    global M, Q, app_FOR_man, app_FIEME2TA, Q_FIELO, Q_FIEPRASTA1TA, Q_FIEPRASTA2TA, Q_FIESIME, Q_FIEME1TA, Q_FIEME2TA, Q_INSILO, Q_INSIMA, Q_PASTOMAISINT, Q_PASTOMAISGRA, FIEME2TA_arr, F, F_arr_FORAGGIo, F_arr_ric, Q_PDIE, Q_PDIN, Q_LysDI, Q_MetDI, costo_FORAGGIO_quantità, prezzo_FORAGGIO_quantità, metodo, ARRAYS, ITEMS, LISINA, METIONINA, PDIE, PDIN
    try:    
        from crea_db_PREZZI_Bologna_L import prezzo_FIENO_MEDICA_17_2_TAGLIO_ROTBAL_B
    except ImportError:
        print('Non ho trovato il LISTINO PREZZI <BORSA MERCI di Bologna> nella CARTELLA <%s>!' % cartella)
        print('')
        print("Devi prima crearlo, selezionando l'opzione <Crea il listino della Borsa di Bologna> nel menù <Prezzi>")           
#   try:
    prezzo_FORAGGIO_quantità = prezzo_FIENO_MEDICA_17_2_TAGLIO_ROTBAL_B
    M = 'FIENO MED. II'
    ITEMS.append(M)
    PREZZI.append(prezzo_FORAGGIO_quantità)  
    Q_FIEME2TA = askfloat('Entry', 'Inserisci la quantità di <%s> (in kg)' % M)
    Q = Q_FIEME2TA
    if type(prezzo_FORAGGIO_quantità) is float:         
        costo_FIENO_MEDICA_17_2_TAGLIO_ROTBAL_B = Q * prezzo_FORAGGIO_quantità / 1000
        costo_FORAGGIO_quantità = costo_FIENO_MEDICA_17_2_TAGLIO_ROTBAL_B
    else:
        print("Prezzo dell'alimento <%s> => NON DISPONIBILE" % M)    
    if metodo == '_CNCPS_':   
        from importa_MySQLdb_fieno_medica_II_taglio import FIEME2TA_arr
    else:
        from importa_MySQLdb_fieno_medica_II_taglio_LYS_MET import FIEME2TA_arr, PDIE_FIEME2TA, LysDI_FIEME2TA, MetDI_FIEME2TA
        Q_PDIE = Q * PDIE_FIEME2TA
        Q_PDIN = Q * FIEME2TA_arr[11]
        Q_LysDI = Q * LysDI_FIEME2TA
        Q_MetDI = Q * MetDI_FIEME2TA    
        LISINA.append(LysDI_FIEME2TA)
        METIONINA.append(MetDI_FIEME2TA)
        PDIE.append(PDIE_FIEME2TA)
        PDIN.append(FIEME2TA_arr[11]) 
    ARRAYS.append(FIEME2TA_arr)
    app_FIEME2TA = Q_FIEME2TA * FIEME2TA_arr
    app_FOR_man = app_FIEME2TA
    F_arr = np.array(F)
    F_arr_ric = F_arr - app_FIEME2TA
    F_arr_FORAGGIo = F_arr - app_FOR_man      
    print('Hai inserito %f kg di <%s>' % (Q, M))
    print("Prezzo dell'alimento <%s> => %f EURO/ton" % (M, prezzo_FORAGGIO_quantità))
#   except NameError:
#       print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
#       print('')
#       print('Hai a disposizione i seguenti metodi:')
#       print('')
#       print('1) <cornell _CNCPS_>')
#       print('')
#       print('2) <INRA LYS_MET>')
#       print('')
#       print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def apporto_fieno_prato_stabile_I_taglio():
    global M, Q, app_FOR_man, app_FIEME2TA, Q_FIELO, Q_FIEPRASTA1TA, Q_FIEPRASTA2TA, Q_FIESIME, Q_FIEME1TA, Q_FIEME2TA, Q_INSILO, Q_INSIMA, Q_PASTOMAISINT, Q_PASTOMAISGRA, FIEME2TA_arr, F, F_arr_FORAGGIo, F_arr_ric, Q_PDIE, Q_PDIN, Q_LysDI, Q_MetDI, costo_FORAGGIO_quantità, prezzo_FORAGGIO_quantità, metodo, ARRAYS, ITEMS, LISINA, METIONINA, PDIE, PDIN
    try:    
        from crea_db_PREZZI_Milano_L import prezzo_FIENO_MAGGENGO
    except ImportError:
        print('Non ho trovato il LISTINO PREZZI <BORSA MERCI di Milano> nella CARTELLA <%s>!' % cartella)
        print('')
        print("Devi prima crearlo, selezionando l'opzione <Crea il listino della Borsa di Milano> nel menù <Prezzi>")        
#   try:
    prezzo_FORAGGIO_quantità = prezzo_FIENO_MAGGENGO
    M = 'FIEPRASTA I'
    ITEMS.append(M)
    PREZZI.append(prezzo_FORAGGIO_quantità)  
    Q_FIEPRASTA1TA = askfloat('Entry', 'Inserisci la quantità di <%s> (in kg)' % M)
    Q = Q_FIEPRASTA1TA
    if type(prezzo_FORAGGIO_quantità) is float:         
        costo_FIENO_MAGGENGO = Q * prezzo_FORAGGIO_quantità / 1000
        costo_FORAGGIO_quantità = costo_FIENO_MAGGENGO
    else:
        print("Prezzo dell'alimento <%s> => NON DISPONIBILE" % M)    
    if metodo == '_CNCPS_':   
        from importa_MySQLdb_fieno_prato_stabile_I_taglio import FIEPRASTA1TA_arr
    else:
        from importa_MySQLdb_fieno_prato_stabile_I_taglio_LYS_MET import FIEPRASTA1TA_arr, PDIE_FIEPRASTA1TA, LysDI_FIEPRASTA1TA, MetDI_FIEPRASTA1TA
        Q_PDIE = Q * PDIE_FIEPRASTA1TA
        Q_PDIN = Q * FIEPRASTA1TA_arr[11]
        Q_LysDI = Q * LysDI_FIEPRASTA1TA
        Q_MetDI = Q * MetDI_FIEPRASTA1TA    
        LISINA.append(LysDI_FIEPRASTA1TA)
        METIONINA.append(MetDI_FIEPRASTA1TA)
        PDIE.append(PDIE_FIEPRASTA1TA)
        PDIN.append(FIEPRASTA1TA_arr[11])
    ARRAYS.append(FIEPRASTA1TA_arr)
    app_FIEPRASTA1TA = Q_FIEPRASTA1TA * FIEPRASTA1TA_arr
    app_FOR_man = app_FIEPRASTA1TA
    F_arr = np.array(F)
    F_arr_ric = F_arr - app_FIEPRASTA1TA
    F_arr_FORAGGIo = F_arr - app_FOR_man      
    print('Hai inserito %f kg di <%s>' % (Q, M))
    print("Prezzo dell'alimento <%s> => %f EURO/ton" % (M, prezzo_FORAGGIO_quantità))
#   except NameError:
#       print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
#       print('')
#       print('Hai a disposizione i seguenti metodi:')
#       print('')
#       print('1) <cornell _CNCPS_>')
#       print('')
#       print('2) <INRA LYS_MET>')
#       print('')
#       print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def apporto_fieno_prato_stabile_II_taglio():
    global M, Q, app_FOR_man, app_FIEME2TA, Q_FIELO, Q_FIEPRASTA1TA, Q_FIEPRASTA2TA, Q_FIESIME, Q_FIEME1TA, Q_FIEME2TA, Q_INSILO, Q_INSIMA, Q_PASTOMAISINT, Q_PASTOMAISGRA, FIEME2TA_arr, F, F_arr_FORAGGIo, F_arr_ric, Q_PDIE, Q_PDIN, Q_LysDI, Q_MetDI, costo_FORAGGIO_quantità, prezzo_FORAGGIO_quantità, metodo, ARRAYS, ITEMS, LISINA, METIONINA, PDIE, PDIN
    try:    
        from crea_db_PREZZI_Milano_L import prezzo_FIENO_AGOSTANO
    except ImportError:
        print('Non ho trovato il LISTINO PREZZI <BORSA MERCI di Milano> nella CARTELLA <%s>!' % cartella)
        print('')
        print("Devi prima crearlo, selezionando l'opzione <Crea il listino della Borsa di Milano> nel menù <Prezzi>")        
#   try:
    prezzo_FORAGGIO_quantità = prezzo_FIENO_AGOSTANO
    M = 'FIEPRASTA II'
    ITEMS.append(M)
    PREZZI.append(prezzo_FORAGGIO_quantità)   
    Q_FIEPRASTA2TA = askfloat('Entry', 'Inserisci la quantità di <%s> (in kg)' % M)
    Q = Q_FIEPRASTA2TA
    if type(prezzo_FORAGGIO_quantità) is float:         
        costo_FIENO_AGOSTANO = Q * prezzo_FORAGGIO_quantità / 1000
        costo_FORAGGIO_quantità = costo_FIENO_AGOSTANO
    else:
        print("Prezzo dell'alimento <%s> => NON DISPONIBILE" % M)    
    if metodo == '_CNCPS_':   
        from importa_MySQLdb_fieno_prato_stabile_II_taglio import FIEPRASTA2TA_arr
    else:
        from importa_MySQLdb_fieno_prato_stabile_II_taglio_LYS_MET import FIEPRASTA2TA_arr, PDIE_FIEPRASTA2TA, LysDI_FIEPRASTA2TA, MetDI_FIEPRASTA2TA
        Q_PDIE = Q * PDIE_FIEPRASTA2TA
        Q_PDIN = Q * FIEPRASTA2TA_arr[11]
        Q_LysDI = Q * LysDI_FIEPRASTA2TA
        Q_MetDI = Q * MetDI_FIEPRASTA2TA    
        LISINA.append(LysDI_FIEPRASTA2TA)
        METIONINA.append(MetDI_FIEPRASTA2TA)
        PDIE.append(PDIE_FIEPRASTA2TA)
        PDIN.append(FIEPRASTA2TA_arr[11])
    ARRAYS.append(FIEPRASTA2TA_arr)
    app_FIEPRASTA2TA = Q_FIEPRASTA2TA * FIEPRASTA2TA_arr
    app_FOR_man = app_FIEPRASTA2TA
    F_arr = np.array(F)
    F_arr_ric = F_arr - app_FIEPRASTA2TA
    F_arr_FORAGGIo = F_arr - app_FOR_man      
    print('Hai inserito %f kg di <%s>' % (Q, M))
    print("Prezzo dell'alimento <%s> => %f EURO/ton" % (M, prezzo_FORAGGIO_quantità))
#   except NameError:
#       print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
#       print('')
#       print('Hai a disposizione i seguenti metodi:')
#       print('')
#       print('1) <cornell _CNCPS_>')
#       print('')
#       print('2) <INRA LYS_MET>')
#       print('')
#       print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


                           ### CEREALI quantità ###
                               

def apporto_avena():
    global MG, QM, app_CER_man, Q_AV, Q_FRUTE, Q_MAISGRA, Q_ORZO, Q_SORGO, Q_TRIT, MAISGRA_arr, F, F_arr_cereale, F_arr_ric, F_arr_ricalcolato, QM_PDIE, QM_PDIN, QM_LysDI, QM_MetDI, Q_PDIE, Q_PDIN, Q_LysDI, Q_MetDI, costo_CEREALE_quantità, prezzo_CEREALE_quantitàto, QM_PDIE, QM_PDIN, QM_LysDI, QM_MetDI, Q_PDIE, Q_PDIN, Q_LysDI, Q_MetDI, costo_CEREALE_quantità, prezzo_CEREALE_quantità, LISINA, METIONINA, PDIE, PDIN
    try:
        from crea_db_PREZZI_Milano_L import prezzo_AVENA
    except ImportError:
        print('Non ho trovato il LISTINO PREZZI <BORSA MERCI di Milano> nella CARTELLA <%s>!' % cartella)
        print('')
        print("Devi prima crearlo, selezionando l'opzione <Crea il listino della Borsa di Milano> nel menù <Prezzi>")        
#   try:
    prezzo_CEREALE_quantità = prezzo_AVENA
    MG = 'AVENA'
    ITEMS.append(MG)
    PREZZI.append(prezzo_CEREALE_quantità)
    Q_AV = askfloat('Entry', 'Inserisci la quantità di <%s> (MAX 6-7 kg)' % MG)
    QM = Q_AV
    if type(prezzo_CEREALE_quantità) is float:         
        costo_avena = QM * prezzo_CEREALE_quantità / 1000
        costo_CEREALE_quantità = costo_avena
    else:
        print("Prezzo dell'alimento <%s> => NON DISPONIBILE" % MG)
    if metodo == '_CNCPS_':
        from importa_MySQLdb_avena import AV_arr
    else:
        from importa_MySQLdb_avena_LYS_MET import AV_arr, PDIE_AV, LysDI_AV, MetDI_AV      
        QM_PDIE = QM * PDIE_AV
        QM_PDIN = QM * AV_arr[11]
        QM_LysDI = QM * LysDI_AV
        QM_MetDI = QM * MetDI_AV   
        LISINA.append(LysDI_AV)
        METIONINA.append(MetDI_AV)
        PDIE.append(PDIE_AV)
        PDIN.append(AV_arr[11])
    ARRAYS.append(AV_arr)
    prezzo_CEREALE_quantità = prezzo_AVENA 
    app_CER_man = Q_AV * AV_arr 
    F_arr = np.array(F)
    F_arr_cereale = F_arr - app_CER_man
    F_arr_ricalcolato = F_arr_ric - app_CER_man     
    print('Hai inserito %f kg di <%s>' % (QM, MG))
    print("Prezzo dell'alimento <%s> => %s EURO/ton" % (MG, prezzo_CEREALE_quantità))
#   except NameError:
#       print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
#       print('')
#       print('Hai a disposizione i seguenti metodi:')
#       print('')
#       print('1) <cornell _CNCPS_>')
#       print('')
#       print('2) <INRA LYS_MET>')
#       print('')
#       print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def apporto_frumento_tenero():
    global MG, QM, app_CER_man, Q_AV, Q_FRUTE, Q_MAISGRA, Q_ORZO, Q_SORGO, Q_TRIT, MAISGRA_arr, F, F_arr_cereale, F_arr_ric, F_arr_ricalcolato, QM_PDIE, QM_PDIN, QM_LysDI, QM_MetDI, Q_PDIE, Q_PDIN, Q_LysDI, Q_MetDI, costo_CEREALE_quantità, prezzo_CEREALE_quantità
    try:
        from crea_db_PREZZI_Bologna_L import prezzo_FRUMENTO_B
    except ImportError:
        print('Non ho trovato il LISTINO PREZZI <BORSA MERCI di Bologna> nella CARTELLA <%s>!' % cartella)
        print('')
        print("Devi prima crearlo, selezionando l'opzione <Crea il listino della Borsa di Bologna> nel menù <Prezzi>")        
#   try:
    prezzo_CEREALE_quantità = prezzo_FRUMENTO_B
    MG = 'FRU. TENERO'
    ITEMS.append(MG)
    PREZZI.append(prezzo_CEREALE_quantità)  
    Q_FRUTE = askfloat('Entry', 'Inserisci la quantità di <%s> (MAX 6-7 kg)' % MG)
    QM = Q_FRUTE
    if type(prezzo_CEREALE_quantità) is float:         
        costo_frumento_tenero = QM * prezzo_CEREALE_quantità / 1000
        costo_CEREALE_quantità = costo_frumento_tenero
    else:
        print("Prezzo dell'alimento <%s> => NON DISPONIBILE" % MG)
    if metodo == '_CNCPS_':
        from importa_MySQLdb_frumento_tenero import FRUTE_arr
    else:
        print('Alimento non disponibile con il metodo <%s>' % metodo)   
    ARRAYS.append(FRUTE_arr)
    prezzo_CEREALE_quantità = prezzo_FRUMENTO_B 
    app_CER_man = Q_FRUTE * AV_arr 
    F_arr = np.array(F)
    F_arr_cereale = F_arr - app_CER_man
    F_arr_ricalcolato = F_arr_ric - app_CER_man     
#   except NameError:
#       print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
#       print('')
#       print('Hai a disposizione i seguenti metodi:')
#       print('')
#       print('1) <cornell _CNCPS_>')
#       print('')
#       print('2) <INRA LYS_MET>')
#       print('')
#       print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def apporto_mais_granella():
    global MG, QM, app_CER_man, Q_AV, Q_FRUTE, Q_MAISGRA, Q_ORZO, Q_SORGO, Q_TRIT, MAISGRA_arr, F, F_arr_cereale, F_arr_ric, F_arr_ricalcolato, QM_PDIE, QM_PDIN, QM_LysDI, QM_MetDI, Q_PDIE, Q_PDIN, Q_LysDI, Q_MetDI, costo_CEREALE_quantità, prezzo_CEREALE_quantità, LISINA, METIONINA, PDIE, PDIN
    try:
        from crea_db_PREZZI_Milano_L import prezzo_MAIS
    except ImportError:
        print('Non ho trovato il LISTINO PREZZI <BORSA MERCI di Milano> nella CARTELLA <%s>!' % cartella)
        print('')
        print("Devi prima crearlo, selezionando l'opzione <Crea il listino della Borsa di Milano> nel menù <Prezzi>")        
#   try:
    prezzo_CEREALE_quantità = prezzo_MAIS
    MG = 'MAIS'
    ITEMS.append(MG)
    PREZZI.append(prezzo_CEREALE_quantità) 
    Q_MAISGRA = askfloat('Entry', 'Inserisci la quantità di <%s> (MAX 6-7 kg)' % MG)
    QM = Q_MAISGRA
    if type(prezzo_CEREALE_quantità) is float:         
        costo_MAIS_GRANELLA = QM * prezzo_CEREALE_quantità / 1000
        costo_CEREALE_quantità = costo_MAIS_GRANELLA
    else:
        print("Prezzo dell'alimento <%s> => NON DISPONIBILE" % MG)
    if metodo == '_CNCPS_':
        from importa_MySQLdb_mais_granella import MAISGRA_arr
    else:
        from importa_MySQLdb_mais_granella_LYS_MET import MAISGRA_arr, PDIE_MAISGRA, LysDI_MAISGRA, MetDI_MAISGRA      
        QM_PDIE = QM * PDIE_MAISGRA
        QM_PDIN = QM * MAISGRA_arr[11]
        QM_LysDI = QM * LysDI_MAISGRA
        QM_MetDI = QM * MetDI_MAISGRA   
        LISINA.append(LysDI_MAISGRA)
        METIONINA.append(MetDI_MAISGRA)
        PDIE.append(PDIE_MAISGRA)
        PDIN.append(MAISGRA_arr[11])
    ARRAYS.append(MAISGRA_arr)
    prezzo_CEREALE_quantità = prezzo_MAIS 
    app_CER_man = Q_MAISGRA * MAISGRA_arr 
    F_arr = np.array(F)
    F_arr_cereale = F_arr - app_CER_man
    F_arr_ricalcolato = F_arr_ric - app_CER_man     
    print('Hai inserito %f kg di <%s>' % (QM, MG))
    print("Prezzo dell'alimento <%s> => %s EURO/ton" % (MG, prezzo_CEREALE_quantità))
#   except NameError:
#       print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
#       print('')
#       print('Hai a disposizione i seguenti metodi:')
#       print('')
#       print('1) <cornell _CNCPS_>')
#       print('')
#       print('2) <INRA LYS_MET>')
#       print('')
#       print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def apporto_orzo():
    global MG, QM, app_CER_man, Q_AV, Q_FRUTE, Q_MAISGRA, Q_ORZO, Q_SORGO, Q_TRIT, MAISGRA_arr, F, F_arr_cereale, F_arr_ric, F_arr_ricalcolato, QM_PDIE, QM_PDIN, QM_LysDI, QM_MetDI, Q_PDIE, Q_PDIN, Q_LysDI, Q_MetDI, costo_CEREALE_quantità, prezzo_CEREALE_quantità, LISINA, METIONINA, PDIE, PDIN
    try:
        from crea_db_PREZZI_Milano_L import prezzo_ORZO
    except ImportError:
        print('Non ho trovato il LISTINO PREZZI <BORSA MERCI di Milano> nella CARTELLA <%s>!' % cartella)
        print('')
        print("Devi prima crearlo, selezionando l'opzione <Crea il listino della Borsa di Milano> nel menù <Prezzi>")        
#   try:
    prezzo_CEREALE_quantità = prezzo_ORZO
    MG = 'ORZO'
    ITEMS.append(MG)
    PREZZI.append(prezzo_CEREALE_quantità) 
    Q_ORZO = askfloat('Entry', 'Inserisci la quantità di <%s> (MAX 6-7 kg)' % MG)
    QM = Q_ORZO
    if type(prezzo_CEREALE_quantità) is float:         
        costo_orzo = QM * prezzo_CEREALE_quantità / 1000
        costo_CEREALE_quantità = costo_orzo
    else:
        print("Prezzo dell'alimento <%s> => NON DISPONIBILE" % MG)
    if metodo == '_CNCPS_':
        from importa_MySQLdb_orzo import ORZO_arr
    else:
        from importa_MySQLdb_orzo_LYS_MET import ORZO_arr, PDIE_ORZO, LysDI_ORZO, MetDI_ORZO      
        QM_PDIE = QM * PDIE_ORZO
        QM_PDIN = QM * ORZO_arr[11]
        QM_LysDI = QM * LysDI_ORZO
        QM_MetDI = QM * MetDI_ORZO   
        LISINA.append(LysDI_ORZO)
        METIONINA.append(MetDI_ORZO)
        PDIE.append(PDIE_ORZO)
        PDIN.append(ORZO_arr[11])
    ARRAYS.append(ORZO_arr)
    prezzo_CEREALE_quantità = prezzo_ORZO 
    app_CER_man = Q_ORZO * ORZO_arr 
    F_arr = np.array(F)
    F_arr_cereale = F_arr - app_CER_man
    F_arr_ricalcolato = F_arr_ric - app_CER_man     
    print('Hai inserito %f kg di <%s>' % (QM, MG))
    print("Prezzo dell'alimento <%s> => %s EURO/ton" % (MG, prezzo_CEREALE_quantità))
# MODIFICA APPORTATA IL 14.02.2023 PER EVITARE CHE LEGGA IL PREZZO COME <float> NEL CASO DI UN ALIMENTO NON QUOTATO
#   except NameError:
#       print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
#       print('')
#       print('Hai a disposizione i seguenti metodi:')
#       print('')
#       print('1) <cornell _CNCPS_>')
#       print('')
#       print('2) <INRA LYS_MET>')
#       print('')
#       print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def apporto_sorgo():
    global MG, QM, app_CER_man, Q_AV, Q_FRUTE, Q_MAISGRA, Q_ORZO, Q_SORGO, Q_TRIT, MAISGRA_arr, F, F_arr_cereale, F_arr_ric, F_arr_ricalcolato, QM_PDIE, QM_PDIN, QM_LysDI, QM_MetDI, Q_PDIE, Q_PDIN, Q_LysDI, Q_MetDI, costo_CEREALE_quantità, prezzo_CEREALE_quantità, LISINA, METIONINA, PDIE, PDIN
    try:
        from crea_db_PREZZI_Milano_L import prezzo_SORGO
    except ImportError:
        print('Non ho trovato il LISTINO PREZZI <BORSA MERCI di Milano> nella CARTELLA <%s>!' % cartella)
        print('')
        print("Devi prima crearlo, selezionando l'opzione <Crea il listino della Borsa di Milano> nel menù <Prezzi>")           
#   try:
    prezzo_CEREALE_quantità = prezzo_SORGO
    MG = 'SORGO'
    ITEMS.append(MG)
    PREZZI.append(prezzo_CEREALE_quantità)
    Q_SORGO = askfloat('Entry', 'Inserisci la quantità di <%s> (MAX 6-7 kg)' % MG)
    QM = Q_SORGO
    if type(prezzo_CEREALE_quantità) is float:         
        costo_SORGO = QM * prezzo_CEREALE_quantità / 1000
        costo_CEREALE_quantità = costo_SORGO
    else:
        print("Prezzo dell'alimento <%s> => NON DISPONIBILE" % MG)
    if metodo == '_CNCPS_':
        from importa_MySQLdb_SORGO import SORGO_arr
    else:
        from importa_MySQLdb_SORGO_LYS_MET import SORGO_arr, PDIE_SORGO, LysDI_SORGO, MetDI_SORGO      
        QM_PDIE = QM * PDIE_SORGO
        QM_PDIN = QM * SORGO_arr[11]
        QM_LysDI = QM * LysDI_SORGO
        QM_MetDI = QM * MetDI_SORGO   
        LISINA.append(LysDI_SORGO)
        METIONINA.append(MetDI_SORGO)
        PDIE.append(PDIE_SORGO)
        PDIN.append(SORGO_arr[11])
    ARRAYS.append(SORGO_arr)
    prezzo_CEREALE_quantità = prezzo_SORGO 
    app_CER_man = Q_SORGO * SORGO_arr 
    F_arr = np.array(F)
    F_arr_cereale = F_arr - app_CER_man
    F_arr_ricalcolato = F_arr_ric - app_CER_man     
    print('Hai inserito %f kg di <%s>' % (QM, MG))
    print("Prezzo dell'alimento <%s> => %s EURO/ton" % (MG, prezzo_CEREALE_quantità))
#   except NameError:
#       print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
#       print('')
#       print('Hai a disposizione i seguenti metodi:')
#       print('')
#       print('1) <cornell _CNCPS_>')
#       print('')
#       print('2) <INRA LYS_MET>')
#       print('')
#       print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def apporto_triticale():
    global MG, QM, app_CER_man, Q_AV, Q_FRUTE, Q_MAISGRA, Q_ORZO, Q_SORGO, Q_TRIT, MAISGRA_arr, F, F_arr_cereale, F_arr_ric, F_arr_ricalcolato, QM_PDIE, QM_PDIN, QM_LysDI, QM_MetDI, Q_PDIE, Q_PDIN, Q_LysDI, Q_MetDI, costo_CEREALE_quantità, prezzo_CEREALE_quantità, LISINA, METIONINA, PDIE, PDIN
    try:
        from crea_db_PREZZI_Milano_L import prezzo_TRITICALE
    except ImportError:
        print('Non ho trovato il LISTINO PREZZI <BORSA MERCI di Milano> nella CARTELLA <%s>!' % cartella)
        print('')
        print("Devi prima crearlo, selezionando l'opzione <Crea il listino della Borsa di Milano> nel menù <Prezzi>")        
#   try:
    prezzo_CEREALE_quantità = prezzo_TRITICALE
    MG = 'TRITICALE'
    ITEMS.append(MG)
    PREZZI.append(prezzo_CEREALE_quantità)
    Q_TRIT = askfloat('Entry', 'Inserisci la quantità di <%s> (MAX 6-7 kg)' % MG)
    QM = Q_TRIT
    if type(prezzo_CEREALE_quantità) is float:         
        costo_TRITICALE = QM * prezzo_CEREALE_quantità / 1000
        costo_CEREALE_quantità = costo_TRITICALE
    else:
        print("Prezzo dell'alimento <%s> => NON DISPONIBILE" % MG)
    if metodo == '_CNCPS_':
        from importa_MySQLdb_TRITICALE import TRIT_arr
    else:
        from importa_MySQLdb_TRITICALE_LYS_MET import TRIT_arr, PDIE_TRIT, LysDI_TRIT, MetDI_TRIT      
        QM_PDIE = QM * PDIE_TRIT
        QM_PDIN = QM * TRIT_arr[11]
        QM_LysDI = QM * LysDI_TRIT
        QM_MetDI = QM * MetDI_TRIT  
        LISINA.append(LysDI_TRIT)
        METIONINA.append(MetDI_TRIT)
        PDIE.append(PDIE_TRIT)
        PDIN.append(TRIT_arr[11])
    ARRAYS.append(TRIT_arr)
    prezzo_CEREALE_quantità = prezzo_TRITICALE 
    app_CER_man = Q_TRIT * TRIT_arr 
    F_arr = np.array(F)
    F_arr_cereale = F_arr - app_CER_man
    F_arr_ricalcolato = F_arr_ric - app_CER_man     
    print('Hai inserito %f kg di <%s>' % (QM, MG))
    print("Prezzo dell'alimento <%s> => %s EURO/ton" % (MG, prezzo_CEREALE_quantità))
#   except NameError:
#       print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
#       print('')
#       print('Hai a disposizione i seguenti metodi:')
#       print('')
#       print('1) <cornell _CNCPS_>')
#       print('')
#       print('2) <INRA LYS_MET>')
#       print('')
#       print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


                     ### FONTI PROTEICHE quantità ###


def apporto_arachide_farina_estrazione():
    global app_FP_man, QFP, app_CER_man, Q_MAISGRA, MAISGRA_arr, F, F_arr_ric, F_arr_ricalcolato, FE, F_arr_FE, F_arr_ricalcolato_FE, F_arr_ricalcolato_QM_FE, QFP_PDIE, QFP_PDIN, QFP_LysDI, QFP_MetDI, Q_ARAC, Q_COLZ, Q_COT_FE, Q_COT_SEM, Q_FAV, Q_MED_DIS_15, Q_FAV, Q_LFE, QLUP, QMSEMGLU, QORRADMAL, QORTRBIR, QPIS, Q_SOIA_45, Q_SOIA_50, costo_FONTE_PROTEICA_quantità, prezzo_FONTE_PROTEICA_quantità, LISINA, METIONINA, LISINA, METIONINA, PDIE, PDIN
    try:
        from crea_db_PREZZI_Milano_L import prezzo_SOIA_FE
    except ImportError:
        print('Non ho trovato il LISTINO PREZZI <BORSA MERCI di Milano> nella CARTELLA <%s>!' % cartella)
        print('')
        print("Devi prima crearlo, selezionando l'opzione <Crea il listino della Borsa di Milano> nel menù <Prezzi>")           
#   try:
    prezzo_FONTE_PROTEICA_quantità = prezzo_SOIA_FE
    FE = 'ARAC. F.E.'
    ITEMS.append(FE)
    PREZZI.append(prezzo_FONTE_PROTEICA_quantità) 
    Q_ARAC = askfloat('Entry', 'Inserisci la quantità di <%s> (MAX 6-7 kg)' % FE)
    QFP = Q_ARAC
    if type(prezzo_FONTE_PROTEICA_quantità) is float:          
        costo_ARACHIDE_FE = QFP * prezzo_FONTE_PROTEICA_quantità / 1000
        costo_FONTE_PROTEICA_quantità = costo_ARACHIDE_FE
        print("PREZZO STIMATO dell'alimento <%s> => %f EURO/ton" % (FE, prezzo_FONTE_PROTEICA_quantità))
    else:
        print("Prezzo dell'alimento <%s> => NON DISPONIBILE" % FE)  
    if metodo == '_CNCPS_':
        from importa_MySQLdb_arachide_farina_estrazione import ARAFAESTR_arr
    else:
        from importa_MySQLdb_arachide_farina_estrazione_LYS_MET import ARAFAESTR_arr, PDIE_ARAFAESTR, LysDI_ARAFAESTR, MetDI_ARAFAESTR    
        QFP_PDIE = QFP * PDIE_ARAFAESTR
        QFP_PDIN = QFP * ARAFAESTR_arr[11]
        QFP_LysDI = QFP * LysDI_ARAFAESTR
        QFP_MetDI = QFP * MetDI_ARAFAESTR
        LISINA.append(LysDI_ARAFAESTR)
        METIONINA.append(MetDI_ARAFAESTR)
        PDIE.append(PDIE_ARAFAESTR)
        PDIN.append(ARAFAESTR_arr[11])
    ARRAYS.append(ARAFAESTR_arr)
    app_FP_man = QFP * ARAFAESTR_arr 
    F_arr = np.array(F)
    F_arr_FE = F_arr - app_FP_man
    F_arr_ricalcolato_FE = F_arr_ric - app_FP_man
    F_arr_ricalcolato_QM_FE = F_arr_ricalcolato - app_FP_man       
    print('Hai inserito %f kg di <%s>' % (QFP, FE))
    if type(prezzo_FONTE_PROTEICA_quantità) == float:      
        print("Prezzo dell'alimento <%s> => %f EURO/ton" % (FE, prezzo_FONTE_PROTEICA_quantità))
    else:
        print("PREZZO stimato alimento <%s> non disponibile!" % FE)
#   except NameError:
#       print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
#       print('')
#       print('Hai a disposizione i seguenti metodi:')
#       print('')
#       print('1) <cornell _CNCPS_>')
#       print('')
#       print('2) <INRA LYS_MET>')
#       print('')
#       print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def apporto_colza_farina_estrazione():
    global app_FP_man, QFP, app_CER_man, Q_MAISGRA, MAISGRA_arr, F, F_arr_ric, F_arr_ricalcolato, FE, F_arr_FE, F_arr_ricalcolato_FE, F_arr_ricalcolato_QM_FE, QFP_PDIE, QFP_PDIN, QFP_LysDI, QFP_MetDI, Q_ARAC, Q_COLZ, Q_COT_FE, Q_COT_SEM, Q_FAV, Q_MED_DIS_15, Q_FAV, Q_LFE, QLUP, QMSEMGLU, QORRADMAL, QORTRBIR, QPIS, Q_SOIA_45, Q_SOIA_50, costo_FONTE_PROTEICA_quantità, prezzo_FONTE_PROTEICA_quantità, LISINA, METIONINA, PDIE, PDIN
    try:
        from crea_db_PREZZI_Milano_L import prezzo_SOIA_FE
    except ImportError:
        print('Non ho trovato il LISTINO PREZZI <BORSA MERCI di Milano> nella CARTELLA <%s>!' % cartella)
        print('')
        print("Devi prima crearlo, selezionando l'opzione <Crea il listino della Borsa di Milano> nel menù <Prezzi>")             
#   try:
    prezzo_FONTE_PROTEICA_quantità = prezzo_SOIA_FE
    FE = 'COLZA F.E.'
    ITEMS.append(FE)
    PREZZI.append(prezzo_FONTE_PROTEICA_quantità)  
    Q_COLZ = askfloat('Entry', 'Inserisci la quantità di <%s> (MAX 6-7 kg)' % FE)
    QFP = Q_COLZ
    if type(prezzo_FONTE_PROTEICA_quantità) is float:          
        costo_COLZA_FE = QFP * prezzo_FONTE_PROTEICA_quantità / 1000
        costo_FONTE_PROTEICA_quantità = costo_COLZA_FE
        print("PREZZO STIMATO dell'alimento <%s> => %f EURO/ton" % (FE, prezzo_FONTE_PROTEICA_quantità))
    else:
        print("Prezzo dell'alimento <%s> => NON DISPONIBILE" % FE)    
    if metodo == '_CNCPS_':
        from importa_MySQLdb_colza_farina_estrazione import COLFAESTR_arr
    else:
        from importa_MySQLdb_colza_farina_estrazione_LYS_MET import COLFAESTR_arr, PDIE_COLFAESTR, LysDI_COLFAESTR, MetDI_COLFAESTR    
        QFP_PDIE = QFP * PDIE_COLFAESTR
        QFP_PDIN = QFP * COLFAESTR_arr[11]
        QFP_LysDI = QFP * LysDI_COLFAESTR
        QFP_MetDI = QFP * MetDI_COLFAESTR
        LISINA.append(LysDI_COLFAESTR)
        METIONINA.append(MetDI_COLFAESTR)
        PDIE.append(PDIE_COLFAESTR)
        PDIN.append(COLFAESTR_arr[11])
    ARRAYS.append(COLFAESTR_arr)
    app_FP_man = QFP * COLFAESTR_arr 
    F_arr = np.array(F)
    F_arr_FE = F_arr - app_FP_man
    F_arr_ricalcolato_FE = F_arr_ric - app_FP_man
    F_arr_ricalcolato_QM_FE = F_arr_ricalcolato - app_FP_man       
    print('Hai inserito %f kg di <%s>' % (QFP, FE))
    if type(prezzo_FONTE_PROTEICA_quantità) == float:      
        print("Prezzo stimato dell'alimento <%s> => %f EURO/ton" % (FE, prezzo_FONTE_PROTEICA_quantità))
    else:
        print("PREZZO alimento <%s> non disponibile!" % FE)
#   except NameError:
#       print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
#       print('')
#       print('Hai a disposizione i seguenti metodi:')
#       print('')
#       print('1) <cornell _CNCPS_>')
#       print('')
#       print('2) <INRA LYS_MET>')
#       print('')
#       print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def apporto_cotone_farina_estrazione():
    global app_FP_man, QFP, app_CER_man, Q_MAISGRA, MAISGRA_arr, F, F_arr_ric, F_arr_ricalcolato, FE, F_arr_FE, F_arr_ricalcolato_FE, F_arr_ricalcolato_QM_FE, QFP_PDIE, QFP_PDIN, QFP_LysDI, QFP_MetDI, Q_ARAC, Q_COLZ, Q_COT_FE, Q_COT_SEM, Q_FAV, Q_MED_DIS_15, Q_FAV, Q_LFE, QLUP, QMSEMGLU, QORRADMAL, QORTRBIR, QPIS, Q_SOIA_45, Q_SOIA_50, costo_FONTE_PROTEICA_quantità, prezzo_FONTE_PROTEICA_quantità, LISINA, METIONINA, PDIE, PDIN
    try:
        from crea_db_PREZZI_Milano_L import prezzo_SOIA_FE
    except ImportError:
        print('Non ho trovato il LISTINO PREZZI <BORSA MERCI di Milano> nella CARTELLA <%s>!' % cartella)
        print('')
        print("Devi prima crearlo, selezionando l'opzione <Crea il listino della Borsa di Milano> nel menù <Prezzi>")        
#   try:
    prezzo_FONTE_PROTEICA_quantità = prezzo_SOIA_FE
    FE = 'COTONE F.E.'
    ITEMS.append(FE)
    PREZZI.append(prezzo_FONTE_PROTEICA_quantità)   
    Q_COT_FE = askfloat('Entry', 'Inserisci la quantità di <%s> (MAX 6-7 kg)' % FE)
    QFP = Q_COT_FE
    if type(prezzo_FONTE_PROTEICA_quantità) is float:           
        costo_COTONE_FE = QFP * prezzo_FONTE_PROTEICA_quantità / 1000
        costo_FONTE_PROTEICA_quantità = costo_COTONE_FE
        print("PREZZO STIMATO dell'alimento <%s> => %f EURO/ton" % (FE, prezzo_FONTE_PROTEICA_quantità))
    else:
        print("Prezzo dell'alimento <%s> => NON DISPONIBILE" % FE)    
    if metodo == '_CNCPS_':
        from importa_MySQLdb_cotone_farina_estrazione import COTFAESTR_arr
    else:
        from importa_MySQLdb_cotone_farina_estrazione_LYS_MET import COTFAESTR_arr, PDIE_COTFAESTR, LysDI_COTFAESTR, MetDI_COTFAESTR    
        QFP_PDIE = QFP * PDIE_COTFAESTR
        QFP_PDIN = QFP * COTFAESTR_arr[11]
        QFP_LysDI = QFP * LysDI_COTFAESTR
        QFP_MetDI = QFP * MetDI_COTFAESTR  
        LISINA.append(LysDI_COTFAESTR)
        METIONINA.append(MetDI_COTFAESTR)
        PDIE.append(PDIE_COTFAESTR)
        PDIN.append(COTFAESTR_arr[11])
    ARRAYS.append(COTFAESTR_arr)
    app_FP_man = QFP * COTFAESTR_arr 
    F_arr = np.array(F)
    F_arr_FE = F_arr - app_FP_man
    F_arr_ricalcolato_FE = F_arr_ric - app_FP_man
    F_arr_ricalcolato_QM_FE = F_arr_ricalcolato - app_FP_man       
    print('Hai inserito %f kg di <%s>' % (QFP, FE))
    if type(prezzo_FONTE_PROTEICA_quantità) == float:      
        print("Prezzo stimato dell'alimento <%s> => %f EURO/ton" % (FE, prezzo_FONTE_PROTEICA_quantità))
    else:
        print("PREZZO alimento <%s> non disponibile!" % FE)
#   except NameError:
#       print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
#       print('')
#       print('Hai a disposizione i seguenti metodi:')
#       print('')
#       print('1) <cornell _CNCPS_>')
#       print('')
#       print('2) <INRA LYS_MET>')
#       print('')
#       print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def apporto_cotone_semi():
    global app_FP_man, QFP, app_CER_man, Q_MAISGRA, MAISGRA_arr, F, F_arr_ric, F_arr_ricalcolato, FE, F_arr_FE, F_arr_ricalcolato_FE, F_arr_ricalcolato_QM_FE, QFP_PDIE, QFP_PDIN, QFP_LysDI, QFP_MetDI, Q_ARAC, Q_COLZ, Q_COT_FE, Q_COT_SEM, Q_FAV, Q_MED_DIS_15, Q_FAV, Q_LFE, QLUP, QMSEMGLU, QORRADMAL, QORTRBIR, QPIS, Q_SOIA_45, Q_SOIA_50, costo_FONTE_PROTEICA_quantità, prezzo_FONTE_PROTEICA_quantità, LISINA, METIONINA, PDIE, PDIN
    try:
        from crea_db_PREZZI_Bologna_L import prezzo_COTONE_B
    except ImportError:
        print('Non ho trovato il LISTINO PREZZI <BORSA MERCI di Bologna> nella CARTELLA <%s>!' % cartella)
        print('')
        print("Devi prima crearlo, selezionando l'opzione <Crea il listino della Borsa di Bologna> nel menù <Prezzi>")        
#   try:
    prezzo_FONTE_PROTEICA_quantità = prezzo_COTONE_B
    FE = 'COTONE'
    ITEMS.append(FE)
    PREZZI.append(prezzo_FONTE_PROTEICA_quantità) 
    Q_COT_SEM = askfloat('Entry', 'Inserisci la quantità di <%s> (MAX 6-7 kg)' % FE)
    QFP = Q_COT_SEM
    if type(prezzo_FONTE_PROTEICA_quantità) is float:         
        costo_COTONE_SEMI = QFP * prezzo_FONTE_PROTEICA_quantità / 1000
        costo_FONTE_PROTEICA_quantità = costo_COTONE_SEMI
        print("PREZZO dell'alimento <%s> => %f EURO/ton" % (FE, prezzo_FONTE_PROTEICA_quantità))
    else:
        print("Prezzo dell'alimento <%s> => NON DISPONIBILE" % FE)   
    if metodo == '_CNCPS_':
        from importa_MySQLdb_cotone_semi import COTSEMI_arr
    else:
        from importa_MySQLdb_cotone_semi_LYS_MET import COTSEMI_arr, PDIE_COTSEMI, LysDI_COTSEMI, MetDI_COTSEMI    
        QFP_PDIE = QFP * PDIE_COTSEMI
        QFP_PDIN = QFP * COTSEMI_arr[11]
        QFP_LysDI = QFP * LysDI_COTSEMI
        QFP_MetDI = QFP * MetDI_COTSEMI
        LISINA.append(LysDI_COTSEMI)
        METIONINA.append(MetDI_COTSEMI)
        PDIE.append(PDIE_COTSEMI)
        PDIN.append(COTSEMI_arr[11])
    ARRAYS.append(COTSEMI_arr)
    app_FP_man = QFP * COTSEMI_arr 
    F_arr = np.array(F)
    F_arr_FE = F_arr - app_FP_man
    F_arr_ricalcolato_FE = F_arr_ric - app_FP_man
    F_arr_ricalcolato_QM_FE = F_arr_ricalcolato - app_FP_man       
    print('Hai inserito %f kg di <%s>' % (QFP, FE))
    if type(prezzo_FONTE_PROTEICA_quantità) == float:      
        print("Prezzo dell'alimento <%s> => %f EURO/ton" % (FE, prezzo_FONTE_PROTEICA_quantità))
    else:
        print("PREZZO alimento <%s> non disponibile!" % FE)
#   except NameError:
#       print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
#       print('')
#       print('Hai a disposizione i seguenti metodi:')
#       print('')
#       print('1) <cornell _CNCPS_>')
#       print('')
#       print('2) <INRA LYS_MET>')
#       print('')
#       print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def apporto_erba_medica_disidratata_15x100():
    global app_FP_man, QFP, app_CER_man, Q_MAISGRA, MAISGRA_arr, F, F_arr_ric, F_arr_ricalcolato, FE, F_arr_FE, F_arr_ricalcolato_FE, F_arr_ricalcolato_QM_FE, QFP_PDIE, QFP_PDIN, QFP_LysDI, QFP_MetDI, Q_ARAC, Q_COLZ, Q_COT_FE, Q_COT_SEM, Q_FAV, Q_MED_DIS_15, Q_FAV, Q_LFE, QLUP, QMSEMGLU, QORRADMAL, QORTRBIR, QPIS, Q_SOIA_45, Q_SOIA_50, costo_FONTE_PROTEICA_quantità, prezzo_FONTE_PROTEICA_quantità, LISINA, METIONINA, PDIE, PDIN
    try:
        from crea_db_PREZZI_Milano_L import prezzo_ERBA_MEDICA_DIS_1_QUAL
    except ImportError:
        print('Non ho trovato il LISTINO PREZZI <BORSA MERCI di Milano> nella CARTELLA <%s>!' % cartella)
        print('')
        print("Devi prima crearlo, selezionando l'opzione <Crea il listino della Borsa di Milano> nel menù <Prezzi>")            
#   try:
    prezzo_FONTE_PROTEICA_quantità = prezzo_ERBA_MEDICA_DIS_1_QUAL
    FE = 'MEDIS. 15'
    ITEMS.append(FE)
    PREZZI.append(prezzo_FONTE_PROTEICA_quantità)  
    Q_MED_DIS_15 = askfloat('Entry', 'Inserisci la quantità di <%s> (MAX 6-7 kg)' % FE)
    QFP = Q_MED_DIS_15
    if type(prezzo_FONTE_PROTEICA_quantità) is float:                                    
        costo_ERBA_MED_DIS_15 = QFP * prezzo_FONTE_PROTEICA_quantità / 1000
        costo_FONTE_PROTEICA_quantità = costo_ERBA_MED_DIS_15
        print("PREZZO dell'alimento <%s> => %f EURO/ton" % (FE, prezzo_FONTE_PROTEICA_quantità))
    else:
        print("Prezzo dell'alimento <%s> => NON DISPONIBILE" % FE)    
    if metodo == '_CNCPS_':
        from importa_MySQLdb_erba_medica_disidratata_15x100 import ERMEDIS15_arr
    else:
        from importa_MySQLdb_erba_medica_disidratata_15x100_LYS_MET import ERMEDIS15_arr, PDIE_ERMEDIS15, LysDI_ERMEDIS15, MetDI_ERMEDIS15    
        QFP_PDIE = QFP * PDIE_ERMEDIS15
        QFP_PDIN = QFP * ERMEDIS15_arr[11]
        QFP_LysDI = QFP * LysDI_ERMEDIS15
        QFP_MetDI = QFP * MetDI_ERMEDIS15  
        LISINA.append(LysDI_ERMEDIS15)
        METIONINA.append(MetDI_ERMEDIS15)
        PDIE.append(PDIE_ERMEDIS15)
        PDIN.append(ERMEDIS15_arr[11])
    ARRAYS.append(ERMEDIS15_arr)
    app_FP_man = QFP * ERMEDIS15_arr 
    F_arr = np.array(F)
    F_arr_FE = F_arr - app_FP_man
    F_arr_ricalcolato_FE = F_arr_ric - app_FP_man
    F_arr_ricalcolato_QM_FE = F_arr_ricalcolato - app_FP_man       
    print('Hai inserito %f kg di <%s>' % (QFP, FE))
    if type(prezzo_FONTE_PROTEICA_quantità) == float:      
        print("Prezzo dell'alimento <%s> => %f EURO/ton" % (FE, prezzo_FONTE_PROTEICA_quantità))
    else:
        print("PREZZO alimento <%s> non disponibile!" % FE)
#   except NameError:
#       print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
#       print('')
#       print('Hai a disposizione i seguenti metodi:')
#       print('')
#       print('1) <cornell _CNCPS_>')
#       print('')
#       print('2) <INRA LYS_MET>')
#       print('')
#       print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def apporto_erba_medica_disidratata_17x100():
    global app_FP_man, QFP, app_CER_man, Q_MAISGRA, MAISGRA_arr, F, F_arr_ric, F_arr_ricalcolato, FE, F_arr_FE, F_arr_ricalcolato_FE, F_arr_ricalcolato_QM_FE, QFP_PDIE, QFP_PDIN, QFP_LysDI, QFP_MetDI, Q_ARAC, Q_COLZ, Q_COT_FE, Q_COT_SEM, Q_FAV, Q_MED_DIS_15, Q_FAV, Q_LFE, QLUP, QMSEMGLU, QORRADMAL, QORTRBIR, QPIS, Q_SOIA_45, Q_SOIA_50, costo_FONTE_PROTEICA_quantità, prezzo_FONTE_PROTEICA_quantità, LISINA, METIONINA, PDIE, PDIN
    try:
        from crea_db_PREZZI_Milano_L import prezzo_ERBA_MEDICA_DIS_EXTRA
    except ImportError:
        print('Non ho trovato il LISTINO PREZZI <BORSA MERCI di Milano> nella CARTELLA <%s>!' % cartella)
        print('')
        print("Devi prima crearlo, selezionando l'opzione <Crea il listino della Borsa di Milano> nel menù <Prezzi>")              
#   try:
    prezzo_FONTE_PROTEICA_quantità = prezzo_ERBA_MEDICA_DIS_EXTRA
    FE = 'MEDIS 17'
    ITEMS.append(FE)
    PREZZI.append(prezzo_FONTE_PROTEICA_quantità)
    print('%s' % FE)  
    Q_MED_DIS_17 = askfloat('Entry', 'Inserisci la quantità di <%s> (MAX 6-7 kg)' % FE)
    QFP = Q_MED_DIS_17
    if type(prezzo_FONTE_PROTEICA_quantità) is float:                              
        costo_ERBA_MED_DIS_17 = QFP * prezzo_FONTE_PROTEICA_quantità / 1000
        costo_FONTE_PROTEICA_quantità = costo_ERBA_MED_DIS_17
        print("PREZZO dell'alimento <%s> => %f EURO/ton" % (FE, prezzo_FONTE_PROTEICA_quantità))
    else:
        print("Prezzo dell'alimento <%s> => NON DISPONIBILE" % FE)   
    if metodo == '_CNCPS_':
        from importa_MySQLdb_erba_medica_disidratata_17x100 import ERMEDIS17_arr
    else:
        from importa_MySQLdb_erba_medica_disidratata_17x100_LYS_MET import ERMEDIS17_arr, PDIE_ERMEDIS17, LysDI_ERMEDIS17, MetDI_ERMEDIS17       
        QFP_PDIE = QFP * PDIE_ERMEDIS17
        QFP_PDIN = QFP * ERMEDIS17_arr[11]
        QFP_LysDI = QFP * LysDI_ERMEDIS17
        QFP_MetDI = QFP * MetDI_ERMEDIS17  
        LISINA.append(LysDI_ERMEDIS17)
        METIONINA.append(MetDI_ERMEDIS17)
        PDIE.append(PDIE_ERMEDIS17)
        PDIN.append(ERMEDIS17_arr[11])
    ARRAYS.append(ERMEDIS17_arr)
    app_FP_man = QFP * ERMEDIS17_arr 
    F_arr = np.array(F)
    F_arr_FE = F_arr - app_FP_man
    F_arr_ricalcolato_FE = F_arr_ric - app_FP_man
    F_arr_ricalcolato_QM_FE = F_arr_ricalcolato - app_FP_man       
    print('Hai inserito %f kg di <%s>' % (QFP, FE))
    if type(prezzo_FONTE_PROTEICA_quantità) == float:      
        print("Prezzo dell'alimento <%s> => %f EURO/ton" % (FE, prezzo_FONTE_PROTEICA_quantità))
    else:
        print("PREZZO alimento <%s> non disponibile!" % FE)
#   except NameError:
#       print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
#       print('')
#       print('Hai a disposizione i seguenti metodi:')
#       print('')
#       print('1) <cornell _CNCPS_>')
#       print('')
#       print('2) <INRA LYS_MET>')
#       print('')
#       print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def apporto_favino():
    global app_FP_man, QFP, app_CER_man, Q_MAISGRA, MAISGRA_arr, F, F_arr_ric, F_arr_ricalcolato, FE, F_arr_FE, F_arr_ricalcolato_FE, F_arr_ricalcolato_QM_FE, QFP_PDIE, QFP_PDIN, QFP_LysDI, QFP_MetDI, Q_ARAC, Q_COLZ, Q_COT_FE, Q_COT_SEM, Q_FAV, Q_MED_DIS_15, Q_FAV, Q_LFE, QLUP, QMSEMGLU, QORRADMAL, QORTRBIR, QPIS, Q_SOIA_45, Q_SOIA_50, costo_FONTE_PROTEICA_quantità, prezzo_FONTE_PROTEICA_quantità, LISINA, METIONINA, PDIE, PDIN
    try:
        from crea_db_PREZZI_Bologna_L import prezzo_FAVINO_B
    except ImportError:
        print('Non ho trovato il LISTINO PREZZI <BORSA MERCI di Bologna> nella CARTELLA <%s>!' % cartella)
        print('')
        print("Devi prima crearlo, selezionando l'opzione <Crea il listino della Borsa di Bologna> nel menù <Prezzi>")              
#   try:
    prezzo_FONTE_PROTEICA_quantità = prezzo_FAVINO_B
    FE = 'FAVINO'
    ITEMS.append(FE)
    PREZZI.append(prezzo_FONTE_PROTEICA_quantità) 
    Q_FAV = askfloat('Entry', 'Inserisci la quantità di <%s> (MAX 6-7 kg)' % FE)
    QFP = Q_FAV
    if type(prezzo_FONTE_PROTEICA_quantità) is float:                                 
        costo_FAVINO = QFP * prezzo_FONTE_PROTEICA_quantità / 1000
        costo_FONTE_PROTEICA_quantità = costo_FAVINO
        print("PREZZO dell'alimento <%s> => %f EURO/ton" % (FE, prezzo_FONTE_PROTEICA_quantità))
    else:
        print("Prezzo dell'alimento <%s> => NON DISPONIBILE" % FE)   
    if metodo == '_CNCPS_':
        from importa_MySQLdb_favino import FAVINO_arr
    else:
        from importa_MySQLdb_favino_LYS_MET import FAVINO_arr, PDIE_FAVINO, LysDI_FAVINO, MetDI_FAVINO       
        QFP_PDIE = QFP * PDIE_FAVINO
        QFP_PDIN = QFP * FAVINO_arr[11]
        QFP_LysDI = QFP * LysDI_FAVINO
        QFP_MetDI = QFP * MetDI_FAVINO  
        LISINA.append(LysDI_FAVINO)
        METIONINA.append(MetDI_FAVINO)
        PDIE.append(PDIE_FAVINO)
        PDIN.append(FAVINO_arr[11])
    ARRAYS.append(FAVINO_arr)
    app_FP_man = QFP * FAVINO_arr 
    F_arr = np.array(F)
    F_arr_FE = F_arr - app_FP_man
    F_arr_ricalcolato_FE = F_arr_ric - app_FP_man
    F_arr_ricalcolato_QM_FE = F_arr_ricalcolato - app_FP_man       
    print('Hai inserito %f kg di <%s>' % (QFP, FE))
    if type(prezzo_FONTE_PROTEICA_quantità) == float:      
        print("Prezzo dell'alimento <%s> => %f EURO/ton" % (FE, prezzo_FONTE_PROTEICA_quantità))
    else:
        print("PREZZO alimento <%s> non disponibile!" % FE) 
#   except NameError:
#       print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
#       print('')
#       print('Hai a disposizione i seguenti metodi:')
#       print('')
#       print('1) <cornell _CNCPS_>')
#       print('')
#       print('2) <INRA LYS_MET>')
#       print('')
#       print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def apporto_girasole_farina_estrazione_24x100():
    global app_FP_man, QFP, app_CER_man, Q_MAISGRA, MAISGRA_arr, F, F_arr_ric, F_arr_ricalcolato, FE, F_arr_FE, F_arr_ricalcolato_FE, F_arr_ricalcolato_QM_FE, QFP_PDIE, QFP_PDIN, QFP_LysDI, QFP_MetDI, Q_ARAC, Q_COLZ, Q_COT_FE, Q_COT_SEM, Q_FAV, Q_MED_DIS_15, Q_FAV, Q_LFE, QLUP, QMSEMGLU, QORRADMAL, QORTRBIR, QPIS, Q_SOIA_45, Q_SOIA_50, costo_FONTE_PROTEICA_quantità, prezzo_FONTE_PROTEICA_quantità, LISINA, METIONINA, PDIE, PDIN
    try:
        from crea_db_PREZZI_Milano_L import prezzo_GIRASOLE_DECORTICATO_FE
    except ImportError:
        print('Non ho trovato il LISTINO PREZZI <BORSA MERCI di Milano> nella CARTELLA <%s>!' % cartella)
        print('')
        print("Devi prima crearlo, selezionando l'opzione <Crea il listino della Borsa di Milano> nel menù <Prezzi>")            
#   try:
    prezzo_FONTE_PROTEICA_quantità = prezzo_GIRASOLE_DECORTICATO_FE
    FE = 'GIR.F.E.24'
    ITEMS.append(FE)
    PREZZI.append(prezzo_FONTE_PROTEICA_quantità)
    Q_GIR = askfloat('Entry', 'Inserisci la quantità di <%s> (MAX 6-7 kg)' % FE)
    QFP = Q_GIR
    if type(prezzo_FONTE_PROTEICA_quantità) is float:          
        costo_GIRASOLE_FE = QFP * prezzo_FONTE_PROTEICA_quantità / 1000
        costo_FONTE_PROTEICA_quantità = costo_GIRASOLE_FE
        print("PREZZO dell'alimento <%s> => %f EURO/ton" % (FE, prezzo_FONTE_PROTEICA_quantità))
    else:
        print("Prezzo dell'alimento <%s> => NON DISPONIBILE" % FE)
    if metodo == '_CNCPS_':
        from importa_MySQLdb_girasole_farina_estrazione_24x100 import GIRFAESTR24_arr
    ARRAYS.append(GIRFAESTR24_arr)
    app_FP_man = QFP * GIRFAESTR24_arr 
    F_arr = np.array(F)
    F_arr_FE = F_arr - app_FP_man
    F_arr_ricalcolato_FE = F_arr_ric - app_FP_man
    F_arr_ricalcolato_QM_FE = F_arr_ricalcolato - app_FP_man       
    print('Hai inserito %f kg di <%s>' % (QFP, FE))
    if type(prezzo_FONTE_PROTEICA_quantità) == float:      
        print("Prezzo dell'alimento <%s> => %f EURO/ton" % (FE, prezzo_FONTE_PROTEICA_quantità))
    else:
        print("PREZZO alimento <%s> non disponibile!" % FE)
#   except NameError:
#       print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
#       print('')
#       print('Hai a disposizione i seguenti metodi:')
#       print('')
#       print('1) <cornell _CNCPS_>')
#       print('')
#       print('2) <INRA LYS_MET>')
#       print('')
#       print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')



def apporto_girasole_farina_estrazione_34x100():
    global app_FP_man, QFP, app_CER_man, Q_MAISGRA, MAISGRA_arr, F, F_arr_ric, F_arr_ricalcolato, FE, F_arr_FE, F_arr_ricalcolato_FE, F_arr_ricalcolato_QM_FE, QFP_PDIE, QFP_PDIN, QFP_LysDI, QFP_MetDI, Q_ARAC, Q_COLZ, Q_COT_FE, Q_COT_SEM, Q_FAV, Q_MED_DIS_15, Q_FAV, Q_LFE, QLUP, QMSEMGLU, QORRADMAL, QORTRBIR, QPIS, Q_SOIA_45, Q_SOIA_50, costo_FONTE_PROTEICA_quantità, prezzo_FONTE_PROTEICA_quantità, LISINA, METIONINA, PDIE, PDIN
    try:
        from crea_db_PREZZI_Milano_L import prezzo_GIRASOLE_DECORTICATO_FE
    except ImportError:
        print('Non ho trovato il LISTINO PREZZI <BORSA MERCI di Milano> nella CARTELLA <%s>!' % cartella)
        print('')
        print("Devi prima crearlo, selezionando l'opzione <Crea il listino della Borsa di Milano> nel menù <Prezzi>")            
#   try:
    prezzo_FONTE_PROTEICA_quantità = prezzo_GIRASOLE_DECORTICATO_FE
    FE = 'GIR.F.E.34'
    ITEMS.append(FE)
    PREZZI.append(prezzo_FONTE_PROTEICA_quantità)
    Q_GIR = askfloat('Entry', 'Inserisci la quantità di <%s> (MAX 6-7 kg)' % FE)
    QFP = Q_GIR
    if type(prezzo_FONTE_PROTEICA_quantità) is float:          
        costo_GIRASOLE_FE = QFP * prezzo_FONTE_PROTEICA_quantità / 1000
        costo_FONTE_PROTEICA_quantità = costo_GIRASOLE_FE
        print("PREZZO dell'alimento <%s> => %f EURO/ton" % (FE, prezzo_FONTE_PROTEICA_quantità))
    else:
        print("Prezzo dell'alimento <%s> => NON DISPONIBILE" % FE)
    if metodo == '_CNCPS_':
        from importa_MySQLdb_girasole_farina_estrazione_34x100 import GIRFAESTR34_arr
    else:
        from importa_MySQLdb_girasole_farina_estrazione_34x100_LYS_MET import GIRFAESTR34_arr, PDIE_GIRFAESTR34, LysDI_GIRFAESTR34, MetDI_GIRFAESTR34    
        QFP_PDIE = QFP * PDIE_GIRFAESTR34
        QFP_PDIN = QFP * GIRFAESTR34_arr[11]
        QFP_LysDI = QFP * LysDI_GIRFAESTR34
        QFP_MetDI = QFP * MetDI_GIRFAESTR34
        LISINA.append(LysDI_GIRFAESTR34)
        METIONINA.append(MetDI_GIRFAESTR34)
        PDIE.append(PDIE_GIRFAESTR34)
        PDIN.append(GIRFAESTR34_arr[11])
    ARRAYS.append(GIRFAESTR34_arr)
    app_FP_man = QFP * GIRFAESTR34_arr 
    F_arr = np.array(F)
    F_arr_FE = F_arr - app_FP_man
    F_arr_ricalcolato_FE = F_arr_ric - app_FP_man
    F_arr_ricalcolato_QM_FE = F_arr_ricalcolato - app_FP_man       
    print('Hai inserito %f kg di <%s>' % (QFP, FE))
    if type(prezzo_FONTE_PROTEICA_quantità) == float:      
        print("Prezzo dell'alimento <%s> => %f EURO/ton" % (FE, prezzo_FONTE_PROTEICA_quantità))
    else:
        print("PREZZO alimento <%s> non disponibile!" % FE)
#   except NameError:
#       print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
#       print('')
#       print('Hai a disposizione i seguenti metodi:')
#       print('')
#       print('1) <cornell _CNCPS_>')
#       print('')
#       print('2) <INRA LYS_MET>')
#       print('')
#       print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def apporto_lino_farina_estrazione():
    global app_FP_man, QFP, app_CER_man, Q_MAISGRA, MAISGRA_arr, F, F_arr_ric, F_arr_ricalcolato, FE, F_arr_FE, F_arr_ricalcolato_FE, F_arr_ricalcolato_QM_FE, QFP_PDIE, QFP_PDIN, QFP_LysDI, QFP_MetDI, Q_ARAC, Q_COLZ, Q_COT_FE, Q_COT_SEM, Q_FAV, Q_MED_DIS_15, Q_FAV, Q_LFE, QLUP, QMSEMGLU, QORRADMAL, QORTRBIR, QPIS, Q_SOIA_45, Q_SOIA_50, costo_FONTE_PROTEICA_quantità, prezzo_FONTE_PROTEICA_quantità, LISINA, METIONINA, PDIE, PDIN
    try:
        from crea_db_PREZZI_Milano_L import prezzo_GIRASOLE_DECORTICATO_FE
    except ImportError:
        print('Non ho trovato il LISTINO PREZZI <BORSA MERCI di Milano> nella CARTELLA <%s>!' % cartella)
        print('')
        print("Devi prima crearlo, selezionando l'opzione <Crea il listino della Borsa di Milano> nel menù <Prezzi>")               
#   try:
    prezzo_FONTE_PROTEICA_quantità = prezzo_GIRASOLE_DECORTICATO_FE
    FE = 'LINO F.E.'
    ITEMS.append(FE)
    PREZZI.append(prezzo_FONTE_PROTEICA_quantità)
    Q_LFE = askfloat('Entry', 'Inserisci la quantità di <%s> (MAX 6-7 kg)' % FE)
    QFP = Q_LFE
    if type(prezzo_FONTE_PROTEICA_quantità) is float:                                   
        costo_LINO_FE = QFP * prezzo_FONTE_PROTEICA_quantità / 1000
        costo_FONTE_PROTEICA_quantità = costo_LINO_FE
        print("PREZZO dell'alimento <%s> => %f EURO/ton" % (FE, prezzo_FONTE_PROTEICA_quantità))
    else:
        print("Prezzo dell'alimento <%s> => NON DISPONIBILE" % FE)
    if metodo == '_CNCPS_':
        from importa_MySQLdb_lino_farina_estrazione import LIFAESTR_arr
    else:
        from importa_MySQLdb_lino_farina_estrazione_LYS_MET import LIFAESTR_arr, PDIE_LIFAESTR, LysDI_LIFAESTR, MetDI_LIFAESTR
        QFP_PDIE = QFP * PDIE_LIFAESTR
        QFP_PDIN = QFP * LIFAESTR_arr[11]
        QFP_LysDI = QFP * LysDI_LIFAESTR
        QFP_MetDI = QFP * MetDI_LIFAESTR
        LISINA.append(LysDI_LIFAESTR)
        METIONINA.append(MetDI_LIFAESTR)
        PDIE.append(PDIE_LIFAESTR)
        PDIN.append(LIFAESTR_arr[11])
    ARRAYS.append(LIFAESTR_arr)
    app_FP_man = QFP * LIFAESTR_arr 
    F_arr = np.array(F)
    F_arr_FE = F_arr - app_FP_man
    F_arr_ricalcolato_FE = F_arr_ric - app_FP_man
    F_arr_ricalcolato_QM_FE = F_arr_ricalcolato - app_FP_man       
    print('Hai inserito %f kg di <%s>' % (QFP, FE))
    if type(prezzo_FONTE_PROTEICA_quantità) == float:      
        print("Prezzo dell'alimento <%s> => %f EURO/ton" % (FE, prezzo_FONTE_PROTEICA_quantità))
    else:
        print("PREZZO alimento <%s> non disponibile!" % FE)
#   except NameError:
#       print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
#       print('')
#       print('Hai a disposizione i seguenti metodi:')
#       print('')
#       print('1) <cornell _CNCPS_>')
#       print('')
#       print('2) <INRA LYS_MET>')
#       print('')
#       print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def apporto_lupino():
    global app_FP_man, QFP, app_CER_man, Q_MAISGRA, MAISGRA_arr, F, F_arr_ric, F_arr_ricalcolato, FE, F_arr_FE, F_arr_ricalcolato_FE, F_arr_ricalcolato_QM_FE, QFP_PDIE, QFP_PDIN, QFP_LysDI, QFP_MetDI, Q_ARAC, Q_COLZ, Q_COT_FE, Q_COT_SEM, Q_FAV, Q_MED_DIS_15, Q_FAV, Q_LFE, QLUP, QMSEMGLU, QORRADMAL, QORTRBIR, QPIS, Q_SOIA_45, Q_SOIA_50, costo_FONTE_PROTEICA_quantità, prezzo_FONTE_PROTEICA_quantità, LISINA, METIONINA, PDIE, PDIN
    try:
        from crea_db_PREZZI_Alessandria_L import prezzo_LUPINO
    except ImportError:
        print('Non ho trovato il LISTINO PREZZI <BORSA MERCI di Alessandria> nella CARTELLA <%s>!' % cartella)
        print('')
        print("Devi prima crearlo, selezionando l'opzione <Crea il listino della Borsa di Alessandria> nel menù <Prezzi>")            
#   try:
    prezzo_FONTE_PROTEICA_quantità = prezzo_LUPINO
    FE = 'LUPINO'
    ITEMS.append(FE)
    PREZZI.append(prezzo_FONTE_PROTEICA_quantità)
    QLUP = askfloat('Entry', 'Inserisci la quantità di <%s> (MAX 6-7 kg)' % FE)
    QFP = QLUP
    if type(prezzo_FONTE_PROTEICA_quantità) is float:                                   
        costo_LUPINO = QFP * prezzo_FONTE_PROTEICA_quantità / 1000
        costo_FONTE_PROTEICA_quantità = costo_LUPINO
        print("PREZZO dell'alimento <%s> => %f EURO/ton" % (FE, prezzo_FONTE_PROTEICA_quantità))
    else:
        print("Prezzo dell'alimento <%s> => NON DISPONIBILE" % FE)
    if metodo == '_CNCPS_':
        from importa_MySQLdb_lupino import LU_arr
    else:
        from importa_MySQLdb_lupino_LYS_MET import LU_arr, PDIE_LU, LysDI_LU, MetDI_LU
        QFP_PDIE = QFP * PDIE_LU
        QFP_PDIN = QFP * LU_arr[11]
        QFP_LysDI = QFP * LysDI_LU
        QFP_MetDI = QFP * MetDI_LU
        LISINA.append(LysDI_LU)
        METIONINA.append(MetDI_LU)
        PDIE.append(PDIE_LU)
        PDIN.append(LU_arr[11])
    ARRAYS.append(LU_arr)
    app_FP_man = QFP * LU_arr 
    F_arr = np.array(F)
    F_arr_FE = F_arr - app_FP_man
    F_arr_ricalcolato_FE = F_arr_ric - app_FP_man
    F_arr_ricalcolato_QM_FE = F_arr_ricalcolato - app_FP_man       
    print('Hai inserito %f kg di <%s>' % (QFP, FE))
    if type(prezzo_FONTE_PROTEICA_quantità) == float:      
        print("Prezzo dell'alimento <%s> => %f EURO/ton" % (FE, prezzo_FONTE_PROTEICA_quantità))
    else:
        print("PREZZO alimento <%s> non disponibile!" % FE)
#   except NameError:
#       print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
#       print('')
#       print('Hai a disposizione i seguenti metodi:')
#       print('')
#       print('1) <cornell _CNCPS_>')
#       print('')
#       print('2) <INRA LYS_MET>')
#       print('')
#       print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def apporto_mais_semola_glutinata():
    global app_FP_man, QFP, app_CER_man, Q_MAISGRA, MAISGRA_arr, F, F_arr_ric, F_arr_ricalcolato, FE, F_arr_FE, F_arr_ricalcolato_FE, F_arr_ricalcolato_QM_FE, QFP_PDIE, QFP_PDIN, QFP_LysDI, QFP_MetDI, Q_ARAC, Q_COLZ, Q_COT_FE, Q_COT_SEM, Q_FAV, Q_MED_DIS_15, Q_FAV, Q_LFE, QLUP, QMSEMGLU, QORRADMAL, QORTRBIR, QPIS, Q_SOIA_45, Q_SOIA_50, costo_FONTE_PROTEICA_quantità, prezzo_FONTE_PROTEICA_quantità, LISINA, METIONINA, PDIE, PDIN
    try:
        from crea_db_PREZZI_Milano_L import prezzo_MAIS_SEMOLA_GLUTINATA
    except ImportError:
        print('Non ho trovato il LISTINO PREZZI <BORSA MERCI di Milano> nella CARTELLA <%s>!' % cartella)
        print('')
        print("Devi prima crearlo, selezionando l'opzione <Crea il listino della Borsa di Milano> nel menù <Prezzi>")             
#   try:
    prezzo_FONTE_PROTEICA_quantità = prezzo_MAIS_SEMOLA_GLUTINATA
    FE = 'M. SEM. GLUT.'
    ITEMS.append(FE)
    PREZZI.append(prezzo_FONTE_PROTEICA_quantità)
    QMSEMGLU = askfloat('Entry', 'Inserisci la quantità di <%s> (MAX 6-7 kg)' % FE)
    QFP = QMSEMGLU
    if metodo == '_CNCPS_':
        from importa_MySQLdb_mais_semola_glutinata import MAISSEGLU_arr
    else:
        from importa_MySQLdb_mais_semola_glutinata_LYS_MET import MAISSEGLU_arr, PDIE_MAISSEGLU, LysDI_MAISSEGLU, MetDI_MAISSEGLU
        QFP_PDIE = QFP * PDIE_MAISSEGLU
        QFP_PDIN = QFP * MAISSEGLU_arr[11]
        QFP_LysDI = QFP * LysDI_MAISSEGLU
        QFP_MetDI = QFP * MetDI_MAISSEGLU
        LISINA.append(LysDI_MAISSEGLU)
        METIONINA.append(MetDI_MAISSEGLU)
        PDIE.append(PDIE_MAISSEGLU)
        PDIN.append(MAISSEGLU_arr[11])
    ARRAYS.append(MAISSEGLU_arr)
    app_FP_man = QFP * MAISSEGLU_arr 
    F_arr = np.array(F)
    F_arr_FE = F_arr - app_FP_man
    F_arr_ricalcolato_FE = F_arr_ric - app_FP_man
    F_arr_ricalcolato_QM_FE = F_arr_ricalcolato - app_FP_man       
    print('Hai inserito %f kg di <%s>' % (QFP, FE))
    if type(prezzo_FONTE_PROTEICA_quantità) == float:      
        costo_mais_semola_glutinata = QFP * prezzo_FONTE_PROTEICA_quantità / 1000
        costo_FONTE_PROTEICA_quantità = costo_mais_semola_glutinata
        print("Prezzo dell'alimento <%s> => %f EURO/ton" % (FE, prezzo_FONTE_PROTEICA_quantità))
    else:
        print("Prezzo dell'alimento <%s> => NON DISPONIBILE" % FE)
#   except NameError:
#       print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
#       print('')
#       print('Hai a disposizione i seguenti metodi:')
#       print('')
#       print('1) <cornell _CNCPS_>')
#       print('')
#       print('2) <INRA LYS_MET>')
#       print('')
#       print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def apporto_malto_orzo_radichette():
    global app_FP_man, QFP, app_CER_man, Q_MAISGRA, MAISGRA_arr, F, F_arr_ric, F_arr_ricalcolato, FE, F_arr_FE, F_arr_ricalcolato_FE, F_arr_ricalcolato_QM_FE, QFP_PDIE, QFP_PDIN, QFP_LysDI, QFP_MetDI, Q_ARAC, Q_COLZ, Q_COT_FE, Q_COT_SEM, Q_FAV, Q_MED_DIS_15, Q_FAV, Q_LFE, QLUP, QMSEMGLU, QORRADMAL, QORTRBIR, QPIS, Q_SOIA_45, Q_SOIA_50, costo_FONTE_PROTEICA_quantità, prezzo_FONTE_PROTEICA_quantità, LISINA, METIONINA, PDIE, PDIN
    prezzo_RADICHETTE_MALTO = 350.0       
#   try:
    prezzo_FONTE_PROTEICA_quantità = prezzo_RADICHETTE_MALTO
    FE = "RAD. MALTO"
    ITEMS.append(FE)
    PREZZI.append(prezzo_FONTE_PROTEICA_quantità)
    QORRADMAL = askfloat('Entry', 'Inserisci la quantità di <%s> (MAX 6-7 kg)' % FE)
    QFP = QORRADMAL
    if metodo == '_CNCPS_':
        from importa_MySQLdb_malto_orzo_radichette import ORRADMAL_arr
    else:
        from importa_MySQLdb_malto_orzo_radichette_LYS_MET import ORRADMAL_arr, PDIE_ORRADMAL, LysDI_ORRADMAL, MetDI_ORRADMAL
        QFP_PDIE = QFP * PDIE_ORRADMAL
        QFP_PDIN = QFP * ORRADMAL_arr[11]
        QFP_LysDI = QFP * LysDI_ORRADMAL
        QFP_MetDI = QFP * MetDI_ORRADMAL
        LISINA.append(LysDI_ORRADMAL)
        METIONINA.append(MetDI_ORRADMAL)
        PDIE.append(PDIE_ORRADMAL)
        PDIN.append(ORRADMAL_arr[11])
    ARRAYS.append(ORRADMAL_arr)
    app_FP_man = QFP * ORRADMAL_arr 
    F_arr = np.array(F)
    F_arr_FE = F_arr - app_FP_man
    F_arr_ricalcolato_FE = F_arr_ric - app_FP_man
    F_arr_ricalcolato_QM_FE = F_arr_ricalcolato - app_FP_man       
    print('Hai inserito %f kg di <%s>' % (QFP, FE))
    costo_malto_orzo_radichette = QFP * prezzo_FONTE_PROTEICA_quantità / 1000
    costo_FONTE_PROTEICA_quantità = costo_malto_orzo_radichette
    print("Prezzo STIMATO dell'alimento <%s> => %f EURO/ton" % (FE, prezzo_FONTE_PROTEICA_quantità))
#   except NameError:
#       print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
#       print('')
#       print('Hai a disposizione i seguenti metodi:')
#       print('')
#       print('1) <cornell _CNCPS_>')
#       print('')
#       print('2) <INRA LYS_MET>')
#       print('')
#       print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def apporto_orzo_trebbie_birra():
    global app_FP_man, QFP, app_CER_man, Q_MAISGRA, MAISGRA_arr, F, F_arr_ric, F_arr_ricalcolato, FE, F_arr_FE, F_arr_ricalcolato_FE, F_arr_ricalcolato_QM_FE, QFP_PDIE, QFP_PDIN, QFP_LysDI, QFP_MetDI, Q_ARAC, Q_COLZ, Q_COT_FE, Q_COT_SEM, Q_FAV, Q_MED_DIS_15, Q_FAV, Q_LFE, QLUP, QMSEMGLU, QORTREBIR, QORTRBIR, QPROTPAT, Q_SOIA_50, costo_FONTE_PROTEICA_quantità, prezzo_FONTE_PROTEICA_quantità, LISINA, METIONINA, PDIE, PDIN
    prezzo_TREBBIE_BIRRA = 350.0       
#   try:
    prezzo_FONTE_PROTEICA_quantità = prezzo_TREBBIE_BIRRA
    FE = "TR. BIRRA"
    ITEMS.append(FE)
    PREZZI.append(prezzo_FONTE_PROTEICA_quantità)
    QORTRBIR = askfloat('Entry', 'Inserisci la quantità di <%s> (MAX 6-7 kg)' % FE)
    QFP = QORTRBIR
    if metodo == '_CNCPS_':
        from importa_MySQLdb_orzo_trebbie_birra import ORTREBIR_arr
    else:
        from importa_MySQLdb_orzo_trebbie_birra_LYS_MET import ORTREBIR_arr, PDIE_ORTREBIR, LysDI_ORTREBIR, MetDI_ORTREBIR
        QFP_PDIE = QFP * PDIE_ORTREBIR
        QFP_PDIN = QFP * ORTREBIR_arr[11]
        QFP_LysDI = QFP * LysDI_ORTREBIR
        QFP_MetDI = QFP * MetDI_ORTREBIR
        LISINA.append(LysDI_ORTREBIR)
        METIONINA.append(MetDI_ORTREBIR)
        PDIE.append(PDIE_ORTREBIR)
        PDIN.append(ORTREBIR_arr[11])
    ARRAYS.append(ORTREBIR_arr)
    app_FP_man = QFP * ORTREBIR_arr 
    F_arr = np.array(F)
    F_arr_FE = F_arr - app_FP_man
    F_arr_ricalcolato_FE = F_arr_ric - app_FP_man
    F_arr_ricalcolato_QM_FE = F_arr_ricalcolato - app_FP_man       
    print('Hai inserito %f kg di <%s>' % (QFP, FE))
    costo_orzo_trebbie_birra = QFP * prezzo_FONTE_PROTEICA_quantità / 1000
    costo_FONTE_PROTEICA_quantità = costo_orzo_trebbie_birra
    print("Prezzo STIMATO dell'alimento <%s> => %f EURO/ton" % (FE, prezzo_FONTE_PROTEICA_quantità))
#   except NameError:
#       print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
#       print('')
#       print('Hai a disposizione i seguenti metodi:')
#       print('')
#       print('1) <cornell _CNCPS_>')
#       print('')
#       print('2) <INRA LYS_MET>')
#       print('')
#       print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def apporto_pisello():
    global app_FP_man, QFP, app_CER_man, Q_MAISGRA, MAISGRA_arr, F, F_arr_ric, F_arr_ricalcolato, FE, F_arr_FE, F_arr_ricalcolato_FE, F_arr_ricalcolato_QM_FE, QFP_PDIE, QFP_PDIN, QFP_LysDI, QFP_MetDI, Q_ARAC, Q_COLZ, Q_COT_FE, Q_COT_SEM, Q_FAV, Q_MED_DIS_15, Q_FAV, Q_LFE, QLUP, QMSEMGLU, QORRADMAL, QORTRBIR, QPIS, Q_SOIA_45, Q_SOIA_50, costo_FONTE_PROTEICA_quantità, prezzo_FONTE_PROTEICA_quantità, LISINA, METIONINA, PDIE, PDIN
    try:
        from crea_db_PREZZI_Milano_L import prezzo_PISELLO
    except ImportError:
        print('Non ho trovato il LISTINO PREZZI <BORSA MERCI di Milano> nella CARTELLA <%s>!' % cartella)
        print('')
        print("Devi prima crearlo, selezionando l'opzione <Crea il listino della Borsa di Milano> nel menù <Prezzi>")        
#   try:
    prezzo_FONTE_PROTEICA_quantità = prezzo_pisello
    FE = 'PISELLO'
    ITEMS.append(FE)
    PREZZI.append(prezzo_FONTE_PROTEICA_quantità)
    QPIS = askfloat('Entry', 'Inserisci la quantità di <%s> (MAX 6-7 kg)' % FE)
    QFP = QPIS
    if metodo == '_CNCPS_':
        from importa_MySQLdb_pisello import PISELLO_arr
    else:
        from importa_MySQLdb_pisello_LYS_MET import PISELLO_arr, PDIE_PISELLO, LysDI_PISELLO, MetDI_PISELLO
        QFP_PDIE = QFP * PDIE_PISELLO
        QFP_PDIN = QFP * PISELLO_arr[11]
        QFP_LysDI = QFP * LysDI_PISELLO
        QFP_MetDI = QFP * MetDI_PISELLO
        LISINA.append(LysDI_PISELLO)
        METIONINA.append(MetDI_PISELLO)
        PDIE.append(PDIE_PISELLO)
        PDIN.append(PISELLO_arr[11])
    ARRAYS.append(PISELLO_arr)
    app_FP_man = QFP * PISELLO_arr 
    F_arr = np.array(F)
    F_arr_FE = F_arr - app_FP_man
    F_arr_ricalcolato_FE = F_arr_ric - app_FP_man
    F_arr_ricalcolato_QM_FE = F_arr_ricalcolato - app_FP_man       
    print('Hai inserito %f kg di <%s>' % (QFP, FE))
    if type(prezzo_FONTE_PROTEICA_quantità) == float:      
        costo_pisello = QFP * prezzo_FONTE_PROTEICA_quantità / 1000
        costo_FONTE_PROTEICA_quantità = costo_pisello
        print("Prezzo dell'alimento <%s> => %f EURO/ton" % (FE, prezzo_FONTE_PROTEICA_quantità))
    else:
        print("Prezzo dell'alimento <%s> => NON DISPONIBILE" % FE)
#   except NameError:
#       print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
#       print('')
#       print('Hai a disposizione i seguenti metodi:')
#       print('')
#       print('1) <cornell _CNCPS_>')
#       print('')
#       print('2) <INRA LYS_MET>')
#       print('')
#       print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def apporto_proteina_patata():
    global app_FP_man, QFP, app_CER_man, Q_MAISGRA, MAISGRA_arr, F, F_arr_ric, F_arr_ricalcolato, FE, F_arr_FE, F_arr_ricalcolato_FE, F_arr_ricalcolato_QM_FE, QFP_PDIE, QFP_PDIN, QFP_LysDI, QFP_MetDI, Q_ARAC, Q_COLZ, Q_COT_FE, Q_COT_SEM, Q_FAV, Q_MED_DIS_15, Q_FAV, Q_LFE, QLUP, QMSEMGLU, QPROPA, QORTRBIR, QPROTPAT, Q_SOIA_50, costo_FONTE_PROTEICA_quantità, prezzo_FONTE_PROTEICA_quantità, LISINA, METIONINA, PDIE, PDIN
    prezzo_PROTEINA_PATATA = 350.0       
#   try:
    prezzo_FONTE_PROTEICA_quantità = prezzo_PROTEINA_PATATA
    FE = 'PR. PAT.'
    ITEMS.append(FE)
    PREZZI.append(prezzo_FONTE_PROTEICA_quantità)
    QPROTPAT = askfloat('Entry', 'Inserisci la quantità di <%s> (MAX 6-7 kg)' % FE)
    QFP = QPROTPAT
    if metodo == '_CNCPS_':
        from importa_MySQLdb_proteina_patata import PROPA_arr
    else:
        from importa_MySQLdb_proteina_patata_LYS_MET import PROPA_arr, PDIE_PROPA, LysDI_PROPA, MetDI_PROPA
        QFP_PDIE = QFP * PDIE_PROPA
        QFP_PDIN = QFP * PROPA_arr[11]
        QFP_LysDI = QFP * LysDI_PROPA
        QFP_MetDI = QFP * MetDI_PROPA
        LISINA.append(LysDI_PROPA)
        METIONINA.append(MetDI_PROPA)
        PDIE.append(PDIE_PROPA)
        PDIN.append(PROPA_arr[11])
    ARRAYS.append(PROPA_arr)
    app_FP_man = QFP * PROPA_arr 
    F_arr = np.array(F)
    F_arr_FE = F_arr - app_FP_man
    F_arr_ricalcolato_FE = F_arr_ric - app_FP_man
    F_arr_ricalcolato_QM_FE = F_arr_ricalcolato - app_FP_man       
    print('Hai inserito %f kg di <%s>' % (QFP, FE))
    costo_proteina_patata = QFP * prezzo_FONTE_PROTEICA_quantità / 1000
    costo_FONTE_PROTEICA_quantità = costo_proteina_patata
    print("Prezzo STIMATO dell'alimento <%s> => %f EURO/ton" % (FE, prezzo_FONTE_PROTEICA_quantità))
#   except NameError:
#       print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
#       print('')
#       print('Hai a disposizione i seguenti metodi:')
#       print('')
#       print('1) <cornell _CNCPS_>')
#       print('')
#       print('2) <INRA LYS_MET>')
#       print('')
#       print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def apporto_soia_farina_estrazione_45x100():
    global app_FP_man, QFP, app_CER_man, Q_MAISGRA, MAISGRA_arr, F, F_arr_ric, F_arr_ricalcolato, FE, F_arr_FE, F_arr_ricalcolato_FE, F_arr_ricalcolato_QM_FE, QFP_PDIE, QFP_PDIN, QFP_LysDI, QFP_MetDI, Q_ARAC, Q_COLZ, Q_COT_FE, Q_COT_SEM, Q_FAV, Q_MED_DIS_15, Q_FAV, Q_LFE, QLUP, QMSEMGLU, QORRADMAL, QORTRBIR, QPIS, Q_SOIA_45, Q_SOIA_50, costo_FONTE_PROTEICA_quantità, prezzo_FONTE_PROTEICA_quantità, LISINA, METIONINA, PDIE, PDIN
    try:
        from crea_db_PREZZI_Milano_L import prezzo_SOIA_FE
    except ImportError:
        print('Non ho trovato il LISTINO PREZZI <BORSA MERCI di Milano> nella CARTELLA <%s>!' % cartella)
        print('')
        print("Devi prima crearlo, selezionando l'opzione <Crea il listino della Borsa di Milano> nel menù <Prezzi>")              
#   try:
    prezzo_FONTE_PROTEICA_quantità = prezzo_SOIA_FE
    FE = 'SOIA F.E.45'
    ITEMS.append(FE)
    PREZZI.append(prezzo_FONTE_PROTEICA_quantità)  
    Q_SOIA_45 = askfloat('Entry', 'Inserisci la quantità di <%s> (MAX 6-7 kg)' % FE)
    QFP = Q_SOIA_45
    print('La razione fornisce %f kg di %s' % (QFP, FE))
    if type(prezzo_FONTE_PROTEICA_quantità) is float:       
        costo_SOIA_FE = QFP * prezzo_FONTE_PROTEICA_quantità / 1000
        costo_FONTE_PROTEICA_quantità = costo_SOIA_FE
        print("PREZZO dell'alimento <%s> => %f EURO/ton" % (FE, prezzo_FONTE_PROTEICA_quantità))
    else:
        print("Prezzo dell'alimento <%s> => NON DISPONIBILE" % FE)
    if metodo == '_CNCPS_':
        from importa_MySQLdb_soia_farina_estrazione_45x100 import SOFAESTR45_arr
    else:
        from importa_MySQLdb_soia_farina_estrazione_45x100_LYS_MET import SOFAESTR45_arr, PDIE_SOFAESTR45, LysDI_SOFAESTR45, MetDI_SOFAESTR45    
        QFP_PDIE = QFP * PDIE_SOFAESTR45
        QFP_PDIN = QFP * SOFAESTR45_arr[11]
        QFP_LysDI = QFP * LysDI_SOFAESTR45
        QFP_MetDI = QFP * MetDI_SOFAESTR45  
        LISINA.append(LysDI_SOFAESTR45)
        METIONINA.append(MetDI_SOFAESTR45)
        PDIE.append(PDIE_SOFAESTR45)
        PDIN.append(SOFAESTR45_arr[11])
    ARRAYS.append(SOFAESTR45_arr)
    app_FP_man = QFP * SOFAESTR45_arr 
    F_arr = np.array(F)
    F_arr_FE = F_arr - app_FP_man
    F_arr_ricalcolato_FE = F_arr_ric - app_FP_man
    F_arr_ricalcolato_QM_FE = F_arr_ricalcolato - app_FP_man       
    print('Hai inserito %f kg di <%s>' % (QFP, FE))
    print('')
    print('ATTENZIONE! Se la <%s> è la principale FONTE PROTEICA, la razione sarà CARENTE DI METIONINA, un aminoacido essenziale per la sintesi della proteina del latte' % FE)
    print('')
    print('Il rapporto LISINA/METIONINA della <%s> è, infatti, molto alto!' % FE)
    print('')
    if type(prezzo_FONTE_PROTEICA_quantità) == float:      
        print("Prezzo dell'alimento <%s> => %f EURO/ton" % (FE, prezzo_FONTE_PROTEICA_quantità))
    else:
        print("PREZZO alimento <%s> non disponibile!" % FE)
#   except NameError:
#       print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
#       print('')
#       print('Hai a disposizione i seguenti metodi:')
#       print('')
#       print('1) <cornell _CNCPS_>')
#       print('')
#       print('2) <INRA LYS_MET>')
#       print('')
#       print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def apporto_soia_farina_estrazione_50x100():
    global app_FP_man, QFP, app_CER_man, Q_MAISGRA, MAISGRA_arr, F, F_arr_ric, F_arr_ricalcolato, FE, F_arr_FE, F_arr_ricalcolato_FE, F_arr_ricalcolato_QM_FE, QFP_PDIE, QFP_PDIN, QFP_LysDI, QFP_MetDI, Q_ARAC, Q_COLZ, Q_COT_FE, Q_COT_SEM, Q_FAV, Q_MED_DIS_15, Q_FAV, Q_LFE, QLUP, QMSEMGLU, QORRADMAL, QORTRBIR, QPIS, Q_SOIA_45, Q_SOIA_50, costo_FONTE_PROTEICA_quantità, prezzo_FONTE_PROTEICA_quantità, LISINA, METIONINA, PDIE, PDIN
    try:
        from crea_db_PREZZI_Milano_L import prezzo_SOIA_FE
    except ImportError:
        print('Non ho trovato il LISTINO PREZZI <BORSA MERCI di Milano> nella CARTELLA <%s>!' % cartella)
        print('')
        print("Devi prima crearlo, selezionando l'opzione <Crea il listino della Borsa di Milano> nel menù <Prezzi>")        
#   try:
    prezzo_FONTE_PROTEICA_quantità = prezzo_SOIA_FE
    FE = 'SOIA F.E.50'
    ITEMS.append(FE)
    PREZZI.append(prezzo_FONTE_PROTEICA_quantità) 
    Q_SOIA_50 = askfloat('Entry', 'Inserisci la quantità di <%s> (MAX 6-7 kg)' % FE)
    QFP = Q_SOIA_50
    print('La razione fornisce %f kg di %s' % (QFP, FE))
    if type(prezzo_FONTE_PROTEICA_quantità) is float:       
        costo_SOIA_FE = QFP * prezzo_FONTE_PROTEICA_quantità / 1000
        costo_FONTE_PROTEICA_quantità = costo_SOIA_FE
        print("PREZZO dell'alimento <%s> => %f EURO/ton" % (FE, prezzo_FONTE_PROTEICA_quantità))
    else:
        print("Prezzo dell'alimento <%s> => NON DISPONIBILE" % FE)
    if metodo == '_CNCPS_':
        from importa_MySQLdb_soia_farina_estrazione_50x100 import SOFAESTR50_arr
    else:
        from importa_MySQLdb_soia_farina_estrazione_50x100_LYS_MET import SOFAESTR50_arr, PDIE_SOFAESTR50, LysDI_SOFAESTR50, MetDI_SOFAESTR50    
        QFP_PDIE = QFP * PDIE_SOFAESTR50
        QFP_PDIN = QFP * SOFAESTR50_arr[11]
        QFP_LysDI = QFP * LysDI_SOFAESTR50
        QFP_MetDI = QFP * MetDI_SOFAESTR50  
        LISINA.append(LysDI_SOFAESTR50)
        METIONINA.append(MetDI_SOFAESTR50)
        PDIE.append(PDIE_SOFAESTR50)
        PDIN.append(SOFAESTR50_arr[11])
    ARRAYS.append(SOFAESTR50_arr)
    app_FP_man = QFP * SOFAESTR50_arr 
    F_arr = np.array(F)
    F_arr_FE = F_arr - app_FP_man
    F_arr_ricalcolato_FE = F_arr_ric - app_FP_man
    F_arr_ricalcolato_QM_FE = F_arr_ricalcolato - app_FP_man       
    print('Hai inserito %f kg di <%s>' % (QFP, FE))
    print('')
    print('ATTENZIONE! Se la <%s> è la principale FONTE PROTEICA, la razione sarà CARENTE DI METIONINA, un aminoacido essenziale per la sintesi della proteina del latte' % FE)
    print('')
    print('Il rapporto LISINA/METIONINA della <%s> è, infatti, molto alto!' % FE)
    print('')
    if type(prezzo_FONTE_PROTEICA_quantità) == float:      
        print("Prezzo dell'alimento <%s> => %f EURO/ton" % (FE, prezzo_FONTE_PROTEICA_quantità))
    else:
        print("PREZZO alimento <%s> non disponibile!" % FE)
#   except NameError:
#       print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
#       print('')
#       print('Hai a disposizione i seguenti metodi:')
#       print('')
#       print('1) <cornell _CNCPS_>')
#       print('')
#       print('2) <INRA LYS_MET>')
#       print('')
#       print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')





   
################################################################################################################################        
################################################### FUNZIONE CALCOLA RAZIONE ###################################################
################################################################################################################################



def calcola_razione():


    
    global APPORTO_DEFINITIVO_SOSTANZA_SECCA, costo_FORAGGIO_quantità, costo_CEREALE_quantità, costo_FONTE_PROTEICA_quantità, prezzo_FORAGGIO_quantità, prezzo_CEREALE_quantità, prezzo_FONTE_PROTEICA_quantità, metodo, nome_file_apporti, nome_file_dati, nome_file_fabbisogni, nome_file_quantità, nome_file_parametri, nome_file_razione, Parametri_decimali, Parametri_interi, TESTO_A, TESTO_F, TESTO_P, TESTO_R, ARRAYS, ITEMS, quantità_alimento_1, quantità_alimento_2, quantità_alimento_3, quantità_alimento_4, quantità_alimento_5, quantità_alimento_6, quantità_alimento_7, quantità_alimento_8, quantità_alimento_9, LysDI_ratio, MetDI_ratio, Lys_Met_ratio, LISINA, METIONINA, PDIE, PDIN, LISINA_TOT, METIONINA_TOT, PDIE_TOT, PDIN_TOT, quantità
    

        
    if metodo == '_CNCPS_':


    
        if TESTO_P[30:33] == 'Mon':
            giorno_di_inserimento = 'Lunedì'
        elif TESTO_P[30:33] == 'Tue':
            giorno_di_inserimento = 'Martedì'
        elif TESTO_P[30:33] == 'Wed':
            giorno_di_inserimento = 'Mercoledì'
        elif TESTO_P[30:33] == 'Thu':
            giorno_di_inserimento = 'Giovedì'
        elif TESTO_P[30:33] == 'Fri':
            giorno_di_inserimento = 'Venerdì'
        elif TESTO_P[30:33] == 'Sat':
            giorno_di_inserimento = 'Sabato'
        elif TESTO_P[30:33] == 'Sun':
            giorno_di_inserimento = 'Domenica'        
            
        data_di_inserimento = TESTO_P[0:10]
        ora_di_inserimento = TESTO_P[11:19]
        gruppo = TESTO_P[28]
        LW = float(Parametri_decimali[0])
        WOL = int(Parametri_interi[8])
        MY = float(Parametri_decimali[1])
        FAT_milk = float(Parametri_decimali[2])
        CP_milk = float(Parametri_decimali[3])
        LAC_milk = float(Parametri_decimali[4])
        PREZZO_MAX = float(Parametri_decimali[5])
        N_repl = int(Parametri_interi[19])  
            
        print('PARAMETRI inseriti da %s, %s %s alle ore %s' % (user, giorno_di_inserimento, data_di_inserimento, ora_di_inserimento))
        print('') 
        print('METODO DI CALCOLO della razione => <%s>' % metodo)
     
        if gruppo == 'F':
            print('GRUPPO => <freschissime>')
        elif gruppo == 'f':
            print('GRUPPO => <fresche>')
        elif gruppo == 's':
            print('GRUPPO => <stanche>')
        
        print('PESO VIVO MEDIO BOVINE IN LATTAZIONE => %f kg' % LW)        
        print('SETTIMANA DI LATTAZIONE media => <%d^>' % WOL)
        print('LIVELLO PRODUTTIVO giornaliero medio => %f kg di latte al giorno' % MY)
        print('TENORE DI GRASSO del latte => %fx100' % FAT_milk)
        print('TENORE DI PROTEINA del latte => %fx100' % CP_milk)
        print('TENORE DI LATTOSIO del latte => %fx100' % LAC_milk)
        print('PREZZO MASSIMO della razione => %f EURO' % PREZZO_MAX)
        print('N° DI REPLICHE => %d' % N_repl)


            
    elif metodo == 'LYS_MET':        



        LISINA = np.array(LISINA)
        METIONINA = np.array(METIONINA)
        PDIE = np.array(PDIE)
        PDIN = np.array(PDIN)



        if TESTO_P[30:33] == 'Mon':
            giorno_di_inserimento = 'Lunedì'
        elif TESTO_P[30:33] == 'Tue':
            giorno_di_inserimento = 'Martedì'
        elif TESTO_P[30:33] == 'Wed':
            giorno_di_inserimento = 'Mercoledì'
        elif TESTO_P[30:33] == 'Thu':
            giorno_di_inserimento = 'Giovedì'
        elif TESTO_P[30:33] == 'Fri':
            giorno_di_inserimento = 'Venerdì'
        elif TESTO_P[30:33] == 'Sat':
            giorno_di_inserimento = 'Sabato'
        elif TESTO_P[30:33] == 'Sun':
            giorno_di_inserimento = 'Domenica'  
        
        data_di_inserimento = TESTO_P[0:10]
        ora_di_inserimento = TESTO_P[11:19]
        gruppo = TESTO_P[28]

        calf_weight = float(Parametri_decimali[0])
        LW = float(Parametri_decimali[1])
        cow_age = int(Parametri_interi[10])
        WOL = int(Parametri_interi[11])
        WOP = int(Parametri_interi[12])
        MY = float(Parametri_decimali[2])
        FAT_milk = float(Parametri_decimali[3])
        CP_milk = float(Parametri_decimali[4])
        LAC_milk = float(Parametri_decimali[5])
        PREZZO_MAX = float(Parametri_decimali[6])
        N_repl = int(Parametri_interi[23])
             

        print('PARAMETRI inseriti da %s, %s %s alle ore %s' % (user, giorno_di_inserimento, data_di_inserimento, ora_di_inserimento))
        print('') 
        print('METODO DI CALCOLO della razione => <%s>' % metodo)

        if gruppo == 'F':
            print('GRUPPO => <freschissime>')
        elif gruppo == 'f':
            print('GRUPPO => <fresche>')
        elif gruppo == 's':
            print('GRUPPO => <stanche>')

        print('PESO ALLA NASCITA medio => %f kg' % calf_weight)
        print('PESO MEDIO BOVINE IN LATTAZIONE => %f kg' % LW)
        print('ETÀ MEDIA BOVINE IN LATTAZIONE => %f mesi' % cow_age)
        print('SETTIMANA DI LATTAZIONE media => <%d^>' % WOL)
        print('SETTIMANA DI GRAVIDANZA media => <%d^>' % WOP)
        print('LIVELLO PRODUTTIVO giornaliero medio => %f kg di latte al giorno' % MY)
        print('TENORE DI GRASSO del latte => %fx100' % FAT_milk)
        print('TENORE DI PROTEINA del latte => %fx100' % CP_milk)
        print('TENORE DI LATTOSIO del latte => %fx100' % LAC_milk)
        print('PREZZO MASSIMO della razione => %f EURO' % PREZZO_MAX)
        print('N° DI REPLICHE => %d' % N_repl)
        
        
    else:
        print('Non ci sono PARAMETRI da importare nella CARTELLA <%s>!' % cartella)
        print('')
        print('Per favore, dopo aver scelto un METODO DI CALCOLO, inserisci i PARAMETRI richiesti!')
        
        
        

        
    global F, F_arr_ric, F_arr_ricalcolato, F_arr_ricalcolato_FE, F_arr_ricalcolato_QM_FE
    F_arr = np.array(F)


    print('')
    try:
        if nome_file_razione:
            print('La tua nuova RAZIONE verrà salvata nel FILE DI TESTO <%s.txt> nella CARTELLA <%s>' % (nome_file_razione, cartella))
        else:
            nome_file_razione = 'NUOVA_RAZIONE'
            print('La tua nuova RAZIONE verrà salvata nel FILE DI TESTO <%s.txt> nella CARTELLA <%s>' % (nome_file_razione, cartella))
    except NameError: 
        nome_file_razione = 'NUOVA_RAZIONE'
        print('La tua nuova RAZIONE verrà salvata nel FILE DI TESTO <%s.txt> nella CARTELLA <%s>' % (nome_file_razione, cartella))
    print('')
    # print('Si prega di salvare il file con un altro nome per evitare di sovrascriverlo con la prossima razione')
    print('')
    # print('Per es., salva il file <NUOVA_RAZIONE.txt> con nome <RAZIONE_01.txt>')


    try:
        if Q and QM and QFP:
# FORAGGIO + GRANELLA + FE:
# F_arr_ricalcolato_QM_FE = {[(F_arr - apporto FORAGGIO) - apporto CEREALE] - apporto F.E.}
# F_arr_ricalcolato_QM_FE = (F_arr_ric - app_CER_man) - app_FP_man
# F_arr_ricalcolato_QM_FE = F_arr_ricalcolato - app_FP_man

            F_arr = F_arr_ricalcolato_QM_FE
        
            print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI>, <CEREALI> e <FONTI PROTEICHE>')
            print('')
            print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
            print('')
            if metodo == '_CNCPS_':
                print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
            else:
                print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')                            
            print(F_arr)            

    
        elif Q and QFP and not QM:
# FORAGGIO + FE:
# F_arr_ricalcolato_FE = [(F_arr - apporto FORAGGIO) - apporto F.E.]
# F_arr_ricalcolato_FE = F_arr_ric - app_FP_man

            F_arr = F_arr_ricalcolato_FE
        
            print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI> e <FONTI PROTEICHE>')
            print('')      
            print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
            print('')
            if metodo == '_CNCPS_':
                print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
            else:
                print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')                            
            print(F_arr)

    
        elif Q and QM and not QFP:
# FORAGGIO + GRANELLA:
# F_arr_ricalcolato = [(F_arr - apporto FORAGGIO) - apporto CEREALE]
# F_arr_ricalcolato = F_arr_ric - app_CER_man

            F_arr = F_arr_ricalcolato
        
            print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI> e <CEREALI>')
            print('')
            print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
            print('')
            if metodo == '_CNCPS_':
                print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
            else:
                print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')                            
            print(F_arr)


        elif Q and not QM and not QFP: 
# SOLO FORAGGIO:
#       F_arr_ric = (F_arr - apporto FORAGGIO) 

            F_arr = F_arr_ric
        
            print('Hai inserito manualmente solo un alimento della categoria <FORAGGI>')
            print('')
            print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
            print('')
            if metodo == '_CNCPS_':
                print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
            else:
                print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')                            
            print(F_arr)


        elif QM and not Q and not QFP: 
# SOLO CEREALE:
#       F_arr_ric = (F_arr - apporto CEREALE) 

            F_arr = F_arr_cereale
        
            print('Hai inserito manualmente solo un alimento della categoria <FORAGGI>')
            print('')
            print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
            print('')
            if metodo == '_CNCPS_':
                print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
            else:
                print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')                            
            print(F_arr)


        elif QFP and not Q and not QM: 
# SOLO CEREALE:
#       F_arr_ric = (F_arr - apporto F.E.) 

            F_arr = F_arr_FE
        
            print('Hai inserito manualmente solo un alimento della categoria <FORAGGI>')
            print('')
            print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
            print('')
            if metodo == '_CNCPS_':
                print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
            else:
                print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')                            
            print(F_arr)


        
        else:
# NESSUN ALIMENTO INSERITO MANUALMENTE

            F_arr = F_arr
        
            print('Nessun alimento inserito manualmente')


    except NameError:
        print('Parametri non trovati!')


     
#################################################################################################################
################################## 2 ALIMENTI INSERITI AUTOMATICAMENTE ##########################################
#################################################################################################################
                                        
                                        

    if len(S) == 2:
    
        print('')
        print('Questo TESTO viene visualizzato sul terminale, non inserito nel file!')
        print('')
        if day == 'Monday': 
            print('RAZIONE di %s, creata Lunedì %s, %s' % (user, data, current_time))
        if day == 'Tuesday': 
            print('RAZIONE di %s, creata Martedì %s, %s' % (user, data, current_time))
        if day == 'Wednesday': 
            print('RAZIONE di %s, creata Mercoledì %s, %s' % (user, data, current_time))
        if day == 'Thursday': 
            print('RAZIONE di %s, creata Giovedì %s, %s' % (user, data, current_time))
        if day == 'Friday': 
            print('RAZIONE di %s, creata Venerdì %s, %s' % (user, data, current_time))
        if day == 'Saturday': 
            print('RAZIONE di %s, creata Sabato %s, %s' % (user, data, current_time))
        if day == 'Sunday': 
            print('RAZIONE di %s, creata Domenica %s, %s' % (user, data, current_time))

        print('')
        print('Hai inserito SOLO 2 ALIMENTI (scelta sconsigliata!):')
        print('')
        print('ALIMENTO 1 => <%s>' % S[0])
        print('ALIMENTO 2 => <%s>' % S[1])
        print('')
        
        print(ARR[0])
        print(ARR[1])
                     
        random_ARR_0_old = ARR[0] * random.random() * 10
        random_ARR_1_old = ARR[1] * random.random() * 10

        
# ogni alimento scelto dall'utente viene moltiplicato per un numero casuale compreso fra 0 e 10 (kg) 
# dichiaro random_ARR_x_old

        
        random_ARR_0_new = random_ARR_0_old * (random.random() + 0.5)
        random_ARR_1_new = random_ARR_1_old * (random.random() + 0.5)
                
# dichiaro random_ARR_x_new
        
        SOMMA_old = random_ARR_0_old + random_ARR_1_old

###########################################################################################################################################        
        
        print(SOMMA_old)
        print(F_arr)
        
        DELTA_old = SOMMA_old - F_arr
        print('La somma iniziale è...')
        print(SOMMA_old)

# dichiaro SOMMA_old e DELTA_old

        SOMMA_new = random_ARR_0_new + random_ARR_1_new
        DELTA_new = SOMMA_new - F_arr
        print('La nuova somma è...')
        print(SOMMA_new)
        print('La nuova differenza è...')
        print(DELTA_new)

# dichiaro SOMMA_new e DELTA_new
        
        quantità_alimento_1 = random_ARR_0_new / ARR[0]
        quantità_alimento_2 = random_ARR_1_new / ARR[1]
             
# dichiaro gli apporti dei singoli alimenti

        i = 0

# inizializzo il contatore i        
        
        for i in range(N_repl):
        
            rules = [abs(DELTA_new[0]) < abs(DELTA_old[0]), abs(DELTA_new[1]) < abs(DELTA_old[1])]

# dichiaro le regole da rispettare
                                    
            if all(rules):
            
                print('ESTRAGGO DALLA PROPOSAL DISTRIBUTION')
                i += 1
                print(i)
                                                         	               	        
                random_ARR_0_new = random_ARR_0_new * (random.random() + 0.5)
                random_ARR_1_new = random_ARR_1_new * (random.random() + 0.5)
                                               
# ACCETTO random_ARR_x_new e lo uso per aggiornare random_ARR_x_new stesso 
                
                APPORTO_SOSTANZA_SECCA = random_ARR_0_new[0] + random_ARR_1_new[0]
                print(APPORTO_SOSTANZA_SECCA)

# aggiorno l'apporto di SS
                                
                SOMMA_new = random_ARR_0_new + random_ARR_1_new
                DELTA_new = SOMMA_new - F_arr
                
# aggiorno SOMMA_new e DELTA_new                
                
                print('La nuova somma è...')
                print(SOMMA_new)
                print('La nuova differenza è...')
                print(DELTA_new)
            
                quantità_alimento_1 = random_ARR_0_new / ARR[0]
                quantità_alimento_2 = random_ARR_1_new / ARR[1]               
                
                if round(APPORTO_SOSTANZA_SECCA) == round(F_arr[0]):
                
                    break
                                
                print('')                
                print("SUCCESSO! L'APPORTO di Sostanza Secca corrisponde al FABBISOGNO.")
                  	                
            else:
                    
                random_ARR_0_new = random_ARR_0_old * (random.random() + 0.5)
                random_ARR_1_new = random_ARR_1_old * (random.random() + 0.5)
                
                
# RIFIUTO random_ARR_x_new e lo ricalcolo a partire da random_ARR_x_old 
                
                print('FALLIMENTO')
                
                APPORTO_SOSTANZA_SECCA = random_ARR_0_new[0] + random_ARR_1_new[0]
                               
                SOMMA_new = random_ARR_0_new + random_ARR_1_new
                DELTA_new = SOMMA_new - F_arr
                                                
                print('La nuova somma è...')
                print(SOMMA_new)
                print('La nuova differenza è...')
                print(DELTA_new)
                           
                quantità_alimento_1 = random_ARR_0_new / ARR[0]
                quantità_alimento_2 = random_ARR_1_new / ARR[1]
                
                random_ARR_0_new_ROUND = list(map(arrotonda, random_ARR_0_new))
                random_ARR_1_new_ROUND = list(map(arrotonda, random_ARR_1_new))
          

                
############################################################################################################################
################################# metodo => <_CNCPS_> INIZIO DEL REDIREZIONAMENTO DELLA STAMPA #############################
############################################################################################################################

                                                    ### 2 ALIMENTI AUTO ###


           
        original = sys.stdout
        sys.stdout = open('%s.txt' % nome_file_razione, 'w')

        if day == 'Monday': 
            print('RAZIONE di %s, creata Lunedì %s, %s' % (user, data, current_time))
        if day == 'Tuesday': 
            print('RAZIONE di %s, creata Martedì %s, %s' % (user, data, current_time))
        if day == 'Wednesday': 
            print('RAZIONE di %s, creata Mercoledì %s, %s' % (user, data, current_time))
        if day == 'Thursday': 
            print('RAZIONE di %s, creata Giovedì %s, %s' % (user, data, current_time))
        if day == 'Friday': 
            print('RAZIONE di %s, creata Venerdì %s, %s' % (user, data, current_time))
        if day == 'Saturday': 
            print('RAZIONE di %s, creata Sabato %s, %s' % (user, data, current_time))
        if day == 'Sunday': 
            print('RAZIONE di %s, creata Domenica %s, %s' % (user, data, current_time))



        try:

               
            if metodo == '_CNCPS_':
            
            
                            
                # from crea_db_PARAMETRI_L_CNCPS_ import LW, WOL, MY, FAT_milk, CP_milk, LAC_milk, N_repl, giorno_di_inserimento, data_di_inserimento, ora_di_inserimento
                
                print('PARAMETRI inseriti da %s, %s %s alle ore %s' % (user, giorno_di_inserimento, data_di_inserimento, ora_di_inserimento))
                print('') 
                print('METODO DI CALCOLO della razione => <%s>' % metodo)
                print('PESO VIVO MEDIO BOVINE IN LATTAZIONE => %f kg' % LW)
                print('SETTIMANA DI LATTAZIONE media => %d^' % WOL)
                print('LIVELLO PRODUTTIVO medio => %f kg di latte al giorno' % MY)
                print('TENORE DI GRASSO del latte => %fx100' % FAT_milk)
                print('TENORE DI PROTEINA del latte => %fx100' % CP_milk)
                print('TENORE DI LATTOSIO del latte => %fx100' % LAC_milk)
                print('N° DI REPLICHE => %d' % N_repl)
                print('')
        

                F = []
                F.append(DMI)
                F.append(CP)
                F.append(RDP)
                F.append(RUP)
                F.append(FG)
                F.append(NDF)
                F.append(ADF)
                F.append(FAT)
                F.append(AM)
                F.append(ZUC)
                F.append(Ca_tot)
                F.append(P_tot)
                F.append(UFL_tot)


# STAMPA FABBISOGNI _CNCPS_

                print('')
                print('Hai scelto il METODO DI CALCOLO della razione <Cornell %s>' % metodo)    
                print('')
                print('FABBISOGNI')
                print('')    
                print('CAPACITÀ DI INGESTIONE => %f kg di Sostanza Secca' % F[0])
                print('Fabbisogno di <PROTEINA GREZZA> => %f g' % F[1])
                print('Fabbisogno di <PROTEINA DEGRADABILE> => %f g' % F[2])
                print('Fabbisogno di <PROTEINA INDEGRADABILE> => %f g' % F[3])
                print('Fabbisogno di <FIBRA GREZZA> => %f g' % F[4])
                print('Fabbisogno di <NDF> => %f g' % F[5])
                print('Fabbisogno di <ADF> => %f g' % F[6]) 
                print('Fabbisogno di <GRASSO> => %f g' % F[7])
                print('Fabbisogno di <AMIDO> => %f g' % F[8])
                print('Fabbisogno di <ZUCCHERI> => %f g' % F[9])
                print('Fabbisogno di <CALCIO> => %f g' % F[10])
                print('Fabbisogno di <FOSFORO> => %f g' % F[11])
                print('Fabbisogno di <ENERGIA NETTA> => %f Unità Foraggere Latte. \n' % F[12])
                print('')
                


                if Q and QM and QFP:
                
                    F_arr = F_arr_ricalcolato_QM_FE
                
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI>, <CEREALI> e <FONTI PROTEICHE>')
                    print('')
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                              
                    print(F_arr)


                elif Q and QFP:
                
                    F_arr = F_arr_ricalcolato_FE
                
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI> e <FONTI PROTEICHE>')      
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(F_arr)
                

                elif Q and QM and not QFP:

                    F_arr = F_arr_ricalcolato
        
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI> e <CEREALI>')
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')                
                    print(F_arr)              
            

                elif Q and not QM and not QFP: 

                    F_arr = F_arr_ric
        
                    print('Hai inserito manualmente solo un alimento della categoria <FORAGGI>')
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(F_arr)


                else:

                    F_arr = F_arr
        
                    print('Nessun alimento inserito manualmente')
                    print('')
                    print("L'apporto di Sostanza Secca degli alimenti selezionati è %f" % APPORTO_SOSTANZA_SECCA)
                    print('')
                    
                

############################################################################################################################

             

# CASO 1)
# FORAGGIO + MAIS GRANELLA + FE inseriti manualmente
# 2 alimenti inseriti manualmente + 3 alimenti inseriti in automatico => TOT 5
                                                
                if Q and QM and QFP:
                

                    quantità_TOTALE_TAL_QUALE = Q + QM + QFP + quantità_alimento_1[0] + quantità_alimento_2[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_FP_man[0] + app_FOR_man[0] + app_CER_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0]
                    APPORTO_PROTEINA_GREZZA = app_FP_man[1] + app_FOR_man[1] + app_CER_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1]
                    APPORTO_PROTEINA_DEGRADABILE = app_FP_man[2] + app_FOR_man[2] + app_CER_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2]
                    APPORTO_PROTEINA_INDEGRADABILE = app_FP_man[3] + app_FOR_man[3] + app_CER_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3]
                    APPORTO_FIBRA_GREZZA = app_FP_man[4] + app_FOR_man[4] + app_CER_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4]
                    APPORTO_NDF = app_FP_man[5] + app_FOR_man[5] + app_CER_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5]
                    APPORTO_ADF = app_FP_man[6] + app_FOR_man[6] + app_CER_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6]
                    APPORTO_GRASSO = app_FP_man[7] + app_FOR_man[7] + app_CER_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7]
                    APPORTO_AMIDO = app_FP_man[8] + app_FOR_man[8] + app_CER_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8]
                    APPORTO_ZUCCHERI = app_FP_man[9] + app_FOR_man[9] + app_CER_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9]
                    APPORTO_Ca = app_FP_man[10] + app_FOR_man[10] + app_CER_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10]
                    APPORTO_P = app_FP_man[11] + app_FOR_man[11] + app_CER_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11]
                    APPORTO_UFL = app_FP_man[12] + app_FOR_man[12] + app_CER_man[12] + random_ARR_0_new[12] + random_ARR_1_new[12]

                    
                    print('')
                    print('apporti di %s:' % M)
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(app_FOR_man)
                    print('')

                    print('')
                    print('apporti di %s:' % MG)
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(app_CER_man)
                    print('')
                
                    print('apporti di %s:' % FE)
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(app_FP_man)
                    print('')

                    print('apporti di %s:' % S[0])
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(random_ARR_0_new)
                    print('')
                    
                    print('apporti di %s:' % S[1])
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(random_ARR_1_new)
                    print('')
                    
                                                                      
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')
                    print('%f kg %s' % (QM, MG))                                         
                    print('%f kg %s' % (Q, M))
                    print('%f kg %s' % (QFP, FE))
                                            
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    
                                

############################################################################################################################


# CASO 2)
# FORAGGIO + FE inseriti manualmente
                  
                elif Q and QFP:


                    quantità_TOTALE_TAL_QUALE = Q + QFP + quantità_alimento_1[0] + quantità_alimento_2[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_FP_man[0] + app_FOR_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0]
                    APPORTO_PROTEINA_GREZZA = app_FP_man[1] + app_FOR_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1]
                    APPORTO_PROTEINA_DEGRADABILE = app_FP_man[2] + app_FOR_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2]
                    APPORTO_PROTEINA_INDEGRADABILE = app_FP_man[3] + app_FOR_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3]
                    APPORTO_FIBRA_GREZZA = app_FP_man[4] + app_FOR_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4]
                    APPORTO_NDF = app_FP_man[5] + app_FOR_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5]
                    APPORTO_ADF = app_FP_man[6] + app_FOR_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6]
                    APPORTO_GRASSO = app_FP_man[7] + app_FOR_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7]
                    APPORTO_AMIDO = app_FP_man[8] + app_FOR_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8]
                    APPORTO_ZUCCHERI = app_FP_man[9] + app_FOR_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9]
                    APPORTO_Ca = app_FP_man[10] + app_FOR_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10]
                    APPORTO_P = app_FP_man[11] + app_FOR_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11]
                    APPORTO_UFL = app_FP_man[12] + app_FOR_man[12] + random_ARR_0_new[12] + random_ARR_1_new[12]

                      
                    print('')
                    print('apporti di %s:' % M)
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(app_FOR_man)
                    print('')
                
                    print('apporti di %s:' % FE)
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(app_FP_man)
                    print('')

                    print('apporti di %s:' % S[0])
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(random_ARR_1_new)
                    print('')
                    
               
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')                                    
                    print('%f kg %s' % (Q, M))
                    print('%f kg %s' % (QFP, FE))
                                        
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                                


############################################################################################################################


# CASO 3)
# INSILATO MAIS e MAIS GRANELLA inseriti manualmente
            
                elif Q and QM and not QFP:

                                        
                
                    quantità_TOTALE_TAL_QUALE = Q + QM + quantità_alimento_1[0] + quantità_alimento_2[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_CER_man[0] + app_FOR_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0]
                    APPORTO_PROTEINA_GREZZA = app_CER_man[1] + app_FOR_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1]
                    APPORTO_PROTEINA_DEGRADABILE = app_CER_man[2] + app_FOR_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2]
                    APPORTO_PROTEINA_INDEGRADABILE = app_CER_man[3] + app_FOR_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3]
                    APPORTO_FIBRA_GREZZA = app_CER_man[4] + app_FOR_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4]
                    APPORTO_NDF = app_CER_man[5] + app_FOR_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5]
                    APPORTO_ADF = app_CER_man[6] + app_FOR_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6]
                    APPORTO_GRASSO = app_CER_man[7] + app_FOR_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7]
                    APPORTO_AMIDO = app_CER_man[8] + app_FOR_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8]
                    APPORTO_ZUCCHERI = app_CER_man[9] + app_FOR_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9]
                    APPORTO_Ca = app_CER_man[10] + app_FOR_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10]
                    APPORTO_P = app_CER_man[11] + app_FOR_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11]
                    APPORTO_UFL = app_CER_man[12] + app_FOR_man[12] + random_ARR_0_new[12] + random_ARR_1_new[12]


                    print('')
                    print('apporti di %s:' % M)
                    print('')
                    print(app_FOR_man)
                    print('')
                    print('apporti di %s:' % MG)
                    print('')
                    print(app_CER_man)
                    print('')                     
                                              
                    print('apporti di %s:' % S[0])
                    print('')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print(random_ARR_1_new)
                    print('')
                    
               
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')
                    print('%f kg %s' % (QM, MG))                                         
                    print('%f kg %s' % (Q, M))
                                        
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                                        
            

############################################################################################################################


# CASO 4)
# SOLO FORAGGIO:
                
                elif Q and not QM and not QFP: 


                    quantità_TOTALE_TAL_QUALE = Q + quantità_alimento_1[0] + quantità_alimento_2[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_FOR_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0]
                    APPORTO_PROTEINA_GREZZA = app_FOR_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1]
                    APPORTO_PROTEINA_DEGRADABILE = app_FOR_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2]
                    APPORTO_PROTEINA_INDEGRADABILE = app_FOR_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3]
                    APPORTO_FIBRA_GREZZA = app_FOR_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4]
                    APPORTO_NDF = app_FOR_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5]
                    APPORTO_ADF = app_FOR_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6]
                    APPORTO_GRASSO = app_FOR_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7]
                    APPORTO_AMIDO = app_FOR_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8]
                    APPORTO_ZUCCHERI = app_FOR_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9]
                    APPORTO_Ca = app_FOR_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10]
                    APPORTO_P = app_FOR_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11]
                    APPORTO_UFL = app_FOR_man[12] + random_ARR_0_new[12] + random_ARR_1_new[12]


                    print('')
                    print('apporti di %s:' % M)
                    print('')
                    print(app_FOR_man)
                    print('')  
                                    
                    print('apporti di %s:' % S[0])
                    print('')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print(random_ARR_1_new)
                    print('')
                    
                                                
                    print('La razione fornisce %f kg di %s' % (Q, M))

                    print('')
                    print("Prezzo dell'alimento <%s> => %f EURO/ton" % (M, prezzo_FORAGGIO_quantità))
                  
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')                   
                    print('%f kg %s' % (Q, M))
                                        
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                                                  


############################################################################################################################


# CASO 5)
# SOLO CEREALE:

                elif QM and not Q and not QFP: 


                    quantità_TOTALE_TAL_QUALE = QM + quantità_alimento_1[0] + quantità_alimento_2[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_CER_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0]
                    APPORTO_PROTEINA_GREZZA = app_CER_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1]
                    APPORTO_PROTEINA_DEGRADABILE = app_CER_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2]
                    APPORTO_PROTEINA_INDEGRADABILE = app_CER_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3]
                    APPORTO_FIBRA_GREZZA = app_CER_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4]
                    APPORTO_NDF = app_CER_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5]
                    APPORTO_ADF = app_CER_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6]
                    APPORTO_GRASSO = app_CER_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7]
                    APPORTO_AMIDO = app_CER_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8]
                    APPORTO_ZUCCHERI = app_CER_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9]
                    APPORTO_Ca = app_CER_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10]
                    APPORTO_P = app_CER_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11]
                    APPORTO_UFL = app_CER_man[12] + random_ARR_0_new[12] + random_ARR_1_new[12]


                    print('')
                    print('apporti di %s:' % MG)
                    print('')
                    print(app_CER_man)
                    print('')  
                                
                    print('apporti di %s:' % S[0])
                    print('')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print(random_ARR_1_new)
                    print('')
                    
                
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')
                    print('%f kg %s' % (QM, MG))                                         
                                        
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                                                    


############################################################################################################################

# CASO 6)
# NESSUN ALIMENTO INSERITO MANUALMENTE

                else:


                    quantità_TOTALE_TAL_QUALE = quantità_alimento_1[0] + quantità_alimento_2[0]
                    APPORTO_PROTEINA_GREZZA = random_ARR_0_new[1] + random_ARR_1_new[1]
                    APPORTO_PROTEINA_DEGRADABILE = random_ARR_0_new[2] + random_ARR_1_new[2]
                    APPORTO_PROTEINA_INDEGRADABILE = random_ARR_0_new[3] + random_ARR_1_new[3]
                    APPORTO_FIBRA_GREZZA = random_ARR_0_new[4] + random_ARR_1_new[4]
                    APPORTO_NDF = random_ARR_0_new[5] + random_ARR_1_new[5]
                    APPORTO_ADF = random_ARR_0_new[6] + random_ARR_1_new[6]
                    APPORTO_GRASSO = random_ARR_0_new[7] + random_ARR_1_new[7]
                    APPORTO_AMIDO = random_ARR_0_new[8] + random_ARR_1_new[8]
                    APPORTO_ZUCCHERI = random_ARR_0_new[9] + random_ARR_1_new[9]
                    APPORTO_Ca = random_ARR_0_new[10] + random_ARR_1_new[10]
                    APPORTO_P = random_ARR_0_new[11] + random_ARR_1_new[11]
                    APPORTO_UFL = random_ARR_0_new[12] + random_ARR_1_new[12]


                    print('apporti di %s:' % S[0])
                    print('')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print(random_ARR_1_new)
                    print('')
                                    
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')
                                                                              
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                                                    

         
############################################################################################################################

#           if metodo == '_CNCPS_':
                    
                A = []
                A.append(APPORTO_DEFINITIVO_SOSTANZA_SECCA)
                A.append(APPORTO_PROTEINA_GREZZA)
                A.append(APPORTO_PROTEINA_DEGRADABILE)
                A.append(APPORTO_PROTEINA_INDEGRADABILE)
                A.append(APPORTO_FIBRA_GREZZA)
                A.append(APPORTO_NDF)
                A.append(APPORTO_ADF)
                A.append(APPORTO_GRASSO)
                A.append(APPORTO_AMIDO)
                A.append(APPORTO_ZUCCHERI)
                A.append(APPORTO_Ca)
                A.append(APPORTO_P)
                A.append(APPORTO_UFL)
        
                with open('%s.txt' % nome_file_apporti, 'w') as external_file:
                    print(A, file=external_file)
                external_file.close()
        
                DELTA_SOSTANZA_SECCA = APPORTO_DEFINITIVO_SOSTANZA_SECCA - F[0]
                DELTA_PROTEINA_GREZZA = APPORTO_PROTEINA_GREZZA - F[1]
                DELTA_PROTEINA_DEGRADABILE = APPORTO_PROTEINA_DEGRADABILE - F[2]
                DELTA_PROTEINA_INDEGRADABILE = APPORTO_PROTEINA_INDEGRADABILE - F[3]
                DELTA_FIBRA_GREZZA = APPORTO_FIBRA_GREZZA - F[4]
                DELTA_NDF = APPORTO_NDF - F[5]
                DELTA_ADF = APPORTO_ADF - F[6]
                DELTA_GRASSO = APPORTO_GRASSO - F[7]
                DELTA_AMIDO = APPORTO_AMIDO - F[8]
                DELTA_ZUCCHERI = APPORTO_ZUCCHERI - F[9]
                DELTA_Ca = APPORTO_Ca - F[10]
                DELTA_P = APPORTO_P - F[11]
                DELTA_UFL = APPORTO_UFL - F[12]
        
                              
                print('')
                print('')
                if i == N_repl-1:
                    print('Il calcolo della razione non ha avuto SUCCESSO; per favore cancella gli alimenti inseriti e riprova.')
                elif i < N_repl-1:
                    print('Il CALCOLO DELLA RAZIONE è stato effettuato con SUCCESSO alla %d^ replica!' % i)        
                print('')
        
                        
                print("Il FABBISOGNO DI SOSTANZA SECCA (che dev'essere soddisfatto dagli alimenti aggiunti) delle bovine del gruppo <%s> è di %f kg" %  (gruppo, F_arr[0]))
                print('')
                print("L'APPORTO DI SOSTANZA SECCA degli alimenti selezionati è di %f kg" % APPORTO_SOSTANZA_SECCA)
                print('')
                

                print('')        
                print('LEGENDA')
                print('')
                print("DM => Dry Matter (Apporto di Sostanza Secca)")
                print("CP => Crude Protein (Apporto di PROTEINA GREZZA)")
                print("RDP => Rumen Degradable Protein (Apporto di PROTEINA DEGRADABILE)")
                print("RUP => Rumen Undegradable Protein (Apporto di PROTEINA INDEGRADABILE)")
                print("FG => FIBRA GREZZA (apporto di FIBRA GREZZA)")
                print("NDF => NDF (apporto di Fibra resistente al Detergente Neutro)")
                print("ADF => ADF (apporto di Fibra resistente al Detergente Acido)")
                print("FAT => Fat (apporto di GRASSO)")
                print("AM => AMIDO (apporto di AMIDO)")
                print("ZUC => ZUCCHERI (apporto di ZUCCHERI)")
                print("Ca => Calcio (apporto di Calcio)")
                print("P => Fosforo (apporto di Fosforo)")
                print("UFL => Unità Foraggere Latte (apporto di Energia Netta)")
                print('')
                print('')
                print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')


                if len(PREZZI) == len(S):

                    print('')
                    for i in list(range(len(PREZZI))):
                        print("Prezzo dell'alimento <%s> => %f EURO/ton" % (S[i], PREZZI[i]))
                    print('')
                    print('********************************************************************')
                    print('')
                else:
                    print('Impossibile creare la TABELLA DEI PREZZI: ci sono uno o più alimenti non quotati!')


            
                if len(PREZZI) == len(S):

            
                    costo_alimento_1 = quantità_alimento_1[0] * PREZZI[0] / 1000
                    costo_alimento_2 = quantità_alimento_2[0] * PREZZI[1] / 1000
                               
                    COSTO_RAZIONE = []            
                    COSTO_RAZIONE.append(costo_alimento_1)
                    COSTO_RAZIONE.append(costo_alimento_2)                                  

            
                    if Q and not QM and not QFP:
                            
                        if type(costo_FORAGGIO_quantità) is float: 
                            COSTO_RAZIONE.append(costo_FORAGGIO_quantità)
                            print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))                                                       
                            print("Costo dell'alimento <%s>: %f EURO" % (M, costo_FORAGGIO_quantità))

                        else:
                            print("Il prezzo dell'alimento <%s> non è disponibile!" % M) 

                
                    elif QM and not Q and not QFP:                
                
                        if type(costo_CEREALE_quantità) is float:
                            COSTO_RAZIONE.append(costo_CEREALE_quantità)  
                            print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))                                                    
                            print("Costo dell'alimento <%s>: %f EURO" % (MG, costo_CEREALE_quantità))

                        else:
                            print("Il prezzo dell'alimento <%s> non è disponibile!" % MG) 

            
                    elif QFP and not Q and not QM:
                
                        if type(costo_FONTE_PROTEICA_quantità) is float:
                            COSTO_RAZIONE.append(costo_FONTE_PROTEICA_quantità)
                            print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))                      
                            print("Costo dell'alimento <%s>: %f EURO" % (FE, costo_FONTE_PROTEICA_quantità))
                        else:
                            print("Il prezzo dell'alimento <%s> non è disponibile!" % FE)

            
                    elif Q and QM and not QFP:
                
                        if type(costo_FORAGGIO_quantità) is float and type(costo_CEREALE_quantità) is float: 
                            COSTO_RAZIONE.append(costo_FORAGGIO_quantità)
                            COSTO_RAZIONE.append(costo_CEREALE_quantità)  
                            print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))                                        
                            print("Costo dell'alimento <%s>: %f EURO" % (M, costo_FORAGGIO_quantità))
                            print("Costo dell'alimento <%s>: %f EURO" % (MG, costo_CEREALE_quantità))                        
                    
                        else:
                            print("Il prezzo dell'alimento <%s> e/o dell'alimento <%s> non è disponibile!" % (M, MG))

            
                    elif Q and QFP:
                    
                        if type(costo_FORAGGIO_quantità) is float and type(costo_FONTE_PROTEICA_quantità) is float:  
                            COSTO_RAZIONE.append(costo_FORAGGIO_quantità)
                            COSTO_RAZIONE.append(costo_FONTE_PROTEICA_quantità)
                            print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))            
                            print("Costo dell'alimento <%s>: %f EURO" % (M, costo_FORAGGIO_quantità))
                            print("Costo dell'alimento <%s>: %f EURO" % (FE, costo_FONTE_PROTEICA_quantità))

                        else:
                            print("Il prezzo dell'alimento <%s> e/o dell'alimento <%s> non è disponibile!" % (M, FE))

                
                    elif QM and QFP and not Q:
                
                        if type(costo_CEREALE_quantità) is float and type(costo_FONTE_PROTEICA_quantità) is float:
                            COSTO_RAZIONE.append(costo_CEREALE_quantità) 
                            COSTO_RAZIONE.append(costo_FONTE_PROTEICA_quantità)
                            print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))   
                            print("Costo dell'alimento <%s>: %f EURO" % (MG, costo_CEREALE_quantità))
                            print("Costo dell'alimento <%s>: %f EURO" % (FE, costo_FONTE_PROTEICA_quantità)) 
                        else:
                            print("Il prezzo dell'alimento <%s> e/o dell'alimento <%s> non è disponibile!" % (MG, FE))
                                           
                   
                    elif Q and QM and QFP:
                        if type(costo_FORAGGIO_quantità) is float and type(costo_CEREALE_quantità) is float and type(costo_FONTE_PROTEICA_quantità) is float:
                            COSTO_RAZIONE.append(costo_FORAGGIO_quantità)
                            COSTO_RAZIONE.append(costo_CEREALE_quantità)                                   
                            COSTO_RAZIONE.append(costo_FONTE_PROTEICA_quantità)

                            print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                            print("Costo dell'alimento <%s>: %f EURO" % (M, costo_FORAGGIO_quantità))                     
                            print("Costo dell'alimento <%s>: %f EURO" % (MG, costo_CEREALE_quantità))
                            print("Costo dell'alimento <%s>: %f EURO" % (FE, costo_FONTE_PROTEICA_quantità)) 
                        else:
                            print("Il prezzo dell'alimento <%s> e/o dell'alimento <%s> e/o dell'alimento <%s> non è disponibile!" % (M, MG, FE))
                                           
                    COSTO_TOTALE = sum(COSTO_RAZIONE)
                    print('')
                    print('Il costo della razione è %f EURO' % COSTO_TOTALE)
                    if COSTO_TOTALE > PREZZO_MAX:
                        print('Il COSTO TOTALE della razione è > del PREZZO MASSIMO che hai impostato!')
                        print('Prova a scegliere altri alimenti e ricalcola la RAZIONE')
            
            
                else:
                    print('Non posso calcolare il COSTO DELLA RAZIONE: ci sono uno o più alimenti non quotati!') 
            
            
                print('')                
                print('La razione fornisce %f kg di alimento tal quale' % quantità_TOTALE_TAL_QUALE)
                print('La razione fornisce %f kg di Sostanza Secca' % APPORTO_DEFINITIVO_SOSTANZA_SECCA)
                print('')
                print('')
                print('_______________________________________________________________________________________________')
                print('|                         |                    |                         |                    |')
                print('|                         |                    |                         |                    |')
                print('|   PRINCIPIO NUTRITIVO   |      APPORTO       |       Fabbisogno        |     DIFFERENZA     |')
                print('|                         |                    |                         |                    |')
                print('|_________________________|____________________|_________________________|____________________|')
                print('|      Sostanza Secca     |     %f kg   |  %f kg           |  %f kg       |' % (APPORTO_DEFINITIVO_SOSTANZA_SECCA, F[0], DELTA_SOSTANZA_SECCA))
                print('|      PROTEINA GREZZA    |   %f g    |%f g            |%f g        |' % (APPORTO_PROTEINA_GREZZA, F[1], DELTA_PROTEINA_GREZZA))
                print('|   PROTEINA DEGRADABILE  |   %f g    |%f g            |%f g        |' % (APPORTO_PROTEINA_DEGRADABILE, F[2], DELTA_PROTEINA_DEGRADABILE))
                print('| PROTEINA INDEGRADABILE  |   %f g    |%f g            |%f g        |' % (APPORTO_PROTEINA_INDEGRADABILE, F[3], DELTA_PROTEINA_INDEGRADABILE))
                print('|      FIBRA GREZZA       |   %f g    |%f g            |%f g        |' % (APPORTO_FIBRA_GREZZA, F[4], DELTA_FIBRA_GREZZA))
                print('|           NDF           |   %f g    |%f g            |%f g        |' % (APPORTO_NDF, F[5], DELTA_NDF))
                print('|           ADF           |   %f g    |%f g            |%f g        |' % (APPORTO_ADF, F[6], DELTA_ADF))
                print('|         GRASSO          |   %f g    |%f g            |%f g        |' % (APPORTO_GRASSO, F[7], DELTA_GRASSO)) 
                print('|          AMIDO          |   %f g    |%f g            |%f g        |' % (APPORTO_AMIDO, F[8], DELTA_AMIDO))
                print('|        ZUCCHERI         |    %f g    |%f g            |%f g       |' % (APPORTO_ZUCCHERI, F[9], DELTA_ZUCCHERI))
                print('|           Ca            |   %f g      |  %f g           |  %f g     |' % (APPORTO_Ca, F[10], DELTA_Ca))        
                print('|            P            |   %f g      |  %f g            |  %f g      |' % (APPORTO_P, F[11], DELTA_P))        
                print('|           UFL           |     %f      | %f               | %f           |' % (APPORTO_UFL, F[12], DELTA_UFL))        
                print('_______________________________________________________________________________________________')
                print('')
                print('                                               *     *     *                                   ')
                print('')
                print('')
                print('')
                print('******************************************** SOSTANZA SECCA ********************************************')
                print('')
                print('La razione fornisce %f kg di alimento tal quale' % quantità_TOTALE_TAL_QUALE)
                print('')
                print('La razione fornisce %f kg di Sostanza Secca' % APPORTO_DEFINITIVO_SOSTANZA_SECCA)                
                print('')
                DMI_AS_FED_ratio = (APPORTO_DEFINITIVO_SOSTANZA_SECCA/quantità_TOTALE_TAL_QUALE)*100
                print('La tua RAZIONE contiene il %fx100 di SOSTANZA SECCA' % DMI_AS_FED_ratio)
                print('')
                if DMI_AS_FED_ratio < 0.6:
                    print('')
                    print('In estate, in caso di COMPETIZIONE ALIMENTARE x un N° INSUFFICIENTE DI AUTOCATTURANTI (= BOVINE IN PIEDI),')
                    print('se prepari un CARRO MISCELATORE con, per es., un 10x100 in più di razioni (per es., con 100')
                    print('BOVINE IN LATTAZIONE metto nel carro 110 RAZIONI), dal momento che la miscelata rimarrà per più tempo in')
                    print('mangiatoia, potrebbe scaldarsi!')
                    print("Prova a RIDURRE UN PO' L'APPORTO COMPLESSIVO DI FORAGGIO, insilato, per aumentare la SS della razione,")
                    print("o fieno (dipende da che tipo di FORAGGIo hai inserito manualmente), per forzare il programma ad")
                    print("AUMENTARE L'APPORTO DELLA FONTE DI FIBRA DIGERIBILE")
                    print("In questo modo, si dovrebbe attenuare la riduzione dell'ingestione volontaria di fibra scarsamente")
                    print("digeribile (poiché più o meno lignificata), nonché il conseguente CALO DEL TENORE IN GRASSO del latte")
                    print("Tieni anche conto del fatto che, riducendo l'apporto della cosiddetta <FIBRA FISICAMENTE EFFICACE>")
                    print("(quella dei FORAGGI, che fa ruminare), LE BOVINE PRODURRANNO MENO SALIVA (che è il tampone naturale")
                    print("del rumine) e, quindi, dovrai valutare l'inserimento di un TAMPONE ARTIFICIALE, come il bicarbonato")
                    print("di calcio o di sodio, nella razione")    
                print('')
                print('')
                print('******************************************** PROTEINA GREZZA ********************************************')
                print('')
                APPORTO_DEFINITIVO_SOSTANZA_SECCA_g = APPORTO_DEFINITIVO_SOSTANZA_SECCA * 1000
                CP_DMI_ratio = APPORTO_PROTEINA_GREZZA/APPORTO_DEFINITIVO_SOSTANZA_SECCA_g
                print('Rapporto (PROTEINA GREZZA : Sostanza Secca) => %f' % CP_DMI_ratio)
                print('')
                print("Secondo Dell'Orto e Savoini, ad inizio lattazione dovrebbe essere ~ 0.18 (18%)")
                print('')
                if CP_DMI_ratio <= 0.17:
                    print("L'apporto di PROTEINA GREZZA è insufficiente")
                    print("Se avevi scelto una fonte proteica diversa dalla <F.E. DI SOIA>, sostituiscila con quest'ultima!")
                    print("Se non basta, prova a sostituire il fieno di prato stabile o l'insilato di loietto con il <FIENO DI ERBA MEDICA e/o a ridurre l'apporto di insilato (o di pastone) di mais>")         
                print('')
                print('')
                print('********************************************** FIBRA GREZZA **********************************************')
                print('')                       
                FG_DMI_ratio = APPORTO_FIBRA_GREZZA/APPORTO_DEFINITIVO_SOSTANZA_SECCA_g
                print('')                     
                FG_DMI_ratio = APPORTO_FIBRA_GREZZA/APPORTO_DEFINITIVO_SOSTANZA_SECCA_g
                print('')
                print('Rapporto (FIBRA GREZZA : Sostanza Secca) => %f' % FG_DMI_ratio)
                print('')
                print('Dovrebbe essere ~ 0.17 (17%)')
                print('')
                # print('********************************************** NDF **********************************************')  
                APPORTO_NDF_FORAGGI = app_FOR_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3]
                NDF_FORAGGI_NDF_tot_ratio = APPORTO_NDF_FORAGGI/APPORTO_NDF
#           print('Rapporto (NDF da FORAGGI : NDF totale) => %f' % NDF_FORAGGI_NDF_tot_ratio)
#           print('')
#           print('Dovrebbe essere ~ 0.75 (75%)')
                print('')
                print('')           
                print('')
                print('***********************************************************************************************************')
                print('********************************************* FINE DEL REPORT *********************************************')
                print('***********************************************************************************************************')
                
                sys.stdout = original



############################################################################################################################
###################### 2 alimenti auto - metodo => <LYS_MET> INIZIO DEL REDIREZIONAMENTO DELLA STAMPA ######################
############################################################################################################################

                                                    ### 2 ALIMENTI AUTO ###


            elif metodo == 'LYS_MET':



                original = sys.stdout
                sys.stdout = open('%s.txt' % nome_file_razione, 'w')


                
                print('PARAMETRI inseriti da %s, %s %s alle ore %s' % (user, giorno_di_inserimento, data_di_inserimento, ora_di_inserimento))
                print('') 
                print('METODO DI CALCOLO della razione => <%s>' % metodo)
                print('PESO MEDIO ALLA NASCITA => %f kg' % calf_weight)
                print('PESO VIVO MEDIO BOVINE IN LATTAZIONE => %f kg' % LW)
                print('ETÀ MEDIA BOVINE IN LATTAZIONE => %d mesi' % cow_age)
                print('SETTIMANA DI LATTAZIONE media => %d^' % WOL)
                print('SETTIMANA DI GRAVIDANZA media => %d^' % WOP)
                print('LIVELLO PRODUTTIVO medio => %f kg di latte al giorno' % MY)
                print('TENORE DI GRASSO del latte => %fx100' % FAT_milk)
                print('TENORE DI PROTEINA del latte => %fx100' % CP_milk)
                print('TENORE DI LATTOSIO del latte => %fx100' % LAC_milk)
                print('N° DI REPLICHE => %d' % N_repl)
        

                F = []
                F.append(DMI)
                F.append(CP)
                F.append(FG)
                F.append(NDF)
                F.append(ADF)
                F.append(FAT)
                F.append(AM)
                F.append(ZUC)
                F.append(Ca_tot)
                F.append(P_tot)
                F.append(UFL_tot)
                F.append(PDI)


# STAMPA FABBISOGNI LYS_MET

                print('')
                print('')
                print('FABBISOGNI calcolati secondo il METODO <INRA %s>' % metodo)
                print('')
                print('CAPACITÀ DI INGESTIONE => %f kg di Sostanza Secca' % F[0])
                print('Fabbisogno di PROTEINA GREZZA => %f g' % F[1])
                print('Fabbisogno di FIBRA GREZZA => %f g' % F[2])
                print('Fabbisogno di NDF => %f g' % F[3])
                print('Fabbisogno di ADF => %f g' % F[4]) 
                print('Fabbisogno di GRASSO => %f g' % F[5])
                print('Fabbisogno di AMIDO => %f g' % F[6])
                print('Fabbisogno di ZUCCHERI => %f g' % F[7])
                print('Fabbisogno di CALCIO => %f g' % F[8])
                print('Fabbisogno di FOSFORO => %f g' % F[9])
                print('Fabbisogno di ENERGIA NETTA => %f Unità Foraggere Latte' % F[10])
                print('Fabbisogno di PROTEINA  DIGERIBILE INTESTINALE => %f g' % F[11])
                print('')
                


############################################################################################################################
################################### SINGOLI CASI MANTENUTI PER EVENTUALI SVILUPPI FUTURI ###################################
############################################################################################################################



############################################################################################################################            
# METODO <LYS_MET>
# 2 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 1)
# FORAGGIO + MAIS GRANELLA + FONTE PROTEICA inseriti manualmente
# 3 alimenti inseriti manualmente + 2 alimenti inseriti in automatico => TOT 5

                if Q and QM and QFP:
                                           
                    F_arr = F_arr_ricalcolato_QM_FE
                
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI>, <CEREALI> e <FONTI PROTEICHE>')
                    print('')
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DM in kg, ENERGIA NETTA in UFL, tutti gli altri PARAMETRI (CP, FG, NDF, ADF, FAT, AM, ZUC, Ca, P e PDI) in grammi') 
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                              
                    print(F_arr)



############################################################################################################################            
# METODO <LYS_MET>
# 2 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 2)
# FORAGGIO + FONTE PROTEICA inseriti manualmente
# 2 alimenti inseriti manualmente + 2 alimenti inseriti in automatico => TOT 4

                elif Q and QFP:

                    
                    F_arr = F_arr_ricalcolato_FE
                    
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI> e <FONTI PROTEICHE>')      
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(F_arr)
                        
                

############################################################################################################################            
# METODO <LYS_MET>
# 2 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 3)
# FORAGGIO + CEREALE inseriti manualmente
# 2 alimenti inseriti manualmente + 2 alimenti inseriti in automatico => TOT 4

                elif Q and QM and not QFP:

                    F_arr = F_arr_ricalcolato
        
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI> e <CEREALI>')
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')                    
                    print(F_arr)
                                     
            

############################################################################################################################            
# METODO <LYS_MET>
# 2 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 4)
# FORAGGIO inserito manualmente
# 1 alimento inserito manualmente + 2 alimenti inseriti in automatico => TOT 3

                elif Q and not QM and not QFP:
        

                    F_arr = F_arr_FORAGGIo
        
                    print('Hai inserito manualmente solo un alimento della categoria <FORAGGI>')
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(F_arr)



############################################################################################################################            
# METODO <LYS_MET>
# 2 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 5)
# CEREALE inserito manualmente
# 1 alimento inserito manualmente + 2 alimenti inseriti in automatico => TOT 3

                elif QM and not Q and not QFP:                                
            
                    F_arr = F_arr_cereale
                     
                    print('Hai inserito manualmente solo un alimento della categoria <CEREALI>')
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(F_arr)



############################################################################################################################            
# METODO <LYS_MET>
# 2 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 6)
# FONTE PROTEICA inserita manualmente
# 1 alimento inserito manualmente + 2 alimenti inseriti in automatico => TOT 3

                elif QFP and not Q and not QM:
                        
            
                    F_arr = F_arr_FE
                     
                    print('Hai inserito manualmente solo un alimento della categoria <FONTI PROTEICHE>')
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(F_arr)


############################################################################################################################            
# METODO <LYS_MET>
# 2 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 7)
# NESSUN ALIMENTO inserito manualmente
# 0 alimenti inseriti manualmente + 2 alimenti inseriti in automatico => TOT 2

                else:

                    F_arr = F_arr
        
                    print('Nessun alimento inserito manualmente')


                print('')
                print("L'apporto di Sostanza Secca degli alimenti selezionati è %f" % APPORTO_SOSTANZA_SECCA)
                print('')
                


############################################################################################################################            
# METODO <LYS_MET>
# 2 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 1)
# FORAGGIO + MAIS GRANELLA + FONTE PROTEICA inseriti manualmente
# 3 alimenti inseriti manualmente + 2 alimenti inseriti in automatico => TOT 5


                if Q and QM and QFP:
                
                
                
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI>, <CEREALI> e <FONTI PROTEICHE>')
                

                    quantità_TOTALE_TAL_QUALE = Q + QM + QFP + quantità_alimento_1[0] + quantità_alimento_2[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_FP_man[0] + app_FOR_man[0] + app_CER_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0]
                    APPORTO_PROTEINA_GREZZA = app_FP_man[1] + app_FOR_man[1] + app_CER_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1]
                    APPORTO_FIBRA_GREZZA = app_FP_man[2] + app_FOR_man[2] + app_CER_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2]
                    APPORTO_NDF = app_FP_man[3] + app_FOR_man[3] + app_CER_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3]
                    APPORTO_ADF = app_FP_man[4] + app_FOR_man[4] + app_CER_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4]
                    APPORTO_GRASSO = app_FP_man[5] + app_FOR_man[5] + app_CER_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5]
                    APPORTO_AMIDO = app_FP_man[6] + app_FOR_man[6] + app_CER_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6]
                    APPORTO_ZUCCHERI = app_FP_man[7] + app_FOR_man[7] + app_CER_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7]
                    APPORTO_Ca = app_FP_man[8] + app_FOR_man[8] + app_CER_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8]
                    APPORTO_P = app_FP_man[9] + app_FOR_man[9] + app_CER_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9]
                    APPORTO_UFL = app_FP_man[10] + app_FOR_man[10] + app_CER_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10]
                    APPORTO_PDI = app_FP_man[11] + app_FOR_man[11] + app_CER_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11]
                
                   
                    print('')
                    print('apporti di %s:' % M)
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(app_FOR_man)
                    print('')

                    print('')
                    print('apporti di %s:' % MG)
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(app_CER_man)
                    print('')
                    
                    print('apporti di %s:' % FE)
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(app_FP_man)
                    print('')

                    print('apporti di %s:' % S[0])
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(random_ARR_1_new)
                    print('')
                    
                             
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')
                                                                     
                    print('%f kg %s' % (Q, M))
                    print('%f kg %s' % (QM, MG))
                    print('%f kg %s' % (QFP, FE))
                                                
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))

                                
                    app_PDIE_man = Q_PDIE + QM_PDIE + QFP_PDIE
                    app_PDIN_man = Q_PDIN + QM_PDIN + QFP_PDIN
                    app_LysDI_man = Q_LysDI + QM_LysDI + QFP_LysDI
                    app_MetDI_man = Q_MetDI + QM_MetDI + QFP_MetDI


                    quantità.append(Q)
                    quantità.append(QM)
                    quantità.append(QFP)
                    quantità.append(quantità_alimento_1[0])
                    quantità.append(quantità_alimento_2[0])                  
                    
                    quantità = np.array(quantità)
                    print(quantità)
                    
                    LISINA_TOT = np.sum(LISINA*quantità)
                    METIONINA_TOT = np.sum(METIONINA*quantità)
                    PDIE_TOT = np.sum(PDIE*quantità)
                    PDIN_TOT = np.sum(PDIN*quantità)
                    
                    LYS_MET_ratio = LISINA_TOT/METIONINA_TOT
                    LysDI_ratio = LISINA_TOT/PDIN_TOT
                    MetDI_ratio = METIONINA_TOT/PDIN_TOT
                    
                    
                    print('')
                    print('Apporto TOTALE PDIE => %f g' % PDIE_TOT)
                    print('')
                    print('Apporto TOTALE PDIN => %f g' % PDIN_TOT)
                    print('')
                    print('Rapporto LISINA / METIONINA => %f' % LYS_MET_ratio)
                    print('')
                    print('Rapporto LISINA / PROTEINA DIGERIBILE => %f' % LysDI_ratio)
                    print('')
                    print('Rapporto METIONINA / PROTEINA DIGERIBILE => %f' % MetDI_ratio)
                    print('')

                    

############################################################################################################################            
# METODO <LYS_MET>
# 2 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 2)
# FORAGGIO + FONTE PROTEICA inseriti manualmente
# 2 alimenti inseriti manualmente + 2 alimenti inseriti in automatico => TOT 4
  
                elif Q and QFP:
                
                
                
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI> e <FONTI PROTEICHE>')


                    quantità_TOTALE_TAL_QUALE = Q + QFP + quantità_alimento_1[0] + quantità_alimento_2[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_FP_man[0] + app_FOR_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0]
                    APPORTO_PROTEINA_GREZZA = app_FP_man[1] + app_FOR_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1]
                    APPORTO_FIBRA_GREZZA = app_FP_man[2] + app_FOR_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2]
                    APPORTO_NDF = app_FP_man[3] + app_FOR_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3]
                    APPORTO_ADF = app_FP_man[4] + app_FOR_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4]
                    APPORTO_GRASSO = app_FP_man[5] + app_FOR_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5]
                    APPORTO_AMIDO = app_FP_man[6] + app_FOR_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6]
                    APPORTO_ZUCCHERI = app_FP_man[7] + app_FOR_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7]
                    APPORTO_Ca = app_FP_man[8] + app_FOR_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8]
                    APPORTO_P = app_FP_man[9] + app_FOR_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9]
                    APPORTO_UFL = app_FP_man[10] + app_FOR_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10]
                    APPORTO_PDI = app_FP_man[11] + app_FOR_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11]

                      
                    print('')
                    print('apporti di %s:' % M)
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(app_FOR_man)
                    print('')
                    
                    print('apporti di %s:' % FE)
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(app_FP_man)
                    print('')

                    print('apporti di %s:' % S[0])
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(random_ARR_1_new)
                    print('')
               
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')                                            
                    print('%f kg %s' % (Q, M))
                    print('%f kg %s' % (QFP, FE))
                                                
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))                 
                                
                    print('')
                    print('Rapporto (LISINA / PROTEINA DIGERIBILE) => %f' % LysDI_ratio)
                    print('')
                    print('Rapporto (METIONINA / PROTEINA DIGERIBILE) => %f' % MetDI_ratio)
                    print('')
                    print('Rapporto (LISINA / METIONINA) => %f' % Lys_Met_ratio)
                    print('')
                    if Lys_Met_ratio >= 3.0:
                        print('La razione è carente di METIONINA!')
                        print('')
                        print("Prova a sostituire l'alimento <%s> (CARENTE DI METIONINA) con <girasole farina estrazione>" % FE) 
                                           
                    BFR = (APPORTO_PDI - app_tot_PDIE)/APPORTO_UFL
                    print('')
                    print('La RAZIONE fornisce %f g di PDIN' % APPORTO_PDI)
                    print('')
                    print('La RAZIONE fornisce %f g di PDIE' % app_tot_PDIE)
                    print('')
                    print('Rmic = (PDIN – PDIE)/UFL')
                    print('')
                    print('Rmic = %f' % BFR)
                    print('')
                    if BFR >= -17:
                        
                        print('La RAZIONE è accettabile')
                    else:
                        print('La RAZIONE non è accettabile')
                        print('Prova ad aumentare la quantità di %s' % FE) 



############################################################################################################################            
# METODO <LYS_MET>
# 2 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 3)
# FORAGGIO + CEREALE inseriti manualmente
# 2 alimenti inseriti manualmente + 2 alimenti inseriti in automatico => TOT 4
            
                elif Q and QM and not QFP:
                
                
                
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI> e <CEREALI>')

                                                        
                    quantità_TOTALE_TAL_QUALE = Q + QM + quantità_alimento_1[0] + quantità_alimento_2[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_FOR_man[0] + app_CER_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0]
                    APPORTO_PROTEINA_GREZZA = app_FOR_man[1] + app_CER_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1]
                    APPORTO_FIBRA_GREZZA = app_FOR_man[2] + app_CER_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2]
                    APPORTO_NDF = app_FOR_man[3] + app_CER_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3]
                    APPORTO_ADF = app_FOR_man[4] + app_CER_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4]
                    APPORTO_GRASSO = app_FOR_man[5] + app_CER_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5]
                    APPORTO_AMIDO = app_FOR_man[6] + app_CER_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6]
                    APPORTO_ZUCCHERI = app_FOR_man[7] + app_CER_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7]
                    APPORTO_Ca = app_FOR_man[8] + app_CER_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8]
                    APPORTO_P = app_FOR_man[9] + app_CER_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9]
                    APPORTO_UFL = app_FOR_man[10] + app_CER_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10]
                    APPORTO_PDI = app_FOR_man[11] + app_CER_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11]


                    print('')
                    print('apporti di %s:' % M)
                    print('')
                    print(app_FOR_man)
                    print('')
                    print('apporti di %s:' % MG)
                    print('')
                    print(app_CER_man)
                    print('')        
                                                                          
                    print('apporti di %s:' % S[0])
                    print('')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print(random_ARR_1_new)
                    print('')
                
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')
                    print('%f kg %s' % (QM, MG))                                                 
                    print('%f kg %s' % (Q, M))
                                                
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                        
                  
                    print('')
                    print('Rapporto (LISINA / PROTEINA DIGERIBILE) => %f' % LysDI_ratio)
                    print('')
                    print('Rapporto (METIONINA / PROTEINA DIGERIBILE) => %f' % MetDI_ratio)
                    print('')
                    print('Rapporto (LISINA / METIONINA) => %f' % Lys_Met_ratio)
                    print('')
                    if Lys_Met_ratio >= 3.0:
                        print('La razione è carente di METIONINA!')
                        print('')
                        print("Prova a sostituire l'alimento <%s> (CARENTE DI METIONINA) con <girasole farina estrazione>" % FE) 
                                          
                    BFR = (APPORTO_PDI - app_tot_PDIE)/APPORTO_UFL
                    print('')
                    print('La RAZIONE fornisce %f g di PDIN' % APPORTO_PDI)
                    print('')
                    print('La RAZIONE fornisce %f g di PDIE' % app_tot_PDIE)
                    print('')
                    print('Rmic = (PDIN – PDIE)/UFL')
                    print('')
                    print('Rmic = %f' % BFR)
                    print('')
                    if BFR >= -17:
                        
                        print('La RAZIONE è accettabile')
                    else:
                        print('La RAZIONE non è accettabile')
                        print('Prova ad aumentare la quantità di %s' % FE) 
                    


############################################################################################################################            
# METODO <LYS_MET>
# 2 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 4)
# FORAGGIO inserito manualmente
# 1 alimento inserito manualmente + 2 alimenti inseriti in automatico => TOT 3

                elif Q and not QM and not QFP:
                
  
                
                    print('Hai inserito manualmente un alimento per la categoria <FORAGGI>') 


                    quantità_TOTALE_TAL_QUALE = Q + quantità_alimento_1[0] + quantità_alimento_2[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_FOR_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0]
                    APPORTO_PROTEINA_GREZZA = app_FOR_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1]
                    APPORTO_FIBRA_GREZZA = app_FOR_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2]
                    APPORTO_NDF = app_FOR_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3]
                    APPORTO_ADF = app_FOR_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4]
                    APPORTO_GRASSO = app_FOR_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5]
                    APPORTO_AMIDO = app_FOR_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6]
                    APPORTO_ZUCCHERI = app_FOR_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7]
                    APPORTO_Ca = app_FOR_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8]
                    APPORTO_P = app_FOR_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9]
                    APPORTO_UFL = app_FOR_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10]
                    APPORTO_PDI = app_FOR_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11]


                    print('')
                    print('apporti di %s:' % M)
                    print('')
                    print(app_FOR_man)
                    print('')  
                                        
                    print('apporti di %s:' % S[0])
                    print('')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print(random_ARR_1_new)
                    print('')
                    
                  
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')                       
                    print('%f kg %s' % (Q, M))
                                                
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))         
                   
                    print('')
                    print('Rapporto (LISINA / PROTEINA DIGERIBILE) => %f' % LysDI_ratio)
                    print('')
                    print('Rapporto (METIONINA / PROTEINA DIGERIBILE) => %f' % MetDI_ratio)
                    print('')
                    print('Rapporto (LISINA / METIONINA) => %f' % Lys_Met_ratio)
                    print('')
                    if Lys_Met_ratio >= 3.0:
                        print('La razione è carente di METIONINA!')
                        print('')
                        print("Prova a sostituire l'alimento <%s> (CARENTE DI METIONINA) con <girasole farina estrazione>" % FE) 
                       
                    
                    BFR = (APPORTO_PDI - app_tot_PDIE)/APPORTO_UFL
                    print('')
                    print('La RAZIONE fornisce %f g di PDIN' % APPORTO_PDI)
                    print('')
                    print('La RAZIONE fornisce %f g di PDIE' % app_tot_PDIE)
                    print('')
                    print('Rmic = (PDIN – PDIE)/UFL')
                    print('')
                    print('Rmic = %f' % BFR)
                    print('')
                    if BFR >= -17:
                        
                        print('La RAZIONE è accettabile')
                    else:
                        print('La RAZIONE non è accettabile')
                        print('Prova ad aumentare la quantità di %s' % FE) 
                    


############################################################################################################################            
# METODO <LYS_MET>
# 2 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 5)
# CEREALE inserito manualmente
# 1 alimento inserito manualmente + 2 alimenti inseriti in automatico => TOT 3

                elif QM and not Q and not QFP:
                
                
                
                    print('Hai inserito manualmente un alimento per la categoria <CEREALI>') 



                    quantità_TOTALE_TAL_QUALE = QM + quantità_alimento_1[0] + quantità_alimento_2[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_CER_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0]
                    APPORTO_PROTEINA_GREZZA = app_CER_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1]
                    APPORTO_FIBRA_GREZZA = app_CER_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2]
                    APPORTO_NDF = app_CER_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3]
                    APPORTO_ADF = app_CER_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4]
                    APPORTO_GRASSO = app_CER_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5]
                    APPORTO_AMIDO = app_CER_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6]
                    APPORTO_ZUCCHERI = app_CER_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7]
                    APPORTO_Ca = app_CER_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8]
                    APPORTO_P = app_CER_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9]
                    APPORTO_UFL = app_CER_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10]
                    APPORTO_PDI = app_CER_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11]

                    print('')
                    print('apporti di %s:' % MG)
                    print('')
                    print(app_CER_man)
                    print('')  
                                        
                    print('apporti di %s:' % S[0])
                    print('')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print(random_ARR_1_new)
                    print('')
                    
                
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')
                    print('%f kg %s' % (QM, MG))                                                 
                                                
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    
                    
                    print('')
                    print('Rapporto (LISINA / PROTEINA DIGERIBILE) => %f' % LysDI_ratio)
                    print('')
                    print('Rapporto (METIONINA / PROTEINA DIGERIBILE) => %f' % MetDI_ratio)
                    print('')
                    print('Rapporto (LISINA / METIONINA) => %f' % Lys_Met_ratio)
                    print('')
                    if Lys_Met_ratio >= 3.0:
                        print('La razione è carente di METIONINA!')
                        print('')
                        print("Prova a sostituire l'alimento <%s> (CARENTE DI METIONINA) con <girasole farina estrazione>" % FE) 
                       
                    
                    BFR = (APPORTO_PDI - app_tot_PDIE)/APPORTO_UFL
                    print('')
                    print('La RAZIONE fornisce %f g di PDIN' % APPORTO_PDI)
                    print('')
                    print('La RAZIONE fornisce %f g di PDIE' % app_tot_PDIE)
                    print('')
                    print('Rmic = (PDIN – PDIE)/UFL')
                    print('')
                    print('Rmic = %f' % BFR)
                    print('')
                    if BFR >= -17:
                        
                        print('La RAZIONE è accettabile')
                    else:
                        print('La RAZIONE non è accettabile')
                        print('Prova ad aumentare la quantità di %s' % FE) 
                    



############################################################################################################################            
# METODO <LYS_MET>
# 2 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 7)
# NESSUN ALIMENTO inserito manualmente
# 0 alimenti inseriti manualmente + 2 alimenti inseriti in automatico => TOT 2

                else:
                
                
                
                    print('Non hai inserito manualmente alcun alimento')


                    quantità_TOTALE_TAL_QUALE = quantità_alimento_1[0] + quantità_alimento_2[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = random_ARR_0_new[0] + random_ARR_1_new[0]
                    APPORTO_PROTEINA_GREZZA = random_ARR_0_new[1] + random_ARR_1_new[1]
                    APPORTO_FIBRA_GREZZA = random_ARR_0_new[2] + random_ARR_1_new[2]
                    APPORTO_NDF = random_ARR_0_new[3] + random_ARR_1_new[3]
                    APPORTO_ADF = random_ARR_0_new[4] + random_ARR_1_new[4]
                    APPORTO_GRASSO = random_ARR_0_new[5] + random_ARR_1_new[5]
                    APPORTO_AMIDO = random_ARR_0_new[6] + random_ARR_1_new[6]
                    APPORTO_ZUCCHERI = random_ARR_0_new[7] + random_ARR_1_new[7]
                    APPORTO_Ca = random_ARR_0_new[8] + random_ARR_1_new[8]
                    APPORTO_P = random_ARR_0_new[9] + random_ARR_1_new[9]
                    APPORTO_UFL = random_ARR_0_new[10] + random_ARR_1_new[10]
                    APPORTO_PDI = random_ARR_0_new[11] + random_ARR_1_new[11]



                    print('apporti di %s:' % S[0])
                    print('')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print(random_ARR_1_new)
                    print('')
                    
                    
                    print('')
                    print('Rapporto (LISINA / PROTEINA DIGERIBILE) => %f' % LysDI_ratio)
                    print('')
                    print('Rapporto (METIONINA / PROTEINA DIGERIBILE) => %f' % MetDI_ratio)
                    print('')
                    print('Rapporto (LISINA / METIONINA) => %f' % Lys_Met_ratio)
                    print('')
                    if Lys_Met_ratio >= 3.0:
                        print('La razione è carente di METIONINA!')
                        print('')
                        print("Prova a sostituire l'alimento <%s> (CARENTE DI METIONINA) con <girasole farina estrazione>" % FE) 
                       
                    
                    BFR = (APPORTO_PDI - app_tot_PDIE)/APPORTO_UFL
                    print('')
                    print('La RAZIONE fornisce %f g di PDIN' % APPORTO_PDI)
                    print('')
                    print('La RAZIONE fornisce %f g di PDIE' % app_tot_PDIE)
                    print('')
                    print('Rmic = (PDIN – PDIE)/UFL')
                    print('')
                    print('Rmic = %f' % BFR)
                    print('')
                    if BFR >= -17:
                        
                        print('La RAZIONE è accettabile')
                    else:
                        print('La RAZIONE non è accettabile')
                        print('Prova ad aumentare la quantità di %s' % FE) 
                    

          
############################################################################################################################

        except NameError:
            print('ERRORE!')
            


        if metodo == 'LYS_MET':
            
                
      
            A = []
            A.append(APPORTO_DEFINITIVO_SOSTANZA_SECCA)
            A.append(APPORTO_PROTEINA_GREZZA)
            A.append(APPORTO_FIBRA_GREZZA)
            A.append(APPORTO_NDF)
            A.append(APPORTO_ADF)
            A.append(APPORTO_GRASSO)
            A.append(APPORTO_AMIDO)
            A.append(APPORTO_ZUCCHERI)
            A.append(APPORTO_Ca)
            A.append(APPORTO_P)
            A.append(APPORTO_UFL)
            A.append(APPORTO_PDI)
            
        
            try:
                with open('%s.txt' % nome_file_apporti, 'w') as external_file:
                    print(A, file=external_file)
                external_file.close()
            except NameError:
                with open('nuovi_apporti.txt', 'w') as external_file:
                    print(A, file=external_file)
                external_file.close()
            

            try:
                with open('%s.txt' % nome_file_fabbisogni, 'w') as external_file:
                    print(F, file=external_file)
                external_file.close()
            except NameError:
                with open('nuovi_fabbisogni.txt', 'w') as external_file:
                    print(A, file=external_file)
                external_file.close()

            
            print('')
            print('Ho salvato i PARAMETRI nel FILE DI TESTO <%s.txt>' % nome_file_parametri)
            print('')
            print('Ho salvato i FABBISOGNI nel FILE DI TESTO <%s.txt>' % nome_file_fabbisogni)
            print('')
            print('Ho salvato gli APPORTI nel FILE DI TESTO <%s.txt>' % nome_file_apporti)
            print('')
            print('Ho salvato i DATI nel FILE DI TESTO <%s.py>' % nome_file_dati)
            print('')
            print('Ho salvato le quantità nel FILE DI TESTO <%s.py>' % nome_file_quantità)
            print('')
            print('Ho salvato la RAZIONE nel FILE DI TESTO <%s.txt>' % nome_file_razione)
            print('')

        
            DELTA_SOSTANZA_SECCA = APPORTO_DEFINITIVO_SOSTANZA_SECCA - F[0]
            DELTA_PROTEINA_GREZZA = APPORTO_PROTEINA_GREZZA - F[1]
            DELTA_FIBRA_GREZZA = APPORTO_FIBRA_GREZZA - F[2]
            DELTA_NDF = APPORTO_NDF - F[3]
            DELTA_ADF = APPORTO_ADF - F[4]
            DELTA_GRASSO = APPORTO_GRASSO - F[5]
            DELTA_AMIDO = APPORTO_AMIDO - F[6]
            DELTA_ZUCCHERI = APPORTO_ZUCCHERI - F[7]
            DELTA_Ca = APPORTO_Ca - F[8]
            DELTA_P = APPORTO_P - F[9]
            DELTA_UFL = APPORTO_UFL - F[10]
            DELTA_PDI = APPORTO_PDI - F[11]
        
                              
            print('')
            print('')
            if i == N_repl-1:
                print('Il calcolo della razione non ha avuto SUCCESSO; per favore cancella gli alimenti inseriti e riprova.')
            elif i < N_repl-1:
                print('Il CALCOLO DELLA RAZIONE è stato effettuato con SUCCESSO alla %d^ replica!' % i)        
            print('')
        
                        
            print("Il FABBISOGNO DI SOSTANZA SECCA (che dev'essere soddisfatto dagli alimenti aggiunti) delle bovine del gruppo <%s> è di %f kg" %  (gruppo, F_arr[0]))
            print('')
            print("L'APPORTO DI SOSTANZA SECCA degli alimenti selezionati è di %f kg" % APPORTO_SOSTANZA_SECCA)
            print('')

            print('')        
            print('LEGENDA')
            print('')
            print("DM => Dry Matter (Apporto di Sostanza Secca)")
            print("CP => Crude Protein (Apporto di PROTEINA GREZZA)")
            print("FG => FIBRA GREZZA (apporto di FIBRA GREZZA)")
            print("NDF => NDF (apporto di Fibra resistente al Detergente Neutro)")
            print("ADF => ADF (apporto di Fibra resistente al Detergente Acido)")
            print("FAT => Fat (apporto di GRASSO)")
            print("AM => AMIDO (apporto di AMIDO)")
            print("ZUC => ZUCCHERI (apporto di ZUCCHERI)")
            print("Ca => Calcio (apporto di Calcio)")
            print("P => Fosforo (apporto di Fosforo)")
            print("UFL => Unità Foraggere Latte (apporto di Energia Netta)")
            print("PDI => Proteina Digeribile Intestinale (apporto di PDI)")
            print('')
            print('')
            print('DMI','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PFI')
            
            
            if len(PREZZI) == len(S):

                print('')
                for i in list(range(len(PREZZI))):
                    print("Prezzo dell'alimento <%s> => %f EURO/ton" % (S[i], PREZZI[i]))
                print('')
                print('********************************************************************')
                print('')
            else:
                print('Impossibile creare la TABELLA DEI PREZZI: ci sono uno o più alimenti non quotati!')


            
            if len(PREZZI) == len(S):

            
                costo_alimento_1 = quantità_alimento_1[0] * PREZZI[0] / 1000
                costo_alimento_2 = quantità_alimento_2[0] * PREZZI[1] / 1000
                                          
                COSTO_RAZIONE = []            
                COSTO_RAZIONE.append(costo_alimento_1)
                COSTO_RAZIONE.append(costo_alimento_2)        
                
            
                if Q and not QM and not QFP:
                            
                    if type(costo_FORAGGIO_quantità) is float: 
                        COSTO_RAZIONE.append(costo_FORAGGIO_quantità)
                        print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                        print("Costo dell'alimento <%s>: %f EURO" % (M, costo_FORAGGIO_quantità))

                    else:
                        print("Il prezzo dell'alimento <%s> non è disponibile!" % M) 

                
                elif QM and not Q and not QFP:                
                
                    if type(costo_CEREALE_quantità) is float:
                        COSTO_RAZIONE.append(costo_CEREALE_quantità)  
                        print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                        print("Costo dell'alimento <%s>: %f EURO" % (MG, costo_CEREALE_quantità))

                    else:
                        print("Il prezzo dell'alimento <%s> non è disponibile!" % MG) 

            
                elif QFP and not Q and not QM:
                
                    if type(costo_FONTE_PROTEICA_quantità) is float:
                        COSTO_RAZIONE.append(costo_FONTE_PROTEICA_quantità)
                        print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                        print("Costo dell'alimento <%s>: %f EURO" % (FE, costo_FONTE_PROTEICA_quantità))
                    else:
                        print("Il prezzo dell'alimento <%s> non è disponibile!" % FE)

            
                elif Q and QM and not QFP:
                
                    if type(costo_FORAGGIO_quantità) is float and type(costo_CEREALE_quantità) is float: 
                        COSTO_RAZIONE.append(costo_FORAGGIO_quantità)
                        COSTO_RAZIONE.append(costo_CEREALE_quantità)  
                        print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                        print("Costo dell'alimento <%s>: %f EURO" % (M, costo_FORAGGIO_quantità))
                        print("Costo dell'alimento <%s>: %f EURO" % (MG, costo_CEREALE_quantità))                        
                    
                    else:
                        print("Il prezzo dell'alimento <%s> e/o dell'alimento <%s> non è disponibile!" % (M, MG))

            
                elif Q and QFP:
                
                    if type(costo_FORAGGIO_quantità) is float and type(costo_FONTE_PROTEICA_quantità) is float:  
                        COSTO_RAZIONE.append(costo_FORAGGIO_quantità)
                        COSTO_RAZIONE.append(costo_FONTE_PROTEICA_quantità)
                        print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))    
                        print("Costo dell'alimento <%s>: %f EURO" % (M, costo_FORAGGIO_quantità))
                        print("Costo dell'alimento <%s>: %f EURO" % (FE, costo_FONTE_PROTEICA_quantità))

                    else:
                        print("Il prezzo dell'alimento <%s> e/o dell'alimento <%s> non è disponibile!" % (M, FE))

                
                elif QM and QFP and not Q:
                
                    if type(costo_CEREALE_quantità) is float and type(costo_FONTE_PROTEICA_quantità) is float:
                        COSTO_RAZIONE.append(costo_CEREALE_quantità) 
                        COSTO_RAZIONE.append(costo_FONTE_PROTEICA_quantità)
                        print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))            
                        print("Costo dell'alimento <%s>: %f EURO" % (MG, costo_CEREALE_quantità))
                        print("Costo dell'alimento <%s>: %f EURO" % (FE, costo_FONTE_PROTEICA_quantità)) 
                    else:
                        print("Il prezzo dell'alimento <%s> e/o dell'alimento <%s> non è disponibile!" % (MG, FE))
                                           
                   
                elif Q and QM and QFP:
                    if type(prezzo_FORAGGIO_quantità) is float and type(prezzo_CEREALE_quantità) is float and type(prezzo_FONTE_PROTEICA_quantità) is float:
                        COSTO_RAZIONE.append(costo_FORAGGIO_quantità)
                        COSTO_RAZIONE.append(costo_CEREALE_quantità)                                   
                        COSTO_RAZIONE.append(costo_FONTE_PROTEICA_quantità)

                        print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                        print("Costo dell'alimento <%s>: %f EURO" % (M, costo_FORAGGIO_quantità))                     
                        print("Costo dell'alimento <%s>: %f EURO" % (MG, costo_CEREALE_quantità))
                        print("Costo dell'alimento <%s>: %f EURO" % (FE, costo_FONTE_PROTEICA_quantità)) 
                    else:
                        print("Il prezzo dell'alimento <%s> e/o dell'alimento <%s> e/o dell'alimento <%s> non è disponibile!" % (M, MG, FE))
                                           
                COSTO_TOTALE = sum(COSTO_RAZIONE)
                print('')
                print('Il costo della razione è %f EURO' % COSTO_TOTALE)
                if COSTO_TOTALE > PREZZO_MAX:
                    print('Il COSTO TOTALE della razione è > del PREZZO MASSIMO che hai impostato!')
                    print('Prova a scegliere altri alimenti e ricalcola la RAZIONE')
            
            
            else:
                print('Non posso calcolare il COSTO DELLA RAZIONE: ci sono uno o più alimenti non quotati!') 
            
            
            print('')                
            print('')
            print('')
            print('_______________________________________________________________________________________________')
            print('|                         |                    |                         |                    |')
            print('|                         |                    |                         |                    |')
            print('|   PRINCIPIO NUTRITIVO   |      APPORTO       |       Fabbisogno        |     DIFFERENZA     |')
            print('|                         |                    |                         |                    |')
            print('|_________________________|____________________|_________________________|____________________|')
            print('|      Sostanza Secca     |     %f kg   |  %f kg           |  %f kg       |' % (APPORTO_DEFINITIVO_SOSTANZA_SECCA, F[0], DELTA_SOSTANZA_SECCA))
            print('|      PROTEINA GREZZA    |   %f g    |%f g            |%f g        |' % (APPORTO_PROTEINA_GREZZA, F[1], DELTA_PROTEINA_GREZZA))
            print('|      FIBRA GREZZA       |   %f g    |%f g            |%f g        |' % (APPORTO_FIBRA_GREZZA, F[2], DELTA_FIBRA_GREZZA))
            print('|           NDF           |   %f g    |%f g            |%f g        |' % (APPORTO_NDF, F[3], DELTA_NDF))
            print('|           ADF           |   %f g    |%f g            |%f g        |' % (APPORTO_ADF, F[4], DELTA_ADF))
            print('|         GRASSO          |   %f g    |%f g            |%f g        |' % (APPORTO_GRASSO, F[5], DELTA_GRASSO)) 
            print('|          AMIDO          |   %f g    |%f g            |%f g        |' % (APPORTO_AMIDO, F[6], DELTA_AMIDO))
            print('|        ZUCCHERI         |    %f g    |%f g            |%f g       |' % (APPORTO_ZUCCHERI, F[7], DELTA_ZUCCHERI))
            print('|           Ca            |   %f g      |  %f g           |  %f g     |' % (APPORTO_Ca, F[8], DELTA_Ca))        
            print('|            P            |   %f g      |  %f g            |  %f g      |' % (APPORTO_P, F[9], DELTA_P))        
            print('|           UFL           |     %f      | %f               | %f           |' % (APPORTO_UFL, F[10], DELTA_UFL))
            print('|           PDI           |     %f      | %f               | %f           |' % (APPORTO_PDI, F[11], DELTA_PDI))        
            print('_______________________________________________________________________________________________')
            print('')
            print('')
            print('')
            print('******************************************** SOSTANZA SECCA ********************************************')
            print('')
            print('La razione fornisce %f kg di alimento tal quale' % quantità_TOTALE_TAL_QUALE)
            print('')
            print('La razione fornisce %f kg di Sostanza Secca' % APPORTO_DEFINITIVO_SOSTANZA_SECCA)            
            print('')
            DMI_AS_FED_ratio = (APPORTO_DEFINITIVO_SOSTANZA_SECCA/quantità_TOTALE_TAL_QUALE)*100
            print('La tua RAZIONE contiene il %fx100 di SOSTANZA SECCA' % DMI_AS_FED_ratio)
            print('')
            if DMI_AS_FED_ratio < 0.6:
                print('')
                print('In estate, in caso di COMPETIZIONE ALIMENTARE x un N° INSUFFICIENTE DI AUTOCATTURANTI (= BOVINE IN PIEDI),')
                print('se prepari un CARRO MISCELATORE con, per es., un 10x100 in più di razioni (per es., con 100')
                print('BOVINE IN LATTAZIONE metto nel carro 110 RAZIONI), dal momento che la miscelata rimarrà per più tempo in')
                print('mangiatoia, potrebbe scaldarsi!')
                print("Prova a RIDURRE UN PO' L'APPORTO COMPLESSIVO DI FORAGGIO, insilato, per aumentare la SS della razione,")
                print("o fieno (dipende da che tipo di FORAGGIo hai inserito manualmente), per forzare il programma ad")
                print("AUMENTARE L'APPORTO DELLA FONTE DI FIBRA DIGERIBILE")
                print("In questo modo, si dovrebbe attenuare la riduzione dell'ingestione volontaria di fibra scarsamente")
                print("digeribile (poiché più o meno lignificata), nonché il conseguente CALO DEL TENORE IN GRASSO del latte")
                print("Tieni anche conto del fatto che, riducendo l'apporto della cosiddetta <FIBRA FISICAMENTE EFFICACE>")
                print("(quella dei FORAGGI, che fa ruminare), LE BOVINE PRODURRANNO MENO SALIVA (che è il tampone naturale")
                print("del rumine) e, quindi, dovrai valutare l'inserimento di un TAMPONE ARTIFICIALE, come il bicarbonato")
                print("di calcio o di sodio, nella razione")    
            print('')
            print('')
            print('******************************************** PROTEINA GREZZA ********************************************')
            print('')
            APPORTO_DEFINITIVO_SOSTANZA_SECCA_g = APPORTO_DEFINITIVO_SOSTANZA_SECCA * 1000
            CP_DMI_ratio = APPORTO_PROTEINA_GREZZA/APPORTO_DEFINITIVO_SOSTANZA_SECCA_g
            print('Rapporto (PROTEINA GREZZA : Sostanza Secca) => %f' % CP_DMI_ratio)
            print('')
            print("Secondo Dell'Orto e Savoini, ad inizio lattazione dovrebbe essere ~ 0.18 (18%)")
            print('')
            if CP_DMI_ratio <= 0.17:
                print("L'apporto di PROTEINA GREZZA è insufficiente")
                print("Se avevi scelto una fonte proteica diversa dalla <F.E. DI SOIA>, sostituiscila con quest'ultima!")
                print("Se non basta, prova a sostituire il fieno di prato stabile o l'insilato di loietto con il <FIENO DI ERBA MEDICA e/o a ridurre l'apporto di insilato (o di pastone) di mais>")         
            print('')
            print('')


            print('******************************************* LISINA & METIONINA *******************************************')
            print('')
            print('Rapporto (LISINA / PROTEINA DIGERIBILE) => %f' % LysDI_ratio)
            print('')
            print('Rapporto (METIONINA / PROTEINA DIGERIBILE) => %f' % MetDI_ratio)
            print('')
            
            rapporto_Lys_Met = LysDI_ratio/MetDI_ratio

            print('Rapporto (LISINA / METIONINA) => %f' % rapporto_Lys_Met)
            print('')
            if rapporto_Lys_Met >= 3.0:
                print('La razione contiene un eccesso di LISINA!')
                print('')
                print('Dovrebbe essere > 2.7 e < 3.0')
                print('')
                print("Se hai scelto come FONTE DI PROTEINA un alimento CARENTE DI METIONINA, prova a sostituirlo con la <farina estrazione di girasole>")

            print('')
            print('')      
            print('')
            print('')           
            print('*********************************************** PDIN & PDIE ***********************************************')        
            
            BFR = (APPORTO_PDI - PDIE_TOT)/APPORTO_UFL
            print('')
            print('La RAZIONE fornisce %f g di PDIN' % PDIN_TOT)
            print('')
            print('La RAZIONE fornisce %f g di PDIE' % PDIE_TOT)
            print('')
            print('Rmic = (PDIN – PDIE)/UFL')
            print('')
            print('Rmic = %f' % BFR)
            print('')
            if BFR >= -17:                       
                print('La RAZIONE è accettabile')
                print('')
            else:
                print('La RAZIONE non è accettabile')
                print('Prova ad aumentare la quantità di %s' % FE)
            print('')
            print('')


            print('********************************************** FIBRA GREZZA **********************************************')                   
            print('')
            FG_DMI_ratio = APPORTO_FIBRA_GREZZA/APPORTO_DEFINITIVO_SOSTANZA_SECCA_g
            print('')                 
            FG_DMI_ratio = APPORTO_FIBRA_GREZZA/APPORTO_DEFINITIVO_SOSTANZA_SECCA_g
            print('')
            print('Rapporto (FIBRA GREZZA : Sostanza Secca) => %f' % FG_DMI_ratio)
            print('')
            print('Dovrebbe essere ~ 0.17 (17%)')
            print('')
            # print('********************************************** NDF **********************************************')  
            APPORTO_NDF_FORAGGI = app_FOR_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3]
            NDF_FORAGGI_NDF_tot_ratio = APPORTO_NDF_FORAGGI/APPORTO_NDF
#           print('Rapporto (NDF da FORAGGI : NDF totale) => %f' % NDF_FORAGGI_NDF_tot_ratio)
#           print('')
#           print('Dovrebbe essere ~ 0.75 (75%)')
            print('')
            print('')           
            print('')
            print('***********************************************************************************************************')
            print('********************************************* FINE DEL REPORT *********************************************')
            print('***********************************************************************************************************')
            
            sys.stdout = original



#################################################################################################################
################################## 3 ALIMENTI INSERITI AUTOMATICAMENTE ##########################################
#################################################################################################################
                                        
                                        

    elif len(S) == 3:
    
        print('')
        print('Questo TESTO viene visualizzato sul terminale, non inserito nel file!')
        print('')
        if day == 'Monday': 
            print('RAZIONE di %s, creata Lunedì %s, %s' % (user, data, current_time))
        if day == 'Tuesday': 
            print('RAZIONE di %s, creata Martedì %s, %s' % (user, data, current_time))
        if day == 'Wednesday': 
            print('RAZIONE di %s, creata Mercoledì %s, %s' % (user, data, current_time))
        if day == 'Thursday': 
            print('RAZIONE di %s, creata Giovedì %s, %s' % (user, data, current_time))
        if day == 'Friday': 
            print('RAZIONE di %s, creata Venerdì %s, %s' % (user, data, current_time))
        if day == 'Saturday': 
            print('RAZIONE di %s, creata Sabato %s, %s' % (user, data, current_time))
        if day == 'Sunday': 
            print('RAZIONE di %s, creata Domenica %s, %s' % (user, data, current_time))

        print('')
        print('Hai inserito 3 alimenti:')
        print('')
        print('ALIMENTO 1 => <%s>' % S[0])
        print('ALIMENTO 2 => <%s>' % S[1])
        print('ALIMENTO 3 => <%s>' % S[2])
        print('')
        
        print(ARR[0])
        print(ARR[1])
        print(ARR[2])
        
                
        random_ARR_0_old = ARR[0] * random.random() * 10
        random_ARR_1_old = ARR[1] * random.random() * 10
        random_ARR_2_old = ARR[2] * random.random() * 10

        
# ogni alimento scelto dall'utente viene moltiplicato per un numero casuale compreso fra 0 e 10 (kg) 
# dichiaro random_ARR_x_old

        
        random_ARR_0_new = random_ARR_0_old * (random.random() + 0.5)
        random_ARR_1_new = random_ARR_1_old * (random.random() + 0.5)
        random_ARR_2_new = random_ARR_2_old * (random.random() + 0.5)
        
        
# dichiaro random_ARR_x_new
        
        SOMMA_old = random_ARR_0_old + random_ARR_1_old + random_ARR_2_old

###########################################################################################################################################        
        
        print(SOMMA_old)
        print(F_arr)
        
        DELTA_old = SOMMA_old - F_arr
        print('La somma iniziale è...')
        print(SOMMA_old)

# dichiaro SOMMA_old e DELTA_old

        SOMMA_new = random_ARR_0_new + random_ARR_1_new + random_ARR_2_new
        DELTA_new = SOMMA_new - F_arr
        print('La nuova somma è...')
        print(SOMMA_new)
        print('La nuova differenza è...')
        print(DELTA_new)

# dichiaro SOMMA_new e DELTA_new
        
        quantità_alimento_1 = random_ARR_0_new / ARR[0]
        quantità_alimento_2 = random_ARR_1_new / ARR[1]
        quantità_alimento_3 = random_ARR_2_new / ARR[2]
        
        
# dichiaro gli apporti dei singoli alimenti


        i = 0

# inizializzo il contatore i        
        
        for i in range(N_repl):
        
            rules = [abs(DELTA_new[0]) < abs(DELTA_old[0]), abs(DELTA_new[1]) < abs(DELTA_old[1]), abs(DELTA_new[2]) < abs(DELTA_old[2])]

# dichiaro le regole da rispettare
                                    
            if all(rules):
            
                print('ESTRAGGO DALLA PROPOSAL DISTRIBUTION')
                i += 1
                print(i)
                                                         	               	        
                random_ARR_0_new = random_ARR_0_new * (random.random() + 0.5)
                random_ARR_1_new = random_ARR_1_new * (random.random() + 0.5)
                random_ARR_2_new = random_ARR_2_new * (random.random() + 0.5)
                
                
# ACCETTO random_ARR_x_new e lo uso per aggiornare random_ARR_x_new stesso 
                
                APPORTO_SOSTANZA_SECCA = random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0]
                print(APPORTO_SOSTANZA_SECCA)

# aggiorno l'apporto di SS
                                
                SOMMA_new = random_ARR_0_new + random_ARR_1_new + random_ARR_2_new
                DELTA_new = SOMMA_new - F_arr
                
# aggiorno SOMMA_new e DELTA_new                
                
                print('La nuova somma è...')
                print(SOMMA_new)
                print('La nuova differenza è...')
                print(DELTA_new)
            
                quantità_alimento_1 = random_ARR_0_new / ARR[0]
                quantità_alimento_2 = random_ARR_1_new / ARR[1]
                quantità_alimento_3 = random_ARR_2_new / ARR[2]
                
                
                if round(APPORTO_SOSTANZA_SECCA) == round(F_arr[0]):
                
                    break
                                
                print('')                
                print("SUCCESSO! L'APPORTO di Sostanza Secca corrisponde al FABBISOGNO.")

                    	                
            else:
                    
                random_ARR_0_new = random_ARR_0_old * (random.random() + 0.5)
                random_ARR_1_new = random_ARR_1_old * (random.random() + 0.5)
                random_ARR_2_new = random_ARR_2_old * (random.random() + 0.5)
                
                
# RIFIUTO random_ARR_x_new e lo ricalcolo a partire da random_ARR_x_old 
                
                print('FALLIMENTO')
                
                APPORTO_SOSTANZA_SECCA = random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0]

                                
                SOMMA_new = random_ARR_0_new + random_ARR_1_new + random_ARR_2_new
                DELTA_new = SOMMA_new - F_arr
                                                
                print('La nuova somma è...')
                print(SOMMA_new)
                print('La nuova differenza è...')
                print(DELTA_new)
                
            
                quantità_alimento_1 = random_ARR_0_new / ARR[0]
                quantità_alimento_2 = random_ARR_1_new / ARR[1]
                quantità_alimento_3 = random_ARR_2_new / ARR[2]
                

                random_ARR_0_new_ROUND = list(map(arrotonda, random_ARR_0_new))
                random_ARR_1_new_ROUND = list(map(arrotonda, random_ARR_1_new))
                random_ARR_2_new_ROUND = list(map(arrotonda, random_ARR_2_new))                


                
############################################################################################################################
################################# metodo => <_CNCPS_> INIZIO DEL REDIREZIONAMENTO DELLA STAMPA #############################
############################################################################################################################

                                                    ### 3 ALIMENTI AUTO ###


           
        original = sys.stdout
        sys.stdout = open('%s.txt' % nome_file_razione, 'w')

        if day == 'Monday': 
            print('RAZIONE di %s, creata Lunedì %s, %s' % (user, data, current_time))
        if day == 'Tuesday': 
            print('RAZIONE di %s, creata Martedì %s, %s' % (user, data, current_time))
        if day == 'Wednesday': 
            print('RAZIONE di %s, creata Mercoledì %s, %s' % (user, data, current_time))
        if day == 'Thursday': 
            print('RAZIONE di %s, creata Giovedì %s, %s' % (user, data, current_time))
        if day == 'Friday': 
            print('RAZIONE di %s, creata Venerdì %s, %s' % (user, data, current_time))
        if day == 'Saturday': 
            print('RAZIONE di %s, creata Sabato %s, %s' % (user, data, current_time))
        if day == 'Sunday': 
            print('RAZIONE di %s, creata Domenica %s, %s' % (user, data, current_time))



        try:

               
            if metodo == '_CNCPS_':
            
            
                            
                # from crea_db_PARAMETRI_L_CNCPS_ import LW, WOL, MY, FAT_milk, CP_milk, LAC_milk, N_repl, giorno_di_inserimento, data_di_inserimento, ora_di_inserimento
                
                print('PARAMETRI inseriti da %s, %s %s alle ore %s' % (user, giorno_di_inserimento, data_di_inserimento, ora_di_inserimento))
                print('') 
                print('METODO DI CALCOLO della razione => <%s>' % metodo)
                print('PESO VIVO MEDIO BOVINE IN LATTAZIONE => %f kg' % LW)
                print('SETTIMANA DI LATTAZIONE media => %d^' % WOL)
                print('LIVELLO PRODUTTIVO medio => %f kg di latte al giorno' % MY)
                print('TENORE DI GRASSO del latte => %fx100' % FAT_milk)
                print('TENORE DI PROTEINA del latte => %fx100' % CP_milk)
                print('TENORE DI LATTOSIO del latte => %fx100' % LAC_milk)
                print('N° DI REPLICHE => %d' % N_repl)
                print('')
        

                F = []
                F.append(DMI)
                F.append(CP)
                F.append(RDP)
                F.append(RUP)
                F.append(FG)
                F.append(NDF)
                F.append(ADF)
                F.append(FAT)
                F.append(AM)
                F.append(ZUC)
                F.append(Ca_tot)
                F.append(P_tot)
                F.append(UFL_tot)


# STAMPA FABBISOGNI _CNCPS_

                print('')
                print('Hai scelto il METODO DI CALCOLO della razione <Cornell %s>' % metodo)    
                print('')
                print('FABBISOGNI')
                print('')    
                print('CAPACITÀ DI INGESTIONE => %f kg di Sostanza Secca' % F[0])
                print('Fabbisogno di <PROTEINA GREZZA> => %f g' % F[1])
                print('Fabbisogno di <PROTEINA DEGRADABILE> => %f g' % F[2])
                print('Fabbisogno di <PROTEINA INDEGRADABILE> => %f g' % F[3])
                print('Fabbisogno di <FIBRA GREZZA> => %f g' % F[4])
                print('Fabbisogno di <NDF> => %f g' % F[5])
                print('Fabbisogno di <ADF> => %f g' % F[6]) 
                print('Fabbisogno di <GRASSO> => %f g' % F[7])
                print('Fabbisogno di <AMIDO> => %f g' % F[8])
                print('Fabbisogno di <ZUCCHERI> => %f g' % F[9])
                print('Fabbisogno di <CALCIO> => %f g' % F[10])
                print('Fabbisogno di <FOSFORO> => %f g' % F[11])
                print('Fabbisogno di <ENERGIA NETTA> => %f Unità Foraggere Latte. \n' % F[12])
                print('')
                


                if Q and QM and QFP:
                
                    F_arr = F_arr_ricalcolato_QM_FE
                
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI>, <CEREALI> e <FONTI PROTEICHE>')
                    print('')
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                              
                    print(F_arr)


                elif Q and QFP:
                
                    F_arr = F_arr_ricalcolato_FE
                
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI> e <FONTI PROTEICHE>')      
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(F_arr)
                

                elif Q and QM and not QFP:

                    F_arr = F_arr_ricalcolato
        
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI> e <CEREALI>')
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')                
                    print(F_arr)              
            

                elif Q and not QM and not QFP: 

                    F_arr = F_arr_ric
        
                    print('Hai inserito manualmente solo un alimento della categoria <FORAGGI>')
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(F_arr)


                else:

                    F_arr = F_arr
        
                    print('Nessun alimento inserito manualmente')
                    print('')
                    print("L'apporto di Sostanza Secca degli alimenti selezionati è %f" % APPORTO_SOSTANZA_SECCA)
                    print('')
                    
                

############################################################################################################################

             

# CASO 1)
# FORAGGIO + MAIS GRANELLA + FE inseriti manualmente
# 3 alimenti inseriti manualmente + 3 alimenti inseriti in automatico => TOT 6
                                                
                if Q and QM and QFP:
                

                    quantità_TOTALE_TAL_QUALE = Q + QM + QFP + quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_FP_man[0] + app_FOR_man[0] + app_CER_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0]
                    APPORTO_PROTEINA_GREZZA = app_FP_man[1] + app_FOR_man[1] + app_CER_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1]
                    APPORTO_PROTEINA_DEGRADABILE = app_FP_man[2] + app_FOR_man[2] + app_CER_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2]
                    APPORTO_PROTEINA_INDEGRADABILE = app_FP_man[3] + app_FOR_man[3] + app_CER_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3]
                    APPORTO_FIBRA_GREZZA = app_FP_man[4] + app_FOR_man[4] + app_CER_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4]
                    APPORTO_NDF = app_FP_man[5] + app_FOR_man[5] + app_CER_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5]
                    APPORTO_ADF = app_FP_man[6] + app_FOR_man[6] + app_CER_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6]
                    APPORTO_GRASSO = app_FP_man[7] + app_FOR_man[7] + app_CER_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7]
                    APPORTO_AMIDO = app_FP_man[8] + app_FOR_man[8] + app_CER_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8]
                    APPORTO_ZUCCHERI = app_FP_man[9] + app_FOR_man[9] + app_CER_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9]
                    APPORTO_Ca = app_FP_man[10] + app_FOR_man[10] + app_CER_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10]
                    APPORTO_P = app_FP_man[11] + app_FOR_man[11] + app_CER_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11]
                    APPORTO_UFL = app_FP_man[12] + app_FOR_man[12] + app_CER_man[12] + random_ARR_0_new[12] + random_ARR_1_new[12] + random_ARR_2_new[12]


                    
                    print('')
                    print('apporti di %s:' % M)
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(app_FOR_man)
                    print('')

                    print('')
                    print('apporti di %s:' % MG)
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(app_CER_man)
                    print('')
                
                    print('apporti di %s:' % FE)
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(app_FP_man)
                    print('')

                    print('apporti di %s:' % S[0])
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(random_ARR_0_new)
                    print('')
                    
                    print('apporti di %s:' % S[1])
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(random_ARR_1_new)
                    print('')
                    
                    print('apporti di %s:' % S[2])
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(random_ARR_2_new)
                    print('')
                    
                                                   
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')
                    print('%f kg %s' % (QM, MG))                                         
                    print('%f kg %s' % (Q, M))
                    print('%f kg %s' % (QFP, FE))
                                            
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))
                    
            
            

############################################################################################################################


# CASO 2)
# FORAGGIO + FE inseriti manualmente
                  
                elif Q and QFP:


                    quantità_TOTALE_TAL_QUALE = Q + QFP + quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_FP_man[0] + app_FOR_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0]
                    APPORTO_PROTEINA_GREZZA = app_FP_man[1] + app_FOR_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1]
                    APPORTO_PROTEINA_DEGRADABILE = app_FP_man[2] + app_FOR_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2]
                    APPORTO_PROTEINA_INDEGRADABILE = app_FP_man[3] + app_FOR_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3]
                    APPORTO_FIBRA_GREZZA = app_FP_man[4] + app_FOR_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4]
                    APPORTO_NDF = app_FP_man[5] + app_FOR_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5]
                    APPORTO_ADF = app_FP_man[6] + app_FOR_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6]
                    APPORTO_GRASSO = app_FP_man[7] + app_FOR_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7]
                    APPORTO_AMIDO = app_FP_man[8] + app_FOR_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8]
                    APPORTO_ZUCCHERI = app_FP_man[9] + app_FOR_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9]
                    APPORTO_Ca = app_FP_man[10] + app_FOR_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10]
                    APPORTO_P = app_FP_man[11] + app_FOR_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11]
                    APPORTO_UFL = app_FP_man[12] + app_FOR_man[12] + random_ARR_0_new[12] + random_ARR_1_new[12] + random_ARR_2_new[12]

                      
                    print('')
                    print('apporti di %s:' % M)
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(app_FOR_man)
                    print('')
                
                    print('apporti di %s:' % FE)
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(app_FP_man)
                    print('')

                    print('apporti di %s:' % S[0])
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(random_ARR_2_new)
                    print('')
                    print('apporti di %s:' % S[3])
                    print('')
                    print('')
               
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')                                    
                    print('%f kg %s' % (Q, M))
                    print('%f kg %s' % (QFP, FE))
                                        
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))
            


############################################################################################################################


# CASO 3)
# INSILATO MAIS e MAIS GRANELLA inseriti manualmente
            
                elif Q and QM and not QFP:

                                        
                
                    quantità_TOTALE_TAL_QUALE = Q + QM + quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_CER_man[0] + app_FOR_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0]
                    APPORTO_PROTEINA_GREZZA = app_CER_man[1] + app_FOR_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1]
                    APPORTO_PROTEINA_DEGRADABILE = app_CER_man[2] + app_FOR_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2]
                    APPORTO_PROTEINA_INDEGRADABILE = app_CER_man[3] + app_FOR_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3]
                    APPORTO_FIBRA_GREZZA = app_CER_man[4] + app_FOR_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4]
                    APPORTO_NDF = app_CER_man[5] + app_FOR_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5]
                    APPORTO_ADF = app_CER_man[6] + app_FOR_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6]
                    APPORTO_GRASSO = app_CER_man[7] + app_FOR_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7]
                    APPORTO_AMIDO = app_CER_man[8] + app_FOR_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8]
                    APPORTO_ZUCCHERI = app_CER_man[9] + app_FOR_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9]
                    APPORTO_Ca = app_CER_man[10] + app_FOR_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10]
                    APPORTO_P = app_CER_man[11] + app_FOR_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11]
                    APPORTO_UFL = app_CER_man[12] + app_FOR_man[12] + random_ARR_0_new[12] + random_ARR_1_new[12] + random_ARR_2_new[12]


                    print('')
                    print('apporti di %s:' % M)
                    print('')
                    print(app_FOR_man)
                    print('')
                    print('apporti di %s:' % MG)
                    print('')
                    print(app_CER_man)
                    print('')                     
                                              
                    print('apporti di %s:' % S[0])
                    print('')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print(random_ARR_2_new)
                    print('')
                    print('apporti di %s:' % S[3])
                    print('')
                    
               
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')
                    print('%f kg %s' % (QM, MG))                                         
                    print('%f kg %s' % (Q, M))
                                        
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))
                    
            

############################################################################################################################


# CASO 4)
# SOLO FORAGGIO:
                
                elif Q and not QM and not QFP: 


                    quantità_TOTALE_TAL_QUALE = Q + quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_FOR_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0]
                    APPORTO_PROTEINA_GREZZA = app_FOR_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1]
                    APPORTO_PROTEINA_DEGRADABILE = app_FOR_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2]
                    APPORTO_PROTEINA_INDEGRADABILE = app_FOR_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3]
                    APPORTO_FIBRA_GREZZA = app_FOR_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4]
                    APPORTO_NDF = app_FOR_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5]
                    APPORTO_ADF = app_FOR_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6]
                    APPORTO_GRASSO = app_FOR_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7]
                    APPORTO_AMIDO = app_FOR_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8]
                    APPORTO_ZUCCHERI = app_FOR_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9]
                    APPORTO_Ca = app_FOR_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10]
                    APPORTO_P = app_FOR_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11]
                    APPORTO_UFL = app_FOR_man[12] + random_ARR_0_new[12] + random_ARR_1_new[12] + random_ARR_2_new[12]


                    print('')
                    print('apporti di %s:' % M)
                    print('')
                    print(app_FOR_man)
                    print('')  
                                    
                    print('apporti di %s:' % S[0])
                    print('')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print(random_ARR_2_new)
                    print('')
                    print('apporti di %s:' % S[3])
                    print('')
                    print(random_ARR_3_new)
                    print('')
                    print('apporti di %s:' % S[4])
                    print('')
                                                
                    print('La razione fornisce %f kg di %s' % (Q, M))

                    print('')
                    print("Prezzo dell'alimento <%s> => %f EURO/ton" % (M, prezzo_FORAGGIO_quantità))
                  
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')                   
                    print('%f kg %s' % (Q, M))
                                        
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))                    
            


############################################################################################################################


# CASO 5)
# SOLO CEREALE:

                elif QM and not Q and not QFP: 


                    quantità_TOTALE_TAL_QUALE = QM + quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_CER_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0]
                    APPORTO_PROTEINA_GREZZA = app_CER_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1]
                    APPORTO_PROTEINA_DEGRADABILE = app_CER_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2]
                    APPORTO_PROTEINA_INDEGRADABILE = app_CER_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3]
                    APPORTO_FIBRA_GREZZA = app_CER_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4]
                    APPORTO_NDF = app_CER_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5]
                    APPORTO_ADF = app_CER_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6]
                    APPORTO_GRASSO = app_CER_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7]
                    APPORTO_AMIDO = app_CER_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8]
                    APPORTO_ZUCCHERI = app_CER_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9]
                    APPORTO_Ca = app_CER_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10]
                    APPORTO_P = app_CER_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11]
                    APPORTO_UFL = app_CER_man[12] + random_ARR_0_new[12] + random_ARR_1_new[12] + random_ARR_2_new[12]


                    print('')
                    print('apporti di %s:' % MG)
                    print('')
                    print(app_CER_man)
                    print('')  
                                
                    print('apporti di %s:' % S[0])
                    print('')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print(random_ARR_2_new)
                    print('')
                    
                
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')
                    print('%f kg %s' % (QM, MG))                                         
                                        
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))
                                


############################################################################################################################

# CASO 6)
# NESSUN ALIMENTO INSERITO MANUALMENTE

                else:


                    quantità_TOTALE_TAL_QUALE = quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0]
                    APPORTO_PROTEINA_GREZZA = random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1]
                    APPORTO_PROTEINA_DEGRADABILE = random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2]
                    APPORTO_PROTEINA_INDEGRADABILE = random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3]
                    APPORTO_FIBRA_GREZZA = random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4]
                    APPORTO_NDF = random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5]
                    APPORTO_ADF = random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6]
                    APPORTO_GRASSO = random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7]
                    APPORTO_AMIDO = random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8]
                    APPORTO_ZUCCHERI = random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9]
                    APPORTO_Ca = random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10]
                    APPORTO_P = random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11]
                    APPORTO_UFL = random_ARR_0_new[12] + random_ARR_1_new[12] + random_ARR_2_new[12]


                    print('apporti di %s:' % S[0])
                    print('')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print(random_ARR_2_new)
                    print('')
                    
                
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')
                                        
                                        
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))
                                

         
############################################################################################################################

#           if metodo == '_CNCPS_':
                    
                A = []
                A.append(APPORTO_DEFINITIVO_SOSTANZA_SECCA)
                A.append(APPORTO_PROTEINA_GREZZA)
                A.append(APPORTO_PROTEINA_DEGRADABILE)
                A.append(APPORTO_PROTEINA_INDEGRADABILE)
                A.append(APPORTO_FIBRA_GREZZA)
                A.append(APPORTO_NDF)
                A.append(APPORTO_ADF)
                A.append(APPORTO_GRASSO)
                A.append(APPORTO_AMIDO)
                A.append(APPORTO_ZUCCHERI)
                A.append(APPORTO_Ca)
                A.append(APPORTO_P)
                A.append(APPORTO_UFL)
        
                with open('%s.txt' % nome_file_apporti, 'w') as external_file:
                    print(A, file=external_file)
                external_file.close()
        
                DELTA_SOSTANZA_SECCA = APPORTO_DEFINITIVO_SOSTANZA_SECCA - F[0]
                DELTA_PROTEINA_GREZZA = APPORTO_PROTEINA_GREZZA - F[1]
                DELTA_PROTEINA_DEGRADABILE = APPORTO_PROTEINA_DEGRADABILE - F[2]
                DELTA_PROTEINA_INDEGRADABILE = APPORTO_PROTEINA_INDEGRADABILE - F[3]
                DELTA_FIBRA_GREZZA = APPORTO_FIBRA_GREZZA - F[4]
                DELTA_NDF = APPORTO_NDF - F[5]
                DELTA_ADF = APPORTO_ADF - F[6]
                DELTA_GRASSO = APPORTO_GRASSO - F[7]
                DELTA_AMIDO = APPORTO_AMIDO - F[8]
                DELTA_ZUCCHERI = APPORTO_ZUCCHERI - F[9]
                DELTA_Ca = APPORTO_Ca - F[10]
                DELTA_P = APPORTO_P - F[11]
                DELTA_UFL = APPORTO_UFL - F[12]
        
                              
                print('')
                print('')
                if i == N_repl-1:
                    print('Il calcolo della razione non ha avuto SUCCESSO; per favore cancella gli alimenti inseriti e riprova.')
                elif i < N_repl-1:
                    print('Il CALCOLO DELLA RAZIONE è stato effettuato con SUCCESSO alla %d^ replica!' % i)        
                print('')
        
                        
                print("Il FABBISOGNO DI SOSTANZA SECCA (che dev'essere soddisfatto dagli alimenti aggiunti) delle bovine del gruppo <%s> è di %f kg" %  (gruppo, F_arr[0]))
                print('')
                print("L'APPORTO DI SOSTANZA SECCA degli alimenti selezionati è di %f kg" % APPORTO_SOSTANZA_SECCA)
                print('')
                

                print('')        
                print('LEGENDA')
                print('')
                print("DM => Dry Matter (Apporto di Sostanza Secca)")
                print("CP => Crude Protein (Apporto di PROTEINA GREZZA)")
                print("RDP => Rumen Degradable Protein (Apporto di PROTEINA DEGRADABILE)")
                print("RUP => Rumen Undegradable Protein (Apporto di PROTEINA INDEGRADABILE)")
                print("FG => FIBRA GREZZA (apporto di FIBRA GREZZA)")
                print("NDF => NDF (apporto di Fibra resistente al Detergente Neutro)")
                print("ADF => ADF (apporto di Fibra resistente al Detergente Acido)")
                print("FAT => Fat (apporto di GRASSO)")
                print("AM => AMIDO (apporto di AMIDO)")
                print("ZUC => ZUCCHERI (apporto di ZUCCHERI)")
                print("Ca => Calcio (apporto di Calcio)")
                print("P => Fosforo (apporto di Fosforo)")
                print("UFL => Unità Foraggere Latte (apporto di Energia Netta)")
                print('')
                print('')
                print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')


                if len(PREZZI) == len(S):

                    print('')
                    for i in list(range(len(PREZZI))):
                        print("Prezzo dell'alimento <%s> => %f EURO/ton" % (S[i], PREZZI[i]))
                    print('')
                    print('********************************************************************')
                    print('')
                else:
                    print('Impossibile creare la TABELLA DEI PREZZI: ci sono uno o più alimenti non quotati!')


            
                if len(PREZZI) == len(S):

            
                    costo_alimento_1 = quantità_alimento_1[0] * PREZZI[0] / 1000
                    costo_alimento_2 = quantità_alimento_2[0] * PREZZI[1] / 1000
                    costo_alimento_3 = quantità_alimento_3[0] * PREZZI[2] / 1000
            
                    COSTO_RAZIONE = []            
                    COSTO_RAZIONE.append(costo_alimento_1)
                    COSTO_RAZIONE.append(costo_alimento_2)
                    COSTO_RAZIONE.append(costo_alimento_3)                    

            
                    if Q and not QM and not QFP:
                            
                        if type(costo_FORAGGIO_quantità) is float: 
                            COSTO_RAZIONE.append(costo_FORAGGIO_quantità)
                            print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))                            
                            print("Costo dell'alimento <%s>: %f EURO" % (M, costo_FORAGGIO_quantità))

                        else:
                            print("Il prezzo dell'alimento <%s> non è disponibile!" % M) 

                
                    elif QM and not Q and not QFP:                
                
                        if type(costo_CEREALE_quantità) is float:
                            COSTO_RAZIONE.append(costo_CEREALE_quantità)  
                            print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))                            
                            print("Costo dell'alimento <%s>: %f EURO" % (MG, costo_CEREALE_quantità))

                        else:
                            print("Il prezzo dell'alimento <%s> non è disponibile!" % MG) 

            
                    elif QFP and not Q and not QM:
                
                        if type(costo_FONTE_PROTEICA_quantità) is float:
                            COSTO_RAZIONE.append(costo_FONTE_PROTEICA_quantità)
                            print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))                           
                            print("Costo dell'alimento <%s>: %f EURO" % (FE, costo_FONTE_PROTEICA_quantità))
                        else:
                            print("Il prezzo dell'alimento <%s> non è disponibile!" % FE)

            
                    elif Q and QM and not QFP:
                
                        if type(costo_FORAGGIO_quantità) is float and type(costo_CEREALE_quantità) is float: 
                            COSTO_RAZIONE.append(costo_FORAGGIO_quantità)
                            COSTO_RAZIONE.append(costo_CEREALE_quantità)  
                            print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))                                        
                            print("Costo dell'alimento <%s>: %f EURO" % (M, costo_FORAGGIO_quantità))
                            print("Costo dell'alimento <%s>: %f EURO" % (MG, costo_CEREALE_quantità))                        
                    
                        else:
                            print("Il prezzo dell'alimento <%s> e/o dell'alimento <%s> non è disponibile!" % (M, MG))

            
                    elif Q and QFP:
                    
                        if type(costo_FORAGGIO_quantità) is float and type(costo_FONTE_PROTEICA_quantità) is float:  
                            COSTO_RAZIONE.append(costo_FORAGGIO_quantità)
                            COSTO_RAZIONE.append(costo_FONTE_PROTEICA_quantità)
                            print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))               
                            print("Costo dell'alimento <%s>: %f EURO" % (M, costo_FORAGGIO_quantità))
                            print("Costo dell'alimento <%s>: %f EURO" % (FE, costo_FONTE_PROTEICA_quantità))

                        else:
                            print("Il prezzo dell'alimento <%s> e/o dell'alimento <%s> non è disponibile!" % (M, FE))

                
                    elif QM and QFP and not Q:
                
                        if type(costo_CEREALE_quantità) is float and type(costo_FONTE_PROTEICA_quantità) is float:
                            COSTO_RAZIONE.append(costo_CEREALE_quantità) 
                            COSTO_RAZIONE.append(costo_FONTE_PROTEICA_quantità)
                            print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))   
                            print("Costo dell'alimento <%s>: %f EURO" % (MG, costo_CEREALE_quantità))
                            print("Costo dell'alimento <%s>: %f EURO" % (FE, costo_FONTE_PROTEICA_quantità)) 
                        else:
                            print("Il prezzo dell'alimento <%s> e/o dell'alimento <%s> non è disponibile!" % (MG, FE))
                                           
                   
                    elif Q and QM and QFP:
                        if type(costo_FORAGGIO_quantità) is float and type(costo_CEREALE_quantità) is float and type(costo_FONTE_PROTEICA_quantità) is float:
                            COSTO_RAZIONE.append(costo_FORAGGIO_quantità)
                            COSTO_RAZIONE.append(costo_CEREALE_quantità)                                   
                            COSTO_RAZIONE.append(costo_FONTE_PROTEICA_quantità)

                            print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                            print("Costo dell'alimento <%s>: %f EURO" % (M, costo_FORAGGIO_quantità))                     
                            print("Costo dell'alimento <%s>: %f EURO" % (MG, costo_CEREALE_quantità))
                            print("Costo dell'alimento <%s>: %f EURO" % (FE, costo_FONTE_PROTEICA_quantità)) 
                        else:
                            print("Il prezzo dell'alimento <%s> e/o dell'alimento <%s> e/o dell'alimento <%s> non è disponibile!" % (M, MG, FE))
                                           
                    COSTO_TOTALE = sum(COSTO_RAZIONE)
                    print('')
                    print('Il costo della razione è %f EURO' % COSTO_TOTALE)
                    if COSTO_TOTALE > PREZZO_MAX:
                        print('Il COSTO TOTALE della razione è > del PREZZO MASSIMO che hai impostato!')
                        print('Prova a scegliere altri alimenti e ricalcola la RAZIONE')
            
            
                else:
                    print('Non posso calcolare il COSTO DELLA RAZIONE: ci sono uno o più alimenti non quotati!') 
            
            
                print('')                
                print('La razione fornisce %f kg di alimento tal quale' % quantità_TOTALE_TAL_QUALE)
                print('La razione fornisce %f kg di Sostanza Secca' % APPORTO_DEFINITIVO_SOSTANZA_SECCA)
                print('')
                print('')
                print('_______________________________________________________________________________________________')
                print('|                         |                    |                         |                    |')
                print('|                         |                    |                         |                    |')
                print('|   PRINCIPIO NUTRITIVO   |      APPORTO       |       Fabbisogno        |     DIFFERENZA     |')
                print('|                         |                    |                         |                    |')
                print('|_________________________|____________________|_________________________|____________________|')
                print('|      Sostanza Secca     |     %f kg   |  %f kg           |  %f kg       |' % (APPORTO_DEFINITIVO_SOSTANZA_SECCA, F[0], DELTA_SOSTANZA_SECCA))
                print('|      PROTEINA GREZZA    |   %f g    |%f g            |%f g        |' % (APPORTO_PROTEINA_GREZZA, F[1], DELTA_PROTEINA_GREZZA))
                print('|   PROTEINA DEGRADABILE  |   %f g    |%f g            |%f g        |' % (APPORTO_PROTEINA_DEGRADABILE, F[2], DELTA_PROTEINA_DEGRADABILE))
                print('| PROTEINA INDEGRADABILE  |   %f g    |%f g            |%f g        |' % (APPORTO_PROTEINA_INDEGRADABILE, F[3], DELTA_PROTEINA_INDEGRADABILE))
                print('|      FIBRA GREZZA       |   %f g    |%f g            |%f g        |' % (APPORTO_FIBRA_GREZZA, F[4], DELTA_FIBRA_GREZZA))
                print('|           NDF           |   %f g    |%f g            |%f g        |' % (APPORTO_NDF, F[5], DELTA_NDF))
                print('|           ADF           |   %f g    |%f g            |%f g        |' % (APPORTO_ADF, F[6], DELTA_ADF))
                print('|         GRASSO          |   %f g    |%f g            |%f g        |' % (APPORTO_GRASSO, F[7], DELTA_GRASSO)) 
                print('|          AMIDO          |   %f g    |%f g            |%f g        |' % (APPORTO_AMIDO, F[8], DELTA_AMIDO))
                print('|        ZUCCHERI         |    %f g    |%f g            |%f g       |' % (APPORTO_ZUCCHERI, F[9], DELTA_ZUCCHERI))
                print('|           Ca            |   %f g      |  %f g           |  %f g     |' % (APPORTO_Ca, F[10], DELTA_Ca))        
                print('|            P            |   %f g      |  %f g            |  %f g      |' % (APPORTO_P, F[11], DELTA_P))        
                print('|           UFL           |     %f      | %f               | %f           |' % (APPORTO_UFL, F[12], DELTA_UFL))        
                print('_______________________________________________________________________________________________')
                print('')
                print('                                               *     *     *                                   ')
                print('')
                print('')
                print('')
                print('******************************************** SOSTANZA SECCA ********************************************')
                print('')
                print('La razione fornisce %f kg di alimento tal quale' % quantità_TOTALE_TAL_QUALE)
                print('')
                print('La razione fornisce %f kg di Sostanza Secca' % APPORTO_DEFINITIVO_SOSTANZA_SECCA)                
                print('')
                DMI_AS_FED_ratio = (APPORTO_DEFINITIVO_SOSTANZA_SECCA/quantità_TOTALE_TAL_QUALE)*100
                print('La tua RAZIONE contiene il %fx100 di SOSTANZA SECCA' % DMI_AS_FED_ratio)
                print('')
                if DMI_AS_FED_ratio < 0.6:
                    print('')
                    print('In estate, in caso di COMPETIZIONE ALIMENTARE x un N° INSUFFICIENTE DI AUTOCATTURANTI (= BOVINE IN PIEDI),')
                    print('se prepari un CARRO MISCELATORE con, per es., un 10x100 in più di razioni (per es., con 100')
                    print('BOVINE IN LATTAZIONE metto nel carro 110 RAZIONI), dal momento che la miscelata rimarrà per più tempo in')
                    print('mangiatoia, potrebbe scaldarsi!')
                    print("Prova a RIDURRE UN PO' L'APPORTO COMPLESSIVO DI FORAGGIO, insilato, per aumentare la SS della razione,")
                    print("o fieno (dipende da che tipo di FORAGGIo hai inserito manualmente), per forzare il programma ad")
                    print("AUMENTARE L'APPORTO DELLA FONTE DI FIBRA DIGERIBILE")
                    print("In questo modo, si dovrebbe attenuare la riduzione dell'ingestione volontaria di fibra scarsamente")
                    print("digeribile (poiché più o meno lignificata), nonché il conseguente CALO DEL TENORE IN GRASSO del latte")
                    print("Tieni anche conto del fatto che, riducendo l'apporto della cosiddetta <FIBRA FISICAMENTE EFFICACE>")
                    print("(quella dei FORAGGI, che fa ruminare), LE BOVINE PRODURRANNO MENO SALIVA (che è il tampone naturale")
                    print("del rumine) e, quindi, dovrai valutare l'inserimento di un TAMPONE ARTIFICIALE, come il bicarbonato")
                    print("di calcio o di sodio, nella razione")    
                print('')
                print('')
                print('******************************************** PROTEINA GREZZA ********************************************')
                print('')
                APPORTO_DEFINITIVO_SOSTANZA_SECCA_g = APPORTO_DEFINITIVO_SOSTANZA_SECCA * 1000
                CP_DMI_ratio = APPORTO_PROTEINA_GREZZA/APPORTO_DEFINITIVO_SOSTANZA_SECCA_g
                print('Rapporto (PROTEINA GREZZA : Sostanza Secca) => %f' % CP_DMI_ratio)
                print('')
                print("Secondo Dell'Orto e Savoini, ad inizio lattazione dovrebbe essere ~ 0.18 (18%)")
                print('')
                if CP_DMI_ratio <= 0.17:
                    print("L'apporto di PROTEINA GREZZA è insufficiente")
                    print("Se avevi scelto una fonte proteica diversa dalla <F.E. DI SOIA>, sostituiscila con quest'ultima!")
                    print("Se non basta, prova a sostituire il fieno di prato stabile o l'insilato di loietto con il <FIENO DI ERBA MEDICA e/o a ridurre l'apporto di insilato (o di pastone) di mais>")         
                print('')
                print('')
                print('********************************************** FIBRA GREZZA **********************************************')
                print('')                       
                FG_DMI_ratio = APPORTO_FIBRA_GREZZA/APPORTO_DEFINITIVO_SOSTANZA_SECCA_g
                print('')                     
                FG_DMI_ratio = APPORTO_FIBRA_GREZZA/APPORTO_DEFINITIVO_SOSTANZA_SECCA_g
                print('')
                print('Rapporto (FIBRA GREZZA : Sostanza Secca) => %f' % FG_DMI_ratio)
                print('')
                print('Dovrebbe essere ~ 0.17 (17%)')
                print('')
                # print('********************************************** NDF **********************************************')  
                APPORTO_NDF_FORAGGI = app_FOR_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3]
                NDF_FORAGGI_NDF_tot_ratio = APPORTO_NDF_FORAGGI/APPORTO_NDF
#           print('Rapporto (NDF da FORAGGI : NDF totale) => %f' % NDF_FORAGGI_NDF_tot_ratio)
#           print('')
#           print('Dovrebbe essere ~ 0.75 (75%)')
                print('')
                print('')           
                print('')
                print('***********************************************************************************************************')
                print('********************************************* FINE DEL REPORT *********************************************')
                print('***********************************************************************************************************')
                
                sys.stdout = original



############################################################################################################################
###################### 3 alimenti auto - metodo => <LYS_MET> INIZIO DEL REDIREZIONAMENTO DELLA STAMPA ######################
############################################################################################################################

                                                    ### 3 ALIMENTI AUTO ###


            elif metodo == 'LYS_MET':



                original = sys.stdout
                sys.stdout = open('%s.txt' % nome_file_razione, 'w')


                
                print('PARAMETRI inseriti da %s, %s %s alle ore %s' % (user, giorno_di_inserimento, data_di_inserimento, ora_di_inserimento))
                print('') 
                print('METODO DI CALCOLO della razione => <%s>' % metodo)
                print('PESO MEDIO ALLA NASCITA => %f kg' % calf_weight)
                print('PESO VIVO MEDIO BOVINE IN LATTAZIONE => %f kg' % LW)
                print('ETÀ MEDIA BOVINE IN LATTAZIONE => %d mesi' % cow_age)
                print('SETTIMANA DI LATTAZIONE media => %d^' % WOL)
                print('SETTIMANA DI GRAVIDANZA media => %d^' % WOP)
                print('LIVELLO PRODUTTIVO medio => %f kg di latte al giorno' % MY)
                print('TENORE DI GRASSO del latte => %fx100' % FAT_milk)
                print('TENORE DI PROTEINA del latte => %fx100' % CP_milk)
                print('TENORE DI LATTOSIO del latte => %fx100' % LAC_milk)
                print('N° DI REPLICHE => %d' % N_repl)
        

                F = []
                F.append(DMI)
                F.append(CP)
                F.append(FG)
                F.append(NDF)
                F.append(ADF)
                F.append(FAT)
                F.append(AM)
                F.append(ZUC)
                F.append(Ca_tot)
                F.append(P_tot)
                F.append(UFL_tot)
                F.append(PDI)


# STAMPA FABBISOGNI LYS_MET

                print('')
                print('')
                print('FABBISOGNI calcolati secondo il METODO <INRA %s>' % metodo)
                print('')
                print('CAPACITÀ DI INGESTIONE => %f kg di Sostanza Secca' % F[0])
                print('Fabbisogno di PROTEINA GREZZA => %f g' % F[1])
                print('Fabbisogno di FIBRA GREZZA => %f g' % F[2])
                print('Fabbisogno di NDF => %f g' % F[3])
                print('Fabbisogno di ADF => %f g' % F[4]) 
                print('Fabbisogno di GRASSO => %f g' % F[5])
                print('Fabbisogno di AMIDO => %f g' % F[6])
                print('Fabbisogno di ZUCCHERI => %f g' % F[7])
                print('Fabbisogno di CALCIO => %f g' % F[8])
                print('Fabbisogno di FOSFORO => %f g' % F[9])
                print('Fabbisogno di ENERGIA NETTA => %f Unità Foraggere Latte' % F[10])
                print('Fabbisogno di PROTEINA  DIGERIBILE INTESTINALE => %f g' % F[11])
                print('')
                


############################################################################################################################
################################### SINGOLI CASI MANTENUTI PER EVENTUALI SVILUPPI FUTURI ###################################
############################################################################################################################



############################################################################################################################            
# METODO <LYS_MET>
# 3 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 1)
# FORAGGIO + MAIS GRANELLA + FONTE PROTEICA inseriti manualmente
# 3 alimenti inseriti manualmente + 3 alimenti inseriti in automatico => TOT 6

                if Q and QM and QFP:
                                           
                    F_arr = F_arr_ricalcolato_QM_FE
                
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI>, <CEREALI> e <FONTI PROTEICHE>')
                    print('')
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DM in kg, ENERGIA NETTA in UFL, tutti gli altri PARAMETRI (CP, FG, NDF, ADF, FAT, AM, ZUC, Ca, P e PDI) in grammi') 
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                              
                    print(F_arr)



############################################################################################################################            
# METODO <LYS_MET>
# 3 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 2)
# FORAGGIO + FONTE PROTEICA inseriti manualmente
# 2 alimenti inseriti manualmente + 3 alimenti inseriti in automatico => TOT 5

                elif Q and QFP:

                    
                    F_arr = F_arr_ricalcolato_FE
                    
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI> e <FONTI PROTEICHE>')      
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(F_arr)
                        
                

############################################################################################################################            
# METODO <LYS_MET>
# 3 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 3)
# FORAGGIO + CEREALE inseriti manualmente
# 2 alimenti inseriti manualmente + 3 alimenti inseriti in automatico => TOT 5

                elif Q and QM and not QFP:

                    F_arr = F_arr_ricalcolato
        
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI> e <CEREALI>')
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')                    
                    print(F_arr)
                                     
            

############################################################################################################################            
# METODO <LYS_MET>
# 3 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 4)
# FORAGGIO inserito manualmente
# 1 alimento inserito manualmente + 3 alimenti inseriti in automatico => TOT 4

                elif Q and not QM and not QFP:
        

                    F_arr = F_arr_FORAGGIo
        
                    print('Hai inserito manualmente solo un alimento della categoria <FORAGGI>')
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(F_arr)



############################################################################################################################            
# METODO <LYS_MET>
# 3 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 5)
# CEREALE inserito manualmente
# 1 alimento inserito manualmente + 3 alimenti inseriti in automatico => TOT 4

                elif QM and not Q and not QFP:                                
            
                    F_arr = F_arr_cereale
                     
                    print('Hai inserito manualmente solo un alimento della categoria <CEREALI>')
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(F_arr)



############################################################################################################################            
# METODO <LYS_MET>
# 3 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 6)
# FONTE PROTEICA inserita manualmente
# 1 alimento inserito manualmente + 3 alimenti inseriti in automatico => TOT 4

                elif QFP and not Q and not QM:
                        
            
                    F_arr = F_arr_FE
                     
                    print('Hai inserito manualmente solo un alimento della categoria <FONTI PROTEICHE>')
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(F_arr)


############################################################################################################################            
# METODO <LYS_MET>
# 3 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 7)
# NESSUN ALIMENTO inserito manualmente
# 0 alimenti inseriti manualmente + 3 alimenti inseriti in automatico => TOT 3

                else:

                    F_arr = F_arr
        
                    print('Nessun alimento inserito manualmente')


                print('')
                print("L'apporto di Sostanza Secca degli alimenti selezionati è %f" % APPORTO_SOSTANZA_SECCA)
                print('')
                


############################################################################################################################            
# METODO <LYS_MET>
# 3 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 1)
# FORAGGIO + MAIS GRANELLA + FONTE PROTEICA inseriti manualmente
# 3 alimenti inseriti manualmente + 3 alimenti inseriti in automatico => TOT 6


                if Q and QM and QFP:
                
                
                
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI>, <CEREALI> e <FONTI PROTEICHE>')
                

                    quantità_TOTALE_TAL_QUALE = Q + QM + QFP + quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_FP_man[0] + app_FOR_man[0] + app_CER_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0]
                    APPORTO_PROTEINA_GREZZA = app_FP_man[1] + app_FOR_man[1] + app_CER_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1]
                    APPORTO_FIBRA_GREZZA = app_FP_man[2] + app_FOR_man[2] + app_CER_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2]
                    APPORTO_NDF = app_FP_man[3] + app_FOR_man[3] + app_CER_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3]
                    APPORTO_ADF = app_FP_man[4] + app_FOR_man[4] + app_CER_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4]
                    APPORTO_GRASSO = app_FP_man[5] + app_FOR_man[5] + app_CER_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5]
                    APPORTO_AMIDO = app_FP_man[6] + app_FOR_man[6] + app_CER_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6]
                    APPORTO_ZUCCHERI = app_FP_man[7] + app_FOR_man[7] + app_CER_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7]
                    APPORTO_Ca = app_FP_man[8] + app_FOR_man[8] + app_CER_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8]
                    APPORTO_P = app_FP_man[9] + app_FOR_man[9] + app_CER_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9]
                    APPORTO_UFL = app_FP_man[10] + app_FOR_man[10] + app_CER_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10]
                    APPORTO_PDI = app_FP_man[11] + app_FOR_man[11] + app_CER_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11]
                
                   
                    print('')
                    print('apporti di %s:' % M)
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(app_FOR_man)
                    print('')

                    print('')
                    print('apporti di %s:' % MG)
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(app_CER_man)
                    print('')
                    
                    print('apporti di %s:' % FE)
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(app_FP_man)
                    print('')

                    print('apporti di %s:' % S[0])
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(random_ARR_2_new)
                    print('')

                             
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')
                                                                     
                    print('%f kg %s' % (Q, M))
                    print('%f kg %s' % (QM, MG))
                    print('%f kg %s' % (QFP, FE))
                                                
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))

                                
                    app_PDIE_man = Q_PDIE + QM_PDIE + QFP_PDIE
                    app_PDIN_man = Q_PDIN + QM_PDIN + QFP_PDIN
                    app_LysDI_man = Q_LysDI + QM_LysDI + QFP_LysDI
                    app_MetDI_man = Q_MetDI + QM_MetDI + QFP_MetDI


                    quantità.append(Q)
                    quantità.append(QM)
                    quantità.append(QFP)
                    quantità.append(quantità_alimento_1[0])
                    quantità.append(quantità_alimento_2[0])
                    quantità.append(quantità_alimento_3[0])                   
                    
                    quantità = np.array(quantità)
                    print(quantità)
                    
                    LISINA_TOT = np.sum(LISINA*quantità)
                    METIONINA_TOT = np.sum(METIONINA*quantità)
                    PDIE_TOT = np.sum(PDIE*quantità)
                    PDIN_TOT = np.sum(PDIN*quantità)
                    
                    LYS_MET_ratio = LISINA_TOT/METIONINA_TOT
                    LysDI_ratio = LISINA_TOT/PDIN_TOT
                    MetDI_ratio = METIONINA_TOT/PDIN_TOT
                    
                    
                    print('')
                    print('Apporto TOTALE PDIE => %f g' % PDIE_TOT)
                    print('')
                    print('Apporto TOTALE PDIN => %f g' % PDIN_TOT)
                    print('')
                    print('Rapporto LISINA / METIONINA => %f' % LYS_MET_ratio)
                    print('')
                    print('Rapporto LISINA / PROTEINA DIGERIBILE => %f' % LysDI_ratio)
                    print('')
                    print('Rapporto METIONINA / PROTEINA DIGERIBILE => %f' % MetDI_ratio)
                    print('')

                    

############################################################################################################################            
# METODO <LYS_MET>
# 3 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 2)
# FORAGGIO + FONTE PROTEICA inseriti manualmente
# 2 alimenti inseriti manualmente + 3 alimenti inseriti in automatico => TOT 5
  
                elif Q and QFP:
                
                
                
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI> e <FONTI PROTEICHE>')


                    quantità_TOTALE_TAL_QUALE = Q + QFP + quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_FP_man[0] + app_FOR_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0]
                    APPORTO_PROTEINA_GREZZA = app_FP_man[1] + app_FOR_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1]
                    APPORTO_FIBRA_GREZZA = app_FP_man[2] + app_FOR_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2]
                    APPORTO_NDF = app_FP_man[3] + app_FOR_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3]
                    APPORTO_ADF = app_FP_man[4] + app_FOR_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4]
                    APPORTO_GRASSO = app_FP_man[5] + app_FOR_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5]
                    APPORTO_AMIDO = app_FP_man[6] + app_FOR_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6]
                    APPORTO_ZUCCHERI = app_FP_man[7] + app_FOR_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7]
                    APPORTO_Ca = app_FP_man[8] + app_FOR_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8]
                    APPORTO_P = app_FP_man[9] + app_FOR_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9]
                    APPORTO_UFL = app_FP_man[10] + app_FOR_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10]
                    APPORTO_PDI = app_FP_man[11] + app_FOR_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11]

                      
                    print('')
                    print('apporti di %s:' % M)
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(app_FOR_man)
                    print('')
                    
                    print('apporti di %s:' % FE)
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(app_FP_man)
                    print('')

                    print('apporti di %s:' % S[0])
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(random_ARR_2_new)
                    print('')

                
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')                                            
                    print('%f kg %s' % (Q, M))
                    print('%f kg %s' % (QFP, FE))
                                                
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))                    
                                
                    print('')
                    print('Rapporto (LISINA / PROTEINA DIGERIBILE) => %f' % LysDI_ratio)
                    print('')
                    print('Rapporto (METIONINA / PROTEINA DIGERIBILE) => %f' % MetDI_ratio)
                    print('')
                    print('Rapporto (LISINA / METIONINA) => %f' % Lys_Met_ratio)
                    print('')
                    if Lys_Met_ratio >= 3.0:
                        print('La razione è carente di METIONINA!')
                        print('')
                        print("Prova a sostituire l'alimento <%s> (CARENTE DI METIONINA) con <girasole farina estrazione>" % FE) 
                                           
                    BFR = (APPORTO_PDI - app_tot_PDIE)/APPORTO_UFL
                    print('')
                    print('La RAZIONE fornisce %f g di PDIN' % APPORTO_PDI)
                    print('')
                    print('La RAZIONE fornisce %f g di PDIE' % app_tot_PDIE)
                    print('')
                    print('Rmic = (PDIN – PDIE)/UFL')
                    print('')
                    print('Rmic = %f' % BFR)
                    print('')
                    if BFR >= -17:
                        
                        print('La RAZIONE è accettabile')
                    else:
                        print('La RAZIONE non è accettabile')
                        print('Prova ad aumentare la quantità di %s' % FE) 



############################################################################################################################            
# METODO <LYS_MET>
# 3 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 3)
# FORAGGIO + CEREALE inseriti manualmente
# 2 alimenti inseriti manualmente + 4 alimenti inseriti in automatico => TOT 6
            
                elif Q and QM and not QFP:
                
                
                
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI> e <CEREALI>')

                                                        
                    quantità_TOTALE_TAL_QUALE = Q + QM + quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_FOR_man[0] + app_CER_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0]
                    APPORTO_PROTEINA_GREZZA = app_FOR_man[1] + app_CER_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1]
                    APPORTO_FIBRA_GREZZA = app_FOR_man[2] + app_CER_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2]
                    APPORTO_NDF = app_FOR_man[3] + app_CER_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3]
                    APPORTO_ADF = app_FOR_man[4] + app_CER_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4]
                    APPORTO_GRASSO = app_FOR_man[5] + app_CER_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5]
                    APPORTO_AMIDO = app_FOR_man[6] + app_CER_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6]
                    APPORTO_ZUCCHERI = app_FOR_man[7] + app_CER_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7]
                    APPORTO_Ca = app_FOR_man[8] + app_CER_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8]
                    APPORTO_P = app_FOR_man[9] + app_CER_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9]
                    APPORTO_UFL = app_FOR_man[10] + app_CER_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10]
                    APPORTO_PDI = app_FOR_man[11] + app_CER_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11]



                    print('')
                    print('apporti di %s:' % M)
                    print('')
                    print(app_FOR_man)
                    print('')
                    print('apporti di %s:' % MG)
                    print('')
                    print(app_CER_man)
                    print('')        
                                                                          
                    print('apporti di %s:' % S[0])
                    print('')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print(random_ARR_2_new)
                    print('')
                
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')
                    print('%f kg %s' % (QM, MG))                                                 
                    print('%f kg %s' % (Q, M))
                                                
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))
                        
                  
                    print('')
                    print('Rapporto (LISINA / PROTEINA DIGERIBILE) => %f' % LysDI_ratio)
                    print('')
                    print('Rapporto (METIONINA / PROTEINA DIGERIBILE) => %f' % MetDI_ratio)
                    print('')
                    print('Rapporto (LISINA / METIONINA) => %f' % Lys_Met_ratio)
                    print('')
                    if Lys_Met_ratio >= 3.0:
                        print('La razione è carente di METIONINA!')
                        print('')
                        print("Prova a sostituire l'alimento <%s> (CARENTE DI METIONINA) con <girasole farina estrazione>" % FE) 
                                          
                    BFR = (APPORTO_PDI - app_tot_PDIE)/APPORTO_UFL
                    print('')
                    print('La RAZIONE fornisce %f g di PDIN' % APPORTO_PDI)
                    print('')
                    print('La RAZIONE fornisce %f g di PDIE' % app_tot_PDIE)
                    print('')
                    print('Rmic = (PDIN – PDIE)/UFL')
                    print('')
                    print('Rmic = %f' % BFR)
                    print('')
                    if BFR >= -17:
                        
                        print('La RAZIONE è accettabile')
                    else:
                        print('La RAZIONE non è accettabile')
                        print('Prova ad aumentare la quantità di %s' % FE) 
                    


############################################################################################################################            
# METODO <LYS_MET>
# 3 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 4)
# FORAGGIO inserito manualmente
# 1 alimento inserito manualmente + 3 alimenti inseriti in automatico => TOT 4

                elif Q and not QM and not QFP:
                
  
                
                    print('Hai inserito manualmente un alimento per la categoria <FORAGGI>') 


                    quantità_TOTALE_TAL_QUALE = Q + quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_FOR_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0]
                    APPORTO_PROTEINA_GREZZA = app_FOR_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1]
                    APPORTO_FIBRA_GREZZA = app_FOR_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2]
                    APPORTO_NDF = app_FOR_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3]
                    APPORTO_ADF = app_FOR_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4]
                    APPORTO_GRASSO = app_FOR_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5]
                    APPORTO_AMIDO = app_FOR_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6]
                    APPORTO_ZUCCHERI = app_FOR_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7]
                    APPORTO_Ca = app_FOR_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8]
                    APPORTO_P = app_FOR_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9]
                    APPORTO_UFL = app_FOR_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10]
                    APPORTO_PDI = app_FOR_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11]


                    print('')
                    print('apporti di %s:' % M)
                    print('')
                    print(app_FOR_man)
                    print('')  
                                        
                    print('apporti di %s:' % S[0])
                    print('')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print(random_ARR_2_new)
                    print('')
                    print('apporti di %s:' % S[3])
                    print('')
                    print(random_ARR_3_new)
                    print('')
                    
                  
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')                       
                    print('%f kg %s' % (Q, M))
                                                
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))
                    print('%f kg %s' % (quantità_alimento_4[0], S[3]))
            
                   
                    print('')
                    print('Rapporto (LISINA / PROTEINA DIGERIBILE) => %f' % LysDI_ratio)
                    print('')
                    print('Rapporto (METIONINA / PROTEINA DIGERIBILE) => %f' % MetDI_ratio)
                    print('')
                    print('Rapporto (LISINA / METIONINA) => %f' % Lys_Met_ratio)
                    print('')
                    if Lys_Met_ratio >= 3.0:
                        print('La razione è carente di METIONINA!')
                        print('')
                        print("Prova a sostituire l'alimento <%s> (CARENTE DI METIONINA) con <girasole farina estrazione>" % FE) 
                       
                    
                    BFR = (APPORTO_PDI - app_tot_PDIE)/APPORTO_UFL
                    print('')
                    print('La RAZIONE fornisce %f g di PDIN' % APPORTO_PDI)
                    print('')
                    print('La RAZIONE fornisce %f g di PDIE' % app_tot_PDIE)
                    print('')
                    print('Rmic = (PDIN – PDIE)/UFL')
                    print('')
                    print('Rmic = %f' % BFR)
                    print('')
                    if BFR >= -17:
                        
                        print('La RAZIONE è accettabile')
                    else:
                        print('La RAZIONE non è accettabile')
                        print('Prova ad aumentare la quantità di %s' % FE) 
                    


############################################################################################################################            
# METODO <LYS_MET>
# 3 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 5)
# CEREALE inserito manualmente
# 1 alimento inserito manualmente + 3 alimenti inseriti in automatico => TOT 4

                elif QM and not Q and not QFP:
                
                
                
                    print('Hai inserito manualmente un alimento per la categoria <CEREALI>') 



                    quantità_TOTALE_TAL_QUALE = QM + quantità_alimento_1[0] + quantità_alimento_2[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_CER_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0]
                    APPORTO_PROTEINA_GREZZA = app_CER_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1]
                    APPORTO_FIBRA_GREZZA = app_CER_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2]
                    APPORTO_NDF = app_CER_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3]
                    APPORTO_ADF = app_CER_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4]
                    APPORTO_GRASSO = app_CER_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5]
                    APPORTO_AMIDO = app_CER_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6]
                    APPORTO_ZUCCHERI = app_CER_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7]
                    APPORTO_Ca = app_CER_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8]
                    APPORTO_P = app_CER_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9]
                    APPORTO_UFL = app_CER_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10]
                    APPORTO_PDI = app_CER_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11]


                    print('')
                    print('apporti di %s:' % MG)
                    print('')
                    print(app_CER_man)
                    print('')  
                                        
                    print('apporti di %s:' % S[0])
                    print('')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print(random_ARR_2_new)
                    print('')
                    
                
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')
                    print('%f kg %s' % (QM, MG))                                                 
                                                
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))
                    
                    
                    print('')
                    print('Rapporto (LISINA / PROTEINA DIGERIBILE) => %f' % LysDI_ratio)
                    print('')
                    print('Rapporto (METIONINA / PROTEINA DIGERIBILE) => %f' % MetDI_ratio)
                    print('')
                    print('Rapporto (LISINA / METIONINA) => %f' % Lys_Met_ratio)
                    print('')
                    if Lys_Met_ratio >= 3.0:
                        print('La razione è carente di METIONINA!')
                        print('')
                        print("Prova a sostituire l'alimento <%s> (CARENTE DI METIONINA) con <girasole farina estrazione>" % FE) 
                       
                    
                    BFR = (APPORTO_PDI - app_tot_PDIE)/APPORTO_UFL
                    print('')
                    print('La RAZIONE fornisce %f g di PDIN' % APPORTO_PDI)
                    print('')
                    print('La RAZIONE fornisce %f g di PDIE' % app_tot_PDIE)
                    print('')
                    print('Rmic = (PDIN – PDIE)/UFL')
                    print('')
                    print('Rmic = %f' % BFR)
                    print('')
                    if BFR >= -17:
                        
                        print('La RAZIONE è accettabile')
                    else:
                        print('La RAZIONE non è accettabile')
                        print('Prova ad aumentare la quantità di %s' % FE) 
                    



############################################################################################################################            
# METODO <LYS_MET>
# 3 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 7)
# NESSUN ALIMENTO inserito manualmente
# 0 alimenti inseriti manualmente + 3 alimenti inseriti in automatico => TOT 3

                else:
                
                
                
                    print('Non hai inserito manualmente alcun alimento')


                    quantità_TOTALE_TAL_QUALE = quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0]
                    APPORTO_PROTEINA_GREZZA = random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1]
                    APPORTO_FIBRA_GREZZA = random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2]
                    APPORTO_NDF = random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3]
                    APPORTO_ADF = random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4]
                    APPORTO_GRASSO = random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5]
                    APPORTO_AMIDO = random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6]
                    APPORTO_ZUCCHERI = random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7]
                    APPORTO_Ca = random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8]
                    APPORTO_P = random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9]
                    APPORTO_UFL = random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10]
                    APPORTO_PDI = random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11]



                    print('apporti di %s:' % S[0])
                    print('')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print(random_ARR_2_new)
                    
                    
                    print('')
                    print('Rapporto (LISINA / PROTEINA DIGERIBILE) => %f' % LysDI_ratio)
                    print('')
                    print('Rapporto (METIONINA / PROTEINA DIGERIBILE) => %f' % MetDI_ratio)
                    print('')
                    print('Rapporto (LISINA / METIONINA) => %f' % Lys_Met_ratio)
                    print('')
                    if Lys_Met_ratio >= 3.0:
                        print('La razione è carente di METIONINA!')
                        print('')
                        print("Prova a sostituire l'alimento <%s> (CARENTE DI METIONINA) con <girasole farina estrazione>" % FE) 
                       
                    
                    BFR = (APPORTO_PDI - app_tot_PDIE)/APPORTO_UFL
                    print('')
                    print('La RAZIONE fornisce %f g di PDIN' % APPORTO_PDI)
                    print('')
                    print('La RAZIONE fornisce %f g di PDIE' % app_tot_PDIE)
                    print('')
                    print('Rmic = (PDIN – PDIE)/UFL')
                    print('')
                    print('Rmic = %f' % BFR)
                    print('')
                    if BFR >= -17:
                        
                        print('La RAZIONE è accettabile')
                    else:
                        print('La RAZIONE non è accettabile')
                        print('Prova ad aumentare la quantità di %s' % FE) 
                    



          
############################################################################################################################

        except NameError:
            print('ERRORE!')
            


        if metodo == 'LYS_MET':
            
                
      
            A = []
            A.append(APPORTO_DEFINITIVO_SOSTANZA_SECCA)
            A.append(APPORTO_PROTEINA_GREZZA)
            A.append(APPORTO_FIBRA_GREZZA)
            A.append(APPORTO_NDF)
            A.append(APPORTO_ADF)
            A.append(APPORTO_GRASSO)
            A.append(APPORTO_AMIDO)
            A.append(APPORTO_ZUCCHERI)
            A.append(APPORTO_Ca)
            A.append(APPORTO_P)
            A.append(APPORTO_UFL)
            A.append(APPORTO_PDI)
            
        
            try:
                with open('%s.txt' % nome_file_apporti, 'w') as external_file:
                    print(A, file=external_file)
                external_file.close()
            except NameError:
                with open('nuovi_apporti.txt', 'w') as external_file:
                    print(A, file=external_file)
                external_file.close()
            

            try:
                with open('%s.txt' % nome_file_fabbisogni, 'w') as external_file:
                    print(F, file=external_file)
                external_file.close()
            except NameError:
                with open('nuovi_fabbisogni.txt', 'w') as external_file:
                    print(A, file=external_file)
                external_file.close()

            
            print('')
            print('Ho salvato i PARAMETRI nel FILE DI TESTO <%s.txt>' % nome_file_parametri)
            print('')
            print('Ho salvato i FABBISOGNI nel FILE DI TESTO <%s.txt>' % nome_file_fabbisogni)
            print('')
            print('Ho salvato gli APPORTI nel FILE DI TESTO <%s.txt>' % nome_file_apporti)
            print('')
            print('Ho salvato i DATI nel FILE DI TESTO <%s.py>' % nome_file_dati)
            print('')
            print('Ho salvato le quantità nel FILE DI TESTO <%s.py>' % nome_file_quantità)
            print('')
            print('Ho salvato la RAZIONE nel FILE DI TESTO <%s.txt>' % nome_file_razione)
            print('')

        
            DELTA_SOSTANZA_SECCA = APPORTO_DEFINITIVO_SOSTANZA_SECCA - F[0]
            DELTA_PROTEINA_GREZZA = APPORTO_PROTEINA_GREZZA - F[1]
            DELTA_FIBRA_GREZZA = APPORTO_FIBRA_GREZZA - F[2]
            DELTA_NDF = APPORTO_NDF - F[3]
            DELTA_ADF = APPORTO_ADF - F[4]
            DELTA_GRASSO = APPORTO_GRASSO - F[5]
            DELTA_AMIDO = APPORTO_AMIDO - F[6]
            DELTA_ZUCCHERI = APPORTO_ZUCCHERI - F[7]
            DELTA_Ca = APPORTO_Ca - F[8]
            DELTA_P = APPORTO_P - F[9]
            DELTA_UFL = APPORTO_UFL - F[10]
            DELTA_PDI = APPORTO_PDI - F[11]
        
                              
            print('')
            print('')
            if i == N_repl-1:
                print('Il calcolo della razione non ha avuto SUCCESSO; per favore cancella gli alimenti inseriti e riprova.')
            elif i < N_repl-1:
                print('Il CALCOLO DELLA RAZIONE è stato effettuato con SUCCESSO alla %d^ replica!' % i)        
            print('')
        
                        
            print("Il FABBISOGNO DI SOSTANZA SECCA (che dev'essere soddisfatto dagli alimenti aggiunti) delle bovine del gruppo <%s> è di %f kg" %  (gruppo, F_arr[0]))
            print('')
            print("L'APPORTO DI SOSTANZA SECCA degli alimenti selezionati è di %f kg" % APPORTO_SOSTANZA_SECCA)
            print('')

            print('')        
            print('LEGENDA')
            print('')
            print("DM => Dry Matter (Apporto di Sostanza Secca)")
            print("CP => Crude Protein (Apporto di PROTEINA GREZZA)")
            print("FG => FIBRA GREZZA (apporto di FIBRA GREZZA)")
            print("NDF => NDF (apporto di Fibra resistente al Detergente Neutro)")
            print("ADF => ADF (apporto di Fibra resistente al Detergente Acido)")
            print("FAT => Fat (apporto di GRASSO)")
            print("AM => AMIDO (apporto di AMIDO)")
            print("ZUC => ZUCCHERI (apporto di ZUCCHERI)")
            print("Ca => Calcio (apporto di Calcio)")
            print("P => Fosforo (apporto di Fosforo)")
            print("UFL => Unità Foraggere Latte (apporto di Energia Netta)")
            print("PDI => Proteina Digeribile Intestinale (apporto di PDI)")
            print('')
            print('')
            print('DMI','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PFI')
            
            
            if len(PREZZI) == len(S):

                print('')
                for i in list(range(len(PREZZI))):
                    print("Prezzo dell'alimento <%s> => %f EURO/ton" % (S[i], PREZZI[i]))
                print('')
                print('********************************************************************')
                print('')
            else:
                print('Impossibile creare la TABELLA DEI PREZZI: ci sono uno o più alimenti non quotati!')


            
            if len(PREZZI) == len(S):

            
                costo_alimento_1 = quantità_alimento_1[0] * PREZZI[0] / 1000
                costo_alimento_2 = quantità_alimento_2[0] * PREZZI[1] / 1000
                costo_alimento_3 = quantità_alimento_3[0] * PREZZI[2] / 1000
                
                          
                COSTO_RAZIONE = []            
                COSTO_RAZIONE.append(costo_alimento_1)
                COSTO_RAZIONE.append(costo_alimento_2)
                COSTO_RAZIONE.append(costo_alimento_3)                
                
            
                if Q and not QM and not QFP:
                            
                    if type(costo_FORAGGIO_quantità) is float: 
                        COSTO_RAZIONE.append(costo_FORAGGIO_quantità)
                        print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                        print("Costo dell'alimento <%s>: %f EURO" % (M, costo_FORAGGIO_quantità))

                    else:
                        print("Il prezzo dell'alimento <%s> non è disponibile!" % M) 

                
                elif QM and not Q and not QFP:                
                
                    if type(costo_CEREALE_quantità) is float:
                        COSTO_RAZIONE.append(costo_CEREALE_quantità)  
                        print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                        print("Costo dell'alimento <%s>: %f EURO" % (MG, costo_CEREALE_quantità))

                    else:
                        print("Il prezzo dell'alimento <%s> non è disponibile!" % MG) 

            
                elif QFP and not Q and not QM:
                
                    if type(costo_FONTE_PROTEICA_quantità) is float:
                        COSTO_RAZIONE.append(costo_FONTE_PROTEICA_quantità)
                        print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                        print("Costo dell'alimento <%s>: %f EURO" % (FE, costo_FONTE_PROTEICA_quantità))
                    else:
                        print("Il prezzo dell'alimento <%s> non è disponibile!" % FE)

            
                elif Q and QM and not QFP:
                
                    if type(costo_FORAGGIO_quantità) is float and type(costo_CEREALE_quantità) is float: 
                        COSTO_RAZIONE.append(costo_FORAGGIO_quantità)
                        COSTO_RAZIONE.append(costo_CEREALE_quantità)  
                        print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))           
                        print("Costo dell'alimento <%s>: %f EURO" % (M, costo_FORAGGIO_quantità))
                        print("Costo dell'alimento <%s>: %f EURO" % (MG, costo_CEREALE_quantità))                        
                    
                    else:
                        print("Il prezzo dell'alimento <%s> e/o dell'alimento <%s> non è disponibile!" % (M, MG))

            
                elif Q and QFP:
                
                    if type(costo_FORAGGIO_quantità) is float and type(costo_FONTE_PROTEICA_quantità) is float:  
                        COSTO_RAZIONE.append(costo_FORAGGIO_quantità)
                        COSTO_RAZIONE.append(costo_FONTE_PROTEICA_quantità)
                        print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))                
                        print("Costo dell'alimento <%s>: %f EURO" % (M, costo_FORAGGIO_quantità))
                        print("Costo dell'alimento <%s>: %f EURO" % (FE, costo_FONTE_PROTEICA_quantità))

                    else:
                        print("Il prezzo dell'alimento <%s> e/o dell'alimento <%s> non è disponibile!" % (M, FE))

                
                elif QM and QFP and not Q:
                
                    if type(costo_CEREALE_quantità) is float and type(costo_FONTE_PROTEICA_quantità) is float:
                        COSTO_RAZIONE.append(costo_CEREALE_quantità) 
                        COSTO_RAZIONE.append(costo_FONTE_PROTEICA_quantità)
                        print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))                  
                        print("Costo dell'alimento <%s>: %f EURO" % (MG, costo_CEREALE_quantità))
                        print("Costo dell'alimento <%s>: %f EURO" % (FE, costo_FONTE_PROTEICA_quantità)) 
                    else:
                        print("Il prezzo dell'alimento <%s> e/o dell'alimento <%s> non è disponibile!" % (MG, FE))
                                           
                   
                elif Q and QM and QFP:
                    if type(prezzo_FORAGGIO_quantità) is float and type(prezzo_CEREALE_quantità) is float and type(prezzo_FONTE_PROTEICA_quantità) is float:
                        COSTO_RAZIONE.append(costo_FORAGGIO_quantità)
                        COSTO_RAZIONE.append(costo_CEREALE_quantità)                                   
                        COSTO_RAZIONE.append(costo_FONTE_PROTEICA_quantità)

                        print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                        print("Costo dell'alimento <%s>: %f EURO" % (M, costo_FORAGGIO_quantità))                     
                        print("Costo dell'alimento <%s>: %f EURO" % (MG, costo_CEREALE_quantità))
                        print("Costo dell'alimento <%s>: %f EURO" % (FE, costo_FONTE_PROTEICA_quantità)) 
                    else:
                        print("Il prezzo dell'alimento <%s> e/o dell'alimento <%s> e/o dell'alimento <%s> non è disponibile!" % (M, MG, FE))
                                           
                COSTO_TOTALE = sum(COSTO_RAZIONE)
                print('')
                print('Il costo della razione è %f EURO' % COSTO_TOTALE)
                if COSTO_TOTALE > PREZZO_MAX:
                    print('Il COSTO TOTALE della razione è > del PREZZO MASSIMO che hai impostato!')
                    print('Prova a scegliere altri alimenti e ricalcola la RAZIONE')
            
            
            else:
                print('Non posso calcolare il COSTO DELLA RAZIONE: ci sono uno o più alimenti non quotati!') 
            
            
            print('')                
            print('')
            print('')
            print('_______________________________________________________________________________________________')
            print('|                         |                    |                         |                    |')
            print('|                         |                    |                         |                    |')
            print('|   PRINCIPIO NUTRITIVO   |      APPORTO       |       Fabbisogno        |     DIFFERENZA     |')
            print('|                         |                    |                         |                    |')
            print('|_________________________|____________________|_________________________|____________________|')
            print('|      Sostanza Secca     |     %f kg   |  %f kg           |  %f kg       |' % (APPORTO_DEFINITIVO_SOSTANZA_SECCA, F[0], DELTA_SOSTANZA_SECCA))
            print('|      PROTEINA GREZZA    |   %f g    |%f g            |%f g        |' % (APPORTO_PROTEINA_GREZZA, F[1], DELTA_PROTEINA_GREZZA))
            print('|      FIBRA GREZZA       |   %f g    |%f g            |%f g        |' % (APPORTO_FIBRA_GREZZA, F[2], DELTA_FIBRA_GREZZA))
            print('|           NDF           |   %f g    |%f g            |%f g        |' % (APPORTO_NDF, F[3], DELTA_NDF))
            print('|           ADF           |   %f g    |%f g            |%f g        |' % (APPORTO_ADF, F[4], DELTA_ADF))
            print('|         GRASSO          |   %f g    |%f g            |%f g        |' % (APPORTO_GRASSO, F[5], DELTA_GRASSO)) 
            print('|          AMIDO          |   %f g    |%f g            |%f g        |' % (APPORTO_AMIDO, F[6], DELTA_AMIDO))
            print('|        ZUCCHERI         |    %f g    |%f g            |%f g       |' % (APPORTO_ZUCCHERI, F[7], DELTA_ZUCCHERI))
            print('|           Ca            |   %f g      |  %f g           |  %f g     |' % (APPORTO_Ca, F[8], DELTA_Ca))        
            print('|            P            |   %f g      |  %f g            |  %f g      |' % (APPORTO_P, F[9], DELTA_P))        
            print('|           UFL           |     %f      | %f               | %f           |' % (APPORTO_UFL, F[10], DELTA_UFL))
            print('|           PDI           |     %f      | %f               | %f           |' % (APPORTO_PDI, F[11], DELTA_PDI))        
            print('_______________________________________________________________________________________________')
            print('')
            print('')
            print('')
            print('******************************************** SOSTANZA SECCA ********************************************')
            print('')
            print('La razione fornisce %f kg di alimento tal quale' % quantità_TOTALE_TAL_QUALE)
            print('')
            print('La razione fornisce %f kg di Sostanza Secca' % APPORTO_DEFINITIVO_SOSTANZA_SECCA)            
            print('')
            DMI_AS_FED_ratio = (APPORTO_DEFINITIVO_SOSTANZA_SECCA/quantità_TOTALE_TAL_QUALE)*100
            print('La tua RAZIONE contiene il %fx100 di SOSTANZA SECCA' % DMI_AS_FED_ratio)
            print('')
            if DMI_AS_FED_ratio < 0.6:
                print('')
                print('In estate, in caso di COMPETIZIONE ALIMENTARE x un N° INSUFFICIENTE DI AUTOCATTURANTI (= BOVINE IN PIEDI),')
                print('se prepari un CARRO MISCELATORE con, per es., un 10x100 in più di razioni (per es., con 100')
                print('BOVINE IN LATTAZIONE metto nel carro 110 RAZIONI), dal momento che la miscelata rimarrà per più tempo in')
                print('mangiatoia, potrebbe scaldarsi!')
                print("Prova a RIDURRE UN PO' L'APPORTO COMPLESSIVO DI FORAGGIO, insilato, per aumentare la SS della razione,")
                print("o fieno (dipende da che tipo di FORAGGIo hai inserito manualmente), per forzare il programma ad")
                print("AUMENTARE L'APPORTO DELLA FONTE DI FIBRA DIGERIBILE")
                print("In questo modo, si dovrebbe attenuare la riduzione dell'ingestione volontaria di fibra scarsamente")
                print("digeribile (poiché più o meno lignificata), nonché il conseguente CALO DEL TENORE IN GRASSO del latte")
                print("Tieni anche conto del fatto che, riducendo l'apporto della cosiddetta <FIBRA FISICAMENTE EFFICACE>")
                print("(quella dei FORAGGI, che fa ruminare), LE BOVINE PRODURRANNO MENO SALIVA (che è il tampone naturale")
                print("del rumine) e, quindi, dovrai valutare l'inserimento di un TAMPONE ARTIFICIALE, come il bicarbonato")
                print("di calcio o di sodio, nella razione")    
            print('')
            print('')
            print('******************************************** PROTEINA GREZZA ********************************************')
            print('')
            APPORTO_DEFINITIVO_SOSTANZA_SECCA_g = APPORTO_DEFINITIVO_SOSTANZA_SECCA * 1000
            CP_DMI_ratio = APPORTO_PROTEINA_GREZZA/APPORTO_DEFINITIVO_SOSTANZA_SECCA_g
            print('Rapporto (PROTEINA GREZZA : Sostanza Secca) => %f' % CP_DMI_ratio)
            print('')
            print("Secondo Dell'Orto e Savoini, ad inizio lattazione dovrebbe essere ~ 0.18 (18%)")
            print('')
            if CP_DMI_ratio <= 0.17:
                print("L'apporto di PROTEINA GREZZA è insufficiente")
                print("Se avevi scelto una fonte proteica diversa dalla <F.E. DI SOIA>, sostituiscila con quest'ultima!")
                print("Se non basta, prova a sostituire il fieno di prato stabile o l'insilato di loietto con il <FIENO DI ERBA MEDICA e/o a ridurre l'apporto di insilato (o di pastone) di mais>")         
            print('')
            print('')


            print('******************************************* LISINA & METIONINA *******************************************')
            print('')
            print('Rapporto (LISINA / PROTEINA DIGERIBILE) => %f' % LysDI_ratio)
            print('')
            print('Rapporto (METIONINA / PROTEINA DIGERIBILE) => %f' % MetDI_ratio)
            print('')
            
            rapporto_Lys_Met = LysDI_ratio/MetDI_ratio

            print('Rapporto (LISINA / METIONINA) => %f' % rapporto_Lys_Met)
            print('')
            if rapporto_Lys_Met >= 3.0:
                print('La razione contiene un eccesso di LISINA!')
                print('')
                print('Dovrebbe essere > 2.7 e < 3.0')
                print('')
                print("Se hai scelto come FONTE DI PROTEINA un alimento CARENTE DI METIONINA, prova a sostituirlo con la <farina estrazione di girasole>")

            print('')
            print('')      
            print('')
            print('')           
            print('*********************************************** PDIN & PDIE ***********************************************')        
            
            BFR = (APPORTO_PDI - PDIE_TOT)/APPORTO_UFL
            print('')
            print('La RAZIONE fornisce %f g di PDIN' % PDIN_TOT)
            print('')
            print('La RAZIONE fornisce %f g di PDIE' % PDIE_TOT)
            print('')
            print('Rmic = (PDIN – PDIE)/UFL')
            print('')
            print('Rmic = %f' % BFR)
            print('')
            if BFR >= -17:                       
                print('La RAZIONE è accettabile')
                print('')
            else:
                print('La RAZIONE non è accettabile')
                print('Prova ad aumentare la quantità di %s' % FE)
            print('')
            print('')


            print('********************************************** FIBRA GREZZA **********************************************')                   
            FG_DMI_ratio = APPORTO_FIBRA_GREZZA/APPORTO_DEFINITIVO_SOSTANZA_SECCA_g
            print('')                 
            FG_DMI_ratio = APPORTO_FIBRA_GREZZA/APPORTO_DEFINITIVO_SOSTANZA_SECCA_g
            print('')
            print('Rapporto (FIBRA GREZZA : Sostanza Secca) => %f' % FG_DMI_ratio)
            print('')
            print('Dovrebbe essere ~ 0.17 (17%)')
            print('')
            # print('********************************************** NDF **********************************************')  
            APPORTO_NDF_FORAGGI = app_FOR_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3]
            NDF_FORAGGI_NDF_tot_ratio = APPORTO_NDF_FORAGGI/APPORTO_NDF
#           print('Rapporto (NDF da FORAGGI : NDF totale) => %f' % NDF_FORAGGI_NDF_tot_ratio)
#           print('')
#           print('Dovrebbe essere ~ 0.75 (75%)')
            print('')
            print('')           
            print('')
            print('***********************************************************************************************************')
            print('********************************************* FINE DEL REPORT *********************************************')
            print('***********************************************************************************************************')
            
            sys.stdout = original



        
#################################################################################################################
################################## 4 ALIMENTI INSERITI AUTOMATICAMENTE ##########################################
#################################################################################################################
                                        
                                        

    elif len(S) == 4:
    
        print('')
        print('Questo TESTO viene visualizzato sul terminale, non inserito nel file!')
        print('')
        if day == 'Monday': 
            print('RAZIONE di %s, creata Lunedì %s, %s' % (user, data, current_time))
        if day == 'Tuesday': 
            print('RAZIONE di %s, creata Martedì %s, %s' % (user, data, current_time))
        if day == 'Wednesday': 
            print('RAZIONE di %s, creata Mercoledì %s, %s' % (user, data, current_time))
        if day == 'Thursday': 
            print('RAZIONE di %s, creata Giovedì %s, %s' % (user, data, current_time))
        if day == 'Friday': 
            print('RAZIONE di %s, creata Venerdì %s, %s' % (user, data, current_time))
        if day == 'Saturday': 
            print('RAZIONE di %s, creata Sabato %s, %s' % (user, data, current_time))
        if day == 'Sunday': 
            print('RAZIONE di %s, creata Domenica %s, %s' % (user, data, current_time))

        print('')
        print('Hai inserito 4 alimenti:')
        print('')
        print('ALIMENTO 1 => <%s>' % S[0])
        print('ALIMENTO 2 => <%s>' % S[1])
        print('ALIMENTO 3 => <%s>' % S[2])
        print('ALIMENTO 4 => <%s>' % S[3])
        print('')
        
        print(ARR[0])
        print(ARR[1])
        print(ARR[2])
        print(ARR[3])
        
                
        random_ARR_0_old = ARR[0] * random.random() * 10
        random_ARR_1_old = ARR[1] * random.random() * 10
        random_ARR_2_old = ARR[2] * random.random() * 10
        random_ARR_3_old = ARR[3] * random.random() * 10

        
# ogni alimento scelto dall'utente viene moltiplicato per un numero casuale compreso fra 0 e 10 (kg) 
# dichiaro random_ARR_x_old

        
        random_ARR_0_new = random_ARR_0_old * (random.random() + 0.5)
        random_ARR_1_new = random_ARR_1_old * (random.random() + 0.5)
        random_ARR_2_new = random_ARR_2_old * (random.random() + 0.5)
        random_ARR_3_new = random_ARR_3_old * (random.random() + 0.5)
        
# dichiaro random_ARR_x_new
        
        SOMMA_old = random_ARR_0_old + random_ARR_1_old + random_ARR_2_old + random_ARR_3_old

###########################################################################################################################################        
        
        print(SOMMA_old)
        print(F_arr)
        
        DELTA_old = SOMMA_old - F_arr
        print('La somma iniziale è...')
        print(SOMMA_old)

# dichiaro SOMMA_old e DELTA_old

        SOMMA_new = random_ARR_0_new + random_ARR_1_new + random_ARR_2_new + random_ARR_3_new
        DELTA_new = SOMMA_new - F_arr
        print('La nuova somma è...')
        print(SOMMA_new)
        print('La nuova differenza è...')
        print(DELTA_new)

# dichiaro SOMMA_new e DELTA_new
        
        quantità_alimento_1 = random_ARR_0_new / ARR[0]
        quantità_alimento_2 = random_ARR_1_new / ARR[1]
        quantità_alimento_3 = random_ARR_2_new / ARR[2]
        quantità_alimento_4 = random_ARR_3_new / ARR[3]
        
# dichiaro gli apporti dei singoli alimenti


        i = 0

# inizializzo il contatore i        
        
        for i in range(N_repl):
        
            rules = [abs(DELTA_new[0]) < abs(DELTA_old[0]), abs(DELTA_new[1]) < abs(DELTA_old[1]), abs(DELTA_new[2]) < abs(DELTA_old[2])]

# dichiaro le regole da rispettare
                                    
            if all(rules):
            
                print('ESTRAGGO DALLA PROPOSAL DISTRIBUTION')
                i += 1
                print(i)
                                                         	               	        
                random_ARR_0_new = random_ARR_0_new * (random.random() + 0.5)
                random_ARR_1_new = random_ARR_1_new * (random.random() + 0.5)
                random_ARR_2_new = random_ARR_2_new * (random.random() + 0.5)
                random_ARR_3_new = random_ARR_3_new * (random.random() + 0.5)
                
# ACCETTO random_ARR_x_new e lo uso per aggiornare random_ARR_x_new stesso 
                
                APPORTO_SOSTANZA_SECCA = random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0] + random_ARR_3_new[0]
                print(APPORTO_SOSTANZA_SECCA)

# aggiorno l'apporto di SS
                                
                SOMMA_new = random_ARR_0_new + random_ARR_1_new + random_ARR_2_new + random_ARR_3_new
                DELTA_new = SOMMA_new - F_arr
                
# aggiorno SOMMA_new e DELTA_new                
                
                print('La nuova somma è...')
                print(SOMMA_new)
                print('La nuova differenza è...')
                print(DELTA_new)
            
                quantità_alimento_1 = random_ARR_0_new / ARR[0]
                quantità_alimento_2 = random_ARR_1_new / ARR[1]
                quantità_alimento_3 = random_ARR_2_new / ARR[2]
                quantità_alimento_4 = random_ARR_3_new / ARR[3]
                
                if round(APPORTO_SOSTANZA_SECCA) == round(F_arr[0]):
                
                    break
                                
                print('')                
                print("SUCCESSO! L'APPORTO di Sostanza Secca corrisponde al FABBISOGNO.")

                    	                
            else:
                    
                random_ARR_0_new = random_ARR_0_old * (random.random() + 0.5)
                random_ARR_1_new = random_ARR_1_old * (random.random() + 0.5)
                random_ARR_2_new = random_ARR_2_old * (random.random() + 0.5)
                random_ARR_3_new = random_ARR_3_old * (random.random() + 0.5)
                
# RIFIUTO random_ARR_x_new e lo ricalcolo a partire da random_ARR_x_old 
                
                print('FALLIMENTO')
                
                APPORTO_SOSTANZA_SECCA = random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0] + random_ARR_3_new[0]

                                
                SOMMA_new = random_ARR_0_new + random_ARR_1_new + random_ARR_2_new + random_ARR_3_new
                DELTA_new = SOMMA_new - F_arr
                                                
                print('La nuova somma è...')
                print(SOMMA_new)
                print('La nuova differenza è...')
                print(DELTA_new)
                
            
                quantità_alimento_1 = random_ARR_0_new / ARR[0]
                quantità_alimento_2 = random_ARR_1_new / ARR[1]
                quantità_alimento_3 = random_ARR_2_new / ARR[2]
                quantità_alimento_4 = random_ARR_3_new / ARR[3]


                random_ARR_0_new_ROUND = list(map(arrotonda, random_ARR_0_new))
                random_ARR_1_new_ROUND = list(map(arrotonda, random_ARR_1_new))
                random_ARR_2_new_ROUND = list(map(arrotonda, random_ARR_2_new))
                random_ARR_3_new_ROUND = list(map(arrotonda, random_ARR_3_new))


                
############################################################################################################################
################################# metodo => <_CNCPS_> INIZIO DEL REDIREZIONAMENTO DELLA STAMPA #############################
############################################################################################################################

                                                    ### 4 ALIMENTI AUTO ###


           
        original = sys.stdout
        sys.stdout = open('%s.txt' % nome_file_razione, 'w')

        if day == 'Monday': 
            print('RAZIONE di %s, creata Lunedì %s, %s' % (user, data, current_time))
        if day == 'Tuesday': 
            print('RAZIONE di %s, creata Martedì %s, %s' % (user, data, current_time))
        if day == 'Wednesday': 
            print('RAZIONE di %s, creata Mercoledì %s, %s' % (user, data, current_time))
        if day == 'Thursday': 
            print('RAZIONE di %s, creata Giovedì %s, %s' % (user, data, current_time))
        if day == 'Friday': 
            print('RAZIONE di %s, creata Venerdì %s, %s' % (user, data, current_time))
        if day == 'Saturday': 
            print('RAZIONE di %s, creata Sabato %s, %s' % (user, data, current_time))
        if day == 'Sunday': 
            print('RAZIONE di %s, creata Domenica %s, %s' % (user, data, current_time))



        try:


                
            if metodo == '_CNCPS_':
            
            
                            
                # from crea_db_PARAMETRI_L_CNCPS_ import LW, WOL, MY, FAT_milk, CP_milk, LAC_milk, N_repl, giorno_di_inserimento, data_di_inserimento, ora_di_inserimento
                
                print('PARAMETRI inseriti da %s, %s %s alle ore %s' % (user, giorno_di_inserimento, data_di_inserimento, ora_di_inserimento))
                print('') 
                print('METODO DI CALCOLO della razione => <%s>' % metodo)
                print('PESO VIVO MEDIO BOVINE IN LATTAZIONE => %f kg' % LW)
                print('SETTIMANA DI LATTAZIONE media => %d^' % WOL)
                print('LIVELLO PRODUTTIVO medio => %f kg di latte al giorno' % MY)
                print('TENORE DI GRASSO del latte => %fx100' % FAT_milk)
                print('TENORE DI PROTEINA del latte => %fx100' % CP_milk)
                print('TENORE DI LATTOSIO del latte => %fx100' % LAC_milk)
                print('N° DI REPLICHE => %d' % N_repl)
                print('')
        

                F = []
                F.append(DMI)
                F.append(CP)
                F.append(RDP)
                F.append(RUP)
                F.append(FG)
                F.append(NDF)
                F.append(ADF)
                F.append(FAT)
                F.append(AM)
                F.append(ZUC)
                F.append(Ca_tot)
                F.append(P_tot)
                F.append(UFL_tot)


# STAMPA FABBISOGNI _CNCPS_

                print('')
                print('Hai scelto il METODO DI CALCOLO della razione <Cornell %s>' % metodo)    
                print('')
                print('FABBISOGNI')
                print('')    
                print('CAPACITÀ DI INGESTIONE => %f kg di Sostanza Secca' % F[0])
                print('Fabbisogno di <PROTEINA GREZZA> => %f g' % F[1])
                print('Fabbisogno di <PROTEINA DEGRADABILE> => %f g' % F[2])
                print('Fabbisogno di <PROTEINA INDEGRADABILE> => %f g' % F[3])
                print('Fabbisogno di <FIBRA GREZZA> => %f g' % F[4])
                print('Fabbisogno di <NDF> => %f g' % F[5])
                print('Fabbisogno di <ADF> => %f g' % F[6]) 
                print('Fabbisogno di <GRASSO> => %f g' % F[7])
                print('Fabbisogno di <AMIDO> => %f g' % F[8])
                print('Fabbisogno di <ZUCCHERI> => %f g' % F[9])
                print('Fabbisogno di <CALCIO> => %f g' % F[10])
                print('Fabbisogno di <FOSFORO> => %f g' % F[11])
                print('Fabbisogno di <ENERGIA NETTA> => %f Unità Foraggere Latte. \n' % F[12])
                print('')
                


                if Q and QM and QFP:
                
                    F_arr = F_arr_ricalcolato_QM_FE
                
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI>, <CEREALI> e <FONTI PROTEICHE>')
                    print('')
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                              
                    print(F_arr)


                elif Q and QFP:
                
                    F_arr = F_arr_ricalcolato_FE
                
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI> e <FONTI PROTEICHE>')      
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(F_arr)
                

                elif Q and QM and not QFP:

                    F_arr = F_arr_ricalcolato
        
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI> e <CEREALI>')
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')                
                    print(F_arr)              
            

                elif Q and not QM and not QFP: 

                    F_arr = F_arr_ric
        
                    print('Hai inserito manualmente solo un alimento della categoria <FORAGGI>')
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(F_arr)


                else:

                    F_arr = F_arr
        
                    print('Nessun alimento inserito manualmente')
                    print('')
                    print("L'apporto di Sostanza Secca degli alimenti selezionati è %f" % APPORTO_SOSTANZA_SECCA)
                    print('')
                    
                

############################################################################################################################

             

# CASO 1)
# FORAGGIO + MAIS GRANELLA + FE inseriti manualmente
# 3 alimenti inseriti manualmente + 4 alimenti inseriti in automatico => TOT 7
                                                
                if Q and QM and QFP:
                

                    quantità_TOTALE_TAL_QUALE = Q + QM + QFP + quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0] + quantità_alimento_4[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_FP_man[0] + app_FOR_man[0] + app_CER_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0] + random_ARR_3_new[0]
                    APPORTO_PROTEINA_GREZZA = app_FP_man[1] + app_FOR_man[1] + app_CER_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1] + random_ARR_3_new[1]
                    APPORTO_PROTEINA_DEGRADABILE = app_FP_man[2] + app_FOR_man[2] + app_CER_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2] + random_ARR_3_new[2]
                    APPORTO_PROTEINA_INDEGRADABILE = app_FP_man[3] + app_FOR_man[3] + app_CER_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3] + random_ARR_3_new[3]
                    APPORTO_FIBRA_GREZZA = app_FP_man[4] + app_FOR_man[4] + app_CER_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4] + random_ARR_3_new[4]
                    APPORTO_NDF = app_FP_man[5] + app_FOR_man[5] + app_CER_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5] + random_ARR_3_new[5]
                    APPORTO_ADF = app_FP_man[6] + app_FOR_man[6] + app_CER_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6] + random_ARR_3_new[6]
                    APPORTO_GRASSO = app_FP_man[7] + app_FOR_man[7] + app_CER_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7] + random_ARR_3_new[7]
                    APPORTO_AMIDO = app_FP_man[8] + app_FOR_man[8] + app_CER_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8] + random_ARR_3_new[8]
                    APPORTO_ZUCCHERI = app_FP_man[9] + app_FOR_man[9] + app_CER_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9] + random_ARR_3_new[9]
                    APPORTO_Ca = app_FP_man[10] + app_FOR_man[10] + app_CER_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10] + random_ARR_3_new[10]
                    APPORTO_P = app_FP_man[11] + app_FOR_man[11] + app_CER_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11] + random_ARR_3_new[11]
                    APPORTO_UFL = app_FP_man[12] + app_FOR_man[12] + app_CER_man[12] + random_ARR_0_new[12] + random_ARR_1_new[12] + random_ARR_2_new[12] + random_ARR_3_new[12]


                    
                    print('')
                    print('apporti di %s:' % M)
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(app_FOR_man)
                    print('')

                    print('')
                    print('apporti di %s:' % MG)
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(app_CER_man)
                    print('')
                
                    print('apporti di %s:' % FE)
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(app_FP_man)
                    print('')

                    print('apporti di %s:' % S[0])
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(random_ARR_2_new)
                    print('')
                    print('apporti di %s:' % S[3])
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(random_ARR_3_new)
                    print('')
                    
                               
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')
                    print('%f kg %s' % (QM, MG))                                         
                    print('%f kg %s' % (Q, M))
                    print('%f kg %s' % (QFP, FE))
                                            
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))
                    print('%f kg %s' % (quantità_alimento_4[0], S[3]))
            
            

############################################################################################################################


# CASO 2)
# FORAGGIO + FE inseriti manualmente
                  
                elif Q and QFP:


                    quantità_TOTALE_TAL_QUALE = Q + QFP + quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0] + quantità_alimento_4[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_FP_man[0] + app_FOR_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0] + random_ARR_3_new[0] 
                    APPORTO_PROTEINA_GREZZA = app_FP_man[1] + app_FOR_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1] + random_ARR_3_new[1]
                    APPORTO_PROTEINA_DEGRADABILE = app_FP_man[2] + app_FOR_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2] + random_ARR_3_new[2]
                    APPORTO_PROTEINA_INDEGRADABILE = app_FP_man[3] + app_FOR_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3] + random_ARR_3_new[3]
                    APPORTO_FIBRA_GREZZA = app_FP_man[4] + app_FOR_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4] + random_ARR_3_new[4]
                    APPORTO_NDF = app_FP_man[5] + app_FOR_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5] + random_ARR_3_new[5]
                    APPORTO_ADF = app_FP_man[6] + app_FOR_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6] + random_ARR_3_new[6]
                    APPORTO_GRASSO = app_FP_man[7] + app_FOR_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7] + random_ARR_3_new[7]
                    APPORTO_AMIDO = app_FP_man[8] + app_FOR_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8] + random_ARR_3_new[8]
                    APPORTO_ZUCCHERI = app_FP_man[9] + app_FOR_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9] + random_ARR_3_new[9]
                    APPORTO_Ca = app_FP_man[10] + app_FOR_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10] + random_ARR_3_new[10]
                    APPORTO_P = app_FP_man[11] + app_FOR_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11] + random_ARR_3_new[11]
                    APPORTO_UFL = app_FP_man[12] + app_FOR_man[12] + random_ARR_0_new[12] + random_ARR_1_new[12] + random_ARR_2_new[12] + random_ARR_3_new[12]

                  
                    print('')
                    print('apporti di %s:' % M)
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(app_FOR_man)
                    print('')
                
                    print('apporti di %s:' % FE)
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(app_FP_man)
                    print('')

                    print('apporti di %s:' % S[0])
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(random_ARR_2_new)
                    print('')
                    print('apporti di %s:' % S[3])
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(random_ARR_3_new)
                    print('')
                    
               
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')                                    
                    print('%f kg %s' % (Q, M))
                    print('%f kg %s' % (QFP, FE))
                                        
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))
                    print('%f kg %s' % (quantità_alimento_4[0], S[3]))
            


############################################################################################################################


# CASO 3)
# INSILATO MAIS e MAIS GRANELLA inseriti manualmente
            
                elif Q and QM and not QFP:

                                                        
                    quantità_TOTALE_TAL_QUALE = Q + QM + quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0] + quantità_alimento_4[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_CER_man[0] + app_FOR_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0] + random_ARR_3_new[0]
                    APPORTO_PROTEINA_GREZZA = app_CER_man[1] + app_FOR_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1] + random_ARR_3_new[1]
                    APPORTO_PROTEINA_DEGRADABILE = app_CER_man[2] + app_FOR_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2] + random_ARR_3_new[2]
                    APPORTO_PROTEINA_INDEGRADABILE = app_CER_man[3] + app_FOR_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3] + random_ARR_3_new[3]
                    APPORTO_FIBRA_GREZZA = app_CER_man[4] + app_FOR_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4] + random_ARR_3_new[4]
                    APPORTO_NDF = app_CER_man[5] + app_FOR_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5] + random_ARR_3_new[5]
                    APPORTO_ADF = app_CER_man[6] + app_FOR_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6] + random_ARR_3_new[6]
                    APPORTO_GRASSO = app_CER_man[7] + app_FOR_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7] + random_ARR_3_new[7]
                    APPORTO_AMIDO = app_CER_man[8] + app_FOR_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8] + random_ARR_3_new[8]
                    APPORTO_ZUCCHERI = app_CER_man[9] + app_FOR_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9] + random_ARR_3_new[9]
                    APPORTO_Ca = app_CER_man[10] + app_FOR_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10] + random_ARR_3_new[10]
                    APPORTO_P = app_CER_man[11] + app_FOR_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11] + random_ARR_3_new[11]
                    APPORTO_UFL = app_CER_man[12] + app_FOR_man[12] + random_ARR_0_new[12] + random_ARR_1_new[12] + random_ARR_2_new[12] + random_ARR_3_new[12]


                    print('')
                    print('apporti di %s:' % M)
                    print('')
                    print(app_FOR_man)
                    print('')
                    print('apporti di %s:' % MG)
                    print('')
                    print(app_CER_man)
                    print('')                     
                                              
                    print('apporti di %s:' % S[0])
                    print('')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print(random_ARR_2_new)
                    print('')
                    print('apporti di %s:' % S[3])
                    print('')
                    print(random_ARR_3_new)
                    print('')
                    
               
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')
                    print('%f kg %s' % (QM, MG))                                         
                    print('%f kg %s' % (Q, M))
                                        
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))
                    print('%f kg %s' % (quantità_alimento_4[0], S[3]))
            


############################################################################################################################


# CASO 4)
# SOLO FORAGGIO:
                
                elif Q and not QM and not QFP: 



                    quantità_TOTALE_TAL_QUALE = Q + quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0] + quantità_alimento_4[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_FOR_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0] + random_ARR_3_new[0]
                    APPORTO_PROTEINA_GREZZA = app_FOR_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1] + random_ARR_3_new[1]
                    APPORTO_PROTEINA_DEGRADABILE = app_FOR_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2] + random_ARR_3_new[2]
                    APPORTO_PROTEINA_INDEGRADABILE = app_FOR_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3] + random_ARR_3_new[3]
                    APPORTO_FIBRA_GREZZA = app_FOR_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4] + random_ARR_3_new[4]
                    APPORTO_NDF = app_FOR_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5] + random_ARR_3_new[5]
                    APPORTO_ADF = app_FOR_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6] + random_ARR_3_new[6]
                    APPORTO_GRASSO = app_FOR_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7] + random_ARR_3_new[7]
                    APPORTO_AMIDO = app_FOR_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8] + random_ARR_3_new[8]
                    APPORTO_ZUCCHERI = app_FOR_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9] + random_ARR_3_new[9]
                    APPORTO_Ca = app_FOR_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10] + random_ARR_3_new[10]
                    APPORTO_P = app_FOR_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11] + random_ARR_3_new[11]
                    APPORTO_UFL = app_FOR_man[12] + random_ARR_0_new[12] + random_ARR_1_new[12] + random_ARR_2_new[12] + random_ARR_3_new[12]


                    print('')
                    print('apporti di %s:' % M)
                    print('')
                    print(app_FOR_man)
                    print('')  
                                    
                    print('apporti di %s:' % S[0])
                    print('')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print(random_ARR_2_new)
                    print('')
                    print('apporti di %s:' % S[3])
                    print('')
                    print(random_ARR_3_new)
                    print('')
                    
                                                
                    print('La razione fornisce %f kg di %s' % (Q, M))

                    print('')
                    print("Prezzo dell'alimento <%s> => %f EURO/ton" % (M, prezzo_FORAGGIO_quantità))
                  
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')                   
                    print('%f kg %s' % (Q, M))
                                        
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))
                    print('%f kg %s' % (quantità_alimento_4[0], S[3]))
            


############################################################################################################################


# CASO 5)
# SOLO CEREALE:

                elif QM and not Q and not QFP: 



                    quantità_TOTALE_TAL_QUALE = QM + quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0] + quantità_alimento_4[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_CER_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0] + random_ARR_3_new[0]
                    APPORTO_PROTEINA_GREZZA = app_CER_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1] + random_ARR_3_new[1]
                    APPORTO_PROTEINA_DEGRADABILE = app_CER_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2] + random_ARR_3_new[2]
                    APPORTO_PROTEINA_INDEGRADABILE = app_CER_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3] + random_ARR_3_new[3]
                    APPORTO_FIBRA_GREZZA = app_CER_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4] + random_ARR_3_new[4]
                    APPORTO_NDF = app_CER_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5] + random_ARR_3_new[5]
                    APPORTO_ADF = app_CER_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6] + random_ARR_3_new[6]
                    APPORTO_GRASSO = app_CER_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7] + random_ARR_3_new[7]
                    APPORTO_AMIDO = app_CER_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8] + random_ARR_3_new[8]
                    APPORTO_ZUCCHERI = app_CER_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9] + random_ARR_3_new[9]
                    APPORTO_Ca = app_CER_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10] + random_ARR_3_new[10]
                    APPORTO_P = app_CER_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11] + random_ARR_3_new[11]
                    APPORTO_UFL = app_CER_man[12] + random_ARR_0_new[12] + random_ARR_1_new[12] + random_ARR_2_new[12] + random_ARR_3_new[12]



                    print('')
                    print('apporti di %s:' % MG)
                    print('')
                    print(app_CER_man)
                    print('')  
                                
                    print('apporti di %s:' % S[0])
                    print('')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print(random_ARR_2_new)
                    print('')
                    print('apporti di %s:' % S[3])
                    print('')
                    print(random_ARR_3_new)
                    print('')

                
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')
                    print('%f kg %s' % (QM, MG))                                         
                                        
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))
                    print('%f kg %s' % (quantità_alimento_4[0], S[3]))
            


############################################################################################################################

# CASO 6)
# NESSUN ALIMENTO INSERITO MANUALMENTE

                else:


                    quantità_TOTALE_TAL_QUALE = quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0] + quantità_alimento_4[0]
                    APPORTO_PROTEINA_GREZZA = random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1] + random_ARR_3_new[1]
                    APPORTO_PROTEINA_DEGRADABILE = random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2] + random_ARR_3_new[2]
                    APPORTO_PROTEINA_INDEGRADABILE = random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3] + random_ARR_3_new[3]
                    APPORTO_FIBRA_GREZZA = random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4] + random_ARR_3_new[4]
                    APPORTO_NDF = random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5] + random_ARR_3_new[5]
                    APPORTO_ADF = random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6] + random_ARR_3_new[6]
                    APPORTO_GRASSO = random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7] + random_ARR_3_new[7]
                    APPORTO_AMIDO = random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8] + random_ARR_3_new[8]
                    APPORTO_ZUCCHERI = random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9] + random_ARR_3_new[9]
                    APPORTO_Ca = random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10] + random_ARR_3_new[10]
                    APPORTO_P = random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11] + random_ARR_3_new[11]
                    APPORTO_UFL = random_ARR_0_new[12] + random_ARR_1_new[12] + random_ARR_2_new[12] + random_ARR_3_new[12]


                    print('apporti di %s:' % S[0])
                    print('')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print(random_ARR_2_new)
                    print('')
                    print('apporti di %s:' % S[3])
                    print('')
                    print(random_ARR_3_new)
                    print('')
                    
                
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')
                                        
                                        
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))
                    print('%f kg %s' % (quantità_alimento_4[0], S[3]))
            

         
############################################################################################################################

#           if metodo == '_CNCPS_':
                    
                A = []
                A.append(APPORTO_DEFINITIVO_SOSTANZA_SECCA)
                A.append(APPORTO_PROTEINA_GREZZA)
                A.append(APPORTO_PROTEINA_DEGRADABILE)
                A.append(APPORTO_PROTEINA_INDEGRADABILE)
                A.append(APPORTO_FIBRA_GREZZA)
                A.append(APPORTO_NDF)
                A.append(APPORTO_ADF)
                A.append(APPORTO_GRASSO)
                A.append(APPORTO_AMIDO)
                A.append(APPORTO_ZUCCHERI)
                A.append(APPORTO_Ca)
                A.append(APPORTO_P)
                A.append(APPORTO_UFL)
        
                with open('%s.txt' % nome_file_apporti, 'w') as external_file:
                    print(A, file=external_file)
                external_file.close()
        
                DELTA_SOSTANZA_SECCA = APPORTO_DEFINITIVO_SOSTANZA_SECCA - F[0]
                DELTA_PROTEINA_GREZZA = APPORTO_PROTEINA_GREZZA - F[1]
                DELTA_PROTEINA_DEGRADABILE = APPORTO_PROTEINA_DEGRADABILE - F[2]
                DELTA_PROTEINA_INDEGRADABILE = APPORTO_PROTEINA_INDEGRADABILE - F[3]
                DELTA_FIBRA_GREZZA = APPORTO_FIBRA_GREZZA - F[4]
                DELTA_NDF = APPORTO_NDF - F[5]
                DELTA_ADF = APPORTO_ADF - F[6]
                DELTA_GRASSO = APPORTO_GRASSO - F[7]
                DELTA_AMIDO = APPORTO_AMIDO - F[8]
                DELTA_ZUCCHERI = APPORTO_ZUCCHERI - F[9]
                DELTA_Ca = APPORTO_Ca - F[10]
                DELTA_P = APPORTO_P - F[11]
                DELTA_UFL = APPORTO_UFL - F[12]
        
                              
                print('')
                print('')
                if i == N_repl-1:
                    print('Il calcolo della razione non ha avuto SUCCESSO; per favore cancella gli alimenti inseriti e riprova.')
                elif i < N_repl-1:
                    print('Il CALCOLO DELLA RAZIONE è stato effettuato con SUCCESSO alla %d^ replica!' % i)        
                print('')
        
                        
                print("Il FABBISOGNO DI SOSTANZA SECCA (che dev'essere soddisfatto dagli alimenti aggiunti) delle bovine del gruppo <%s> è di %f kg" %  (gruppo, F_arr[0]))
                print('')
                print("L'APPORTO DI SOSTANZA SECCA degli alimenti selezionati è di %f kg" % APPORTO_SOSTANZA_SECCA)
                print('')
                

                print('')        
                print('LEGENDA')
                print('')
                print("DM => Dry Matter (Apporto di Sostanza Secca)")
                print("CP => Crude Protein (Apporto di PROTEINA GREZZA)")
                print("RDP => Rumen Degradable Protein (Apporto di PROTEINA DEGRADABILE)")
                print("RUP => Rumen Undegradable Protein (Apporto di PROTEINA INDEGRADABILE)")
                print("FG => FIBRA GREZZA (apporto di FIBRA GREZZA)")
                print("NDF => NDF (apporto di Fibra resistente al Detergente Neutro)")
                print("ADF => ADF (apporto di Fibra resistente al Detergente Acido)")
                print("FAT => Fat (apporto di GRASSO)")
                print("AM => AMIDO (apporto di AMIDO)")
                print("ZUC => ZUCCHERI (apporto di ZUCCHERI)")
                print("Ca => Calcio (apporto di Calcio)")
                print("P => Fosforo (apporto di Fosforo)")
                print("UFL => Unità Foraggere Latte (apporto di Energia Netta)")
                print('')
                print('')
                print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')


                if len(PREZZI) == len(S):

                    print('')
                    for i in list(range(len(PREZZI))):
                        print("Prezzo dell'alimento <%s> => %f EURO/ton" % (S[i], PREZZI[i]))
                    print('')
                    print('********************************************************************')
                    print('')
                else:
                    print('Impossibile creare la TABELLA DEI PREZZI: ci sono uno o più alimenti non quotati!')


            
                if len(PREZZI) == len(S):

            
                    costo_alimento_1 = quantità_alimento_1[0] * PREZZI[0] / 1000
                    costo_alimento_2 = quantità_alimento_2[0] * PREZZI[1] / 1000
                    costo_alimento_3 = quantità_alimento_3[0] * PREZZI[2] / 1000
                    costo_alimento_4 = quantità_alimento_4[0] * PREZZI[3] / 1000
            
                    COSTO_RAZIONE = []            
                    COSTO_RAZIONE.append(costo_alimento_1)
                    COSTO_RAZIONE.append(costo_alimento_2)
                    COSTO_RAZIONE.append(costo_alimento_3)
                    COSTO_RAZIONE.append(costo_alimento_4)

            
                    if Q and not QM and not QFP:
                            
                        if type(costo_FORAGGIO_quantità) is float: 
                            COSTO_RAZIONE.append(costo_FORAGGIO_quantità)
                            print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[3], costo_alimento_4))
                            print("Costo dell'alimento <%s>: %f EURO" % (M, costo_FORAGGIO_quantità))

                        else:
                            print("Il prezzo dell'alimento <%s> non è disponibile!" % M) 

                
                    elif QM and not Q and not QFP:                
                
                        if type(costo_CEREALE_quantità) is float:
                            COSTO_RAZIONE.append(costo_CEREALE_quantità)  
                            print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[3], costo_alimento_4))
                            print("Costo dell'alimento <%s>: %f EURO" % (MG, costo_CEREALE_quantità))

                        else:
                            print("Il prezzo dell'alimento <%s> non è disponibile!" % MG) 

            
                    elif QFP and not Q and not QM:
                
                        if type(costo_FONTE_PROTEICA_quantità) is float:
                            COSTO_RAZIONE.append(costo_FONTE_PROTEICA_quantità)
                            print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[3], costo_alimento_4))
                            print("Costo dell'alimento <%s>: %f EURO" % (FE, costo_FONTE_PROTEICA_quantità))
                        else:
                            print("Il prezzo dell'alimento <%s> non è disponibile!" % FE)

            
                    elif Q and QM and not QFP:
                
                        if type(costo_FORAGGIO_quantità) is float and type(costo_CEREALE_quantità) is float: 
                            COSTO_RAZIONE.append(costo_FORAGGIO_quantità)
                            COSTO_RAZIONE.append(costo_CEREALE_quantità)  
                            print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[3], costo_alimento_4))                
                            print("Costo dell'alimento <%s>: %f EURO" % (M, costo_FORAGGIO_quantità))
                            print("Costo dell'alimento <%s>: %f EURO" % (MG, costo_CEREALE_quantità))                        
                    
                        else:
                            print("Il prezzo dell'alimento <%s> e/o dell'alimento <%s> non è disponibile!" % (M, MG))

            
                    elif Q and QFP:
                    
                        if type(costo_FORAGGIO_quantità) is float and type(costo_FONTE_PROTEICA_quantità) is float:  
                            COSTO_RAZIONE.append(costo_FORAGGIO_quantità)
                            COSTO_RAZIONE.append(costo_FONTE_PROTEICA_quantità)
                            print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[3], costo_alimento_4))                  
                            print("Costo dell'alimento <%s>: %f EURO" % (M, costo_FORAGGIO_quantità))
                            print("Costo dell'alimento <%s>: %f EURO" % (FE, costo_FONTE_PROTEICA_quantità))

                        else:
                            print("Il prezzo dell'alimento <%s> e/o dell'alimento <%s> non è disponibile!" % (M, FE))

                
                    elif QM and QFP and not Q:
                
                        if type(costo_CEREALE_quantità) is float and type(costo_FONTE_PROTEICA_quantità) is float:
                            COSTO_RAZIONE.append(costo_CEREALE_quantità) 
                            COSTO_RAZIONE.append(costo_FONTE_PROTEICA_quantità)
                            print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[3], costo_alimento_4))     
                            print("Costo dell'alimento <%s>: %f EURO" % (MG, costo_CEREALE_quantità))
                            print("Costo dell'alimento <%s>: %f EURO" % (FE, costo_FONTE_PROTEICA_quantità)) 
                        else:
                            print("Il prezzo dell'alimento <%s> e/o dell'alimento <%s> non è disponibile!" % (MG, FE))
                                           
                   
                    elif Q and QM and QFP:
                        if type(costo_FORAGGIO_quantità) is float and type(costo_CEREALE_quantità) is float and type(costo_FONTE_PROTEICA_quantità) is float:
                            COSTO_RAZIONE.append(costo_FORAGGIO_quantità)
                            COSTO_RAZIONE.append(costo_CEREALE_quantità)                                   
                            COSTO_RAZIONE.append(costo_FONTE_PROTEICA_quantità)

                            print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[3], costo_alimento_4))
                            print("Costo dell'alimento <%s>: %f EURO" % (M, costo_FORAGGIO_quantità))                     
                            print("Costo dell'alimento <%s>: %f EURO" % (MG, costo_CEREALE_quantità))
                            print("Costo dell'alimento <%s>: %f EURO" % (FE, costo_FONTE_PROTEICA_quantità)) 
                        else:
                            print("Il prezzo dell'alimento <%s> e/o dell'alimento <%s> e/o dell'alimento <%s> non è disponibile!" % (M, MG, FE))
                                           
                    COSTO_TOTALE = sum(COSTO_RAZIONE)
                    print('')
                    print('Il costo della razione è %f EURO' % COSTO_TOTALE)
                    if COSTO_TOTALE > PREZZO_MAX:
                        print('Il COSTO TOTALE della razione è > del PREZZO MASSIMO che hai impostato!')
                        print('Prova a scegliere altri alimenti e ricalcola la RAZIONE')
            
            
                else:
                    print('Non posso calcolare il COSTO DELLA RAZIONE: ci sono uno o più alimenti non quotati!') 
            
            
                print('')                
                print('La razione fornisce %f kg di alimento tal quale' % quantità_TOTALE_TAL_QUALE)
                print('La razione fornisce %f kg di Sostanza Secca' % APPORTO_DEFINITIVO_SOSTANZA_SECCA)
                print('')
                print('')
                print('_______________________________________________________________________________________________')
                print('|                         |                    |                         |                    |')
                print('|                         |                    |                         |                    |')
                print('|   PRINCIPIO NUTRITIVO   |      APPORTO       |       Fabbisogno        |     DIFFERENZA     |')
                print('|                         |                    |                         |                    |')
                print('|_________________________|____________________|_________________________|____________________|')
                print('|      Sostanza Secca     |     %f kg   |  %f kg           |  %f kg       |' % (APPORTO_DEFINITIVO_SOSTANZA_SECCA, F[0], DELTA_SOSTANZA_SECCA))
                print('|      PROTEINA GREZZA    |   %f g    |%f g            |%f g        |' % (APPORTO_PROTEINA_GREZZA, F[1], DELTA_PROTEINA_GREZZA))
                print('|   PROTEINA DEGRADABILE  |   %f g    |%f g            |%f g        |' % (APPORTO_PROTEINA_DEGRADABILE, F[2], DELTA_PROTEINA_DEGRADABILE))
                print('| PROTEINA INDEGRADABILE  |   %f g    |%f g            |%f g        |' % (APPORTO_PROTEINA_INDEGRADABILE, F[3], DELTA_PROTEINA_INDEGRADABILE))
                print('|      FIBRA GREZZA       |   %f g    |%f g            |%f g        |' % (APPORTO_FIBRA_GREZZA, F[4], DELTA_FIBRA_GREZZA))
                print('|           NDF           |   %f g    |%f g            |%f g        |' % (APPORTO_NDF, F[5], DELTA_NDF))
                print('|           ADF           |   %f g    |%f g            |%f g        |' % (APPORTO_ADF, F[6], DELTA_ADF))
                print('|         GRASSO          |   %f g    |%f g            |%f g        |' % (APPORTO_GRASSO, F[7], DELTA_GRASSO)) 
                print('|          AMIDO          |   %f g    |%f g            |%f g        |' % (APPORTO_AMIDO, F[8], DELTA_AMIDO))
                print('|        ZUCCHERI         |    %f g    |%f g            |%f g       |' % (APPORTO_ZUCCHERI, F[9], DELTA_ZUCCHERI))
                print('|           Ca            |   %f g      |  %f g           |  %f g     |' % (APPORTO_Ca, F[10], DELTA_Ca))        
                print('|            P            |   %f g      |  %f g            |  %f g      |' % (APPORTO_P, F[11], DELTA_P))        
                print('|           UFL           |     %f      | %f               | %f           |' % (APPORTO_UFL, F[12], DELTA_UFL))        
                print('_______________________________________________________________________________________________')
                print('')
                print('                                               *     *     *                                   ')
                print('')
                print('')
                print('')
                print('******************************************** SOSTANZA SECCA ********************************************')
                print('')
                print('La razione fornisce %f kg di alimento tal quale' % quantità_TOTALE_TAL_QUALE)
                print('')
                print('La razione fornisce %f kg di Sostanza Secca' % APPORTO_DEFINITIVO_SOSTANZA_SECCA)                
                print('')
                DMI_AS_FED_ratio = (APPORTO_DEFINITIVO_SOSTANZA_SECCA/quantità_TOTALE_TAL_QUALE)*100
                print('La tua RAZIONE contiene il %fx100 di SOSTANZA SECCA' % DMI_AS_FED_ratio)
                print('')
                if DMI_AS_FED_ratio < 0.6:
                    print('')
                    print('In estate, in caso di COMPETIZIONE ALIMENTARE x un N° INSUFFICIENTE DI AUTOCATTURANTI (= BOVINE IN PIEDI),')
                    print('se prepari un CARRO MISCELATORE con, per es., un 10x100 in più di razioni (per es., con 100')
                    print('BOVINE IN LATTAZIONE metto nel carro 110 RAZIONI), dal momento che la miscelata rimarrà per più tempo in')
                    print('mangiatoia, potrebbe scaldarsi!')
                    print("Prova a RIDURRE UN PO' L'APPORTO COMPLESSIVO DI FORAGGIO, insilato, per aumentare la SS della razione,")
                    print("o fieno (dipende da che tipo di FORAGGIo hai inserito manualmente), per forzare il programma ad")
                    print("AUMENTARE L'APPORTO DELLA FONTE DI FIBRA DIGERIBILE")
                    print("In questo modo, si dovrebbe attenuare la riduzione dell'ingestione volontaria di fibra scarsamente")
                    print("digeribile (poiché più o meno lignificata), nonché il conseguente CALO DEL TENORE IN GRASSO del latte")
                    print("Tieni anche conto del fatto che, riducendo l'apporto della cosiddetta <FIBRA FISICAMENTE EFFICACE>")
                    print("(quella dei FORAGGI, che fa ruminare), LE BOVINE PRODURRANNO MENO SALIVA (che è il tampone naturale")
                    print("del rumine) e, quindi, dovrai valutare l'inserimento di un TAMPONE ARTIFICIALE, come il bicarbonato")
                    print("di calcio o di sodio, nella razione")    
                print('')
                print('')
                print('******************************************** PROTEINA GREZZA ********************************************')
                print('')
                APPORTO_DEFINITIVO_SOSTANZA_SECCA_g = APPORTO_DEFINITIVO_SOSTANZA_SECCA * 1000
                CP_DMI_ratio = APPORTO_PROTEINA_GREZZA/APPORTO_DEFINITIVO_SOSTANZA_SECCA_g
                print('Rapporto (PROTEINA GREZZA : Sostanza Secca) => %f' % CP_DMI_ratio)
                print('')
                print("Secondo Dell'Orto e Savoini, ad inizio lattazione dovrebbe essere ~ 0.18 (18%)")
                print('')
                if CP_DMI_ratio <= 0.17:
                    print("L'apporto di PROTEINA GREZZA è insufficiente")
                    print("Se avevi scelto una fonte proteica diversa dalla <F.E. DI SOIA>, sostituiscila con quest'ultima!")
                    print("Se non basta, prova a sostituire il fieno di prato stabile o l'insilato di loietto con il <FIENO DI ERBA MEDICA e/o a ridurre l'apporto di insilato (o di pastone) di mais>")         
                print('')
                print('')
                print('********************************************** FIBRA GREZZA **********************************************')
                print('')                       
                FG_DMI_ratio = APPORTO_FIBRA_GREZZA/APPORTO_DEFINITIVO_SOSTANZA_SECCA_g
                print('')                     
                FG_DMI_ratio = APPORTO_FIBRA_GREZZA/APPORTO_DEFINITIVO_SOSTANZA_SECCA_g
                print('')
                print('Rapporto (FIBRA GREZZA : Sostanza Secca) => %f' % FG_DMI_ratio)
                print('')
                print('Dovrebbe essere ~ 0.17 (17%)')
                print('')
                # print('********************************************** NDF **********************************************')  
                APPORTO_NDF_FORAGGI = app_FOR_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3]
                NDF_FORAGGI_NDF_tot_ratio = APPORTO_NDF_FORAGGI/APPORTO_NDF
#           print('Rapporto (NDF da FORAGGI : NDF totale) => %f' % NDF_FORAGGI_NDF_tot_ratio)
#           print('')
#           print('Dovrebbe essere ~ 0.75 (75%)')
                print('')
                print('')           
                print('')
                print('***********************************************************************************************************')
                print('********************************************* FINE DEL REPORT *********************************************')
                print('***********************************************************************************************************')
                
                sys.stdout = original



############################################################################################################################
###################### 4 alimenti auto - metodo => <LYS_MET> INIZIO DEL REDIREZIONAMENTO DELLA STAMPA ######################
############################################################################################################################

                                                    ### 4 ALIMENTI AUTO ###


            elif metodo == 'LYS_MET':



                original = sys.stdout
                sys.stdout = open('%s.txt' % nome_file_razione, 'w')


                
                print('PARAMETRI inseriti da %s, %s %s alle ore %s' % (user, giorno_di_inserimento, data_di_inserimento, ora_di_inserimento))
                print('') 
                print('METODO DI CALCOLO della razione => <%s>' % metodo)
                print('PESO MEDIO ALLA NASCITA => %f kg' % calf_weight)
                print('PESO VIVO MEDIO BOVINE IN LATTAZIONE => %f kg' % LW)
                print('ETÀ MEDIA BOVINE IN LATTAZIONE => %d mesi' % cow_age)
                print('SETTIMANA DI LATTAZIONE media => %d^' % WOL)
                print('SETTIMANA DI GRAVIDANZA media => %d^' % WOP)
                print('LIVELLO PRODUTTIVO medio => %f kg di latte al giorno' % MY)
                print('TENORE DI GRASSO del latte => %fx100' % FAT_milk)
                print('TENORE DI PROTEINA del latte => %fx100' % CP_milk)
                print('TENORE DI LATTOSIO del latte => %fx100' % LAC_milk)
                print('N° DI REPLICHE => %d' % N_repl)
        

                F = []
                F.append(DMI)
                F.append(CP)
                F.append(FG)
                F.append(NDF)
                F.append(ADF)
                F.append(FAT)
                F.append(AM)
                F.append(ZUC)
                F.append(Ca_tot)
                F.append(P_tot)
                F.append(UFL_tot)
                F.append(PDI)


# STAMPA FABBISOGNI LYS_MET

                print('')
                print('')
                print('FABBISOGNI calcolati secondo il METODO <INRA %s>' % metodo)
                print('')
                print('CAPACITÀ DI INGESTIONE => %f kg di Sostanza Secca' % F[0])
                print('Fabbisogno di PROTEINA GREZZA => %f g' % F[1])
                print('Fabbisogno di FIBRA GREZZA => %f g' % F[2])
                print('Fabbisogno di NDF => %f g' % F[3])
                print('Fabbisogno di ADF => %f g' % F[4]) 
                print('Fabbisogno di GRASSO => %f g' % F[5])
                print('Fabbisogno di AMIDO => %f g' % F[6])
                print('Fabbisogno di ZUCCHERI => %f g' % F[7])
                print('Fabbisogno di CALCIO => %f g' % F[8])
                print('Fabbisogno di FOSFORO => %f g' % F[9])
                print('Fabbisogno di ENERGIA NETTA => %f Unità Foraggere Latte' % F[10])
                print('Fabbisogno di PROTEINA  DIGERIBILE INTESTINALE => %f g' % F[11])
                print('')
                


############################################################################################################################
################################### SINGOLI CASI MANTENUTI PER EVENTUALI SVILUPPI FUTURI ###################################
############################################################################################################################



############################################################################################################################            
# METODO <LYS_MET>
# 4 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 1)
# FORAGGIO + MAIS GRANELLA + FONTE PROTEICA inseriti manualmente
# 3 alimenti inseriti manualmente + 4 alimenti inseriti in automatico => TOT 7

                if Q and QM and QFP:
                                           
                    F_arr = F_arr_ricalcolato_QM_FE
                
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI>, <CEREALI> e <FONTI PROTEICHE>')
                    print('')
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DM in kg, ENERGIA NETTA in UFL, tutti gli altri PARAMETRI (CP, FG, NDF, ADF, FAT, AM, ZUC, Ca, P e PDI) in grammi') 
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                              
                    print(F_arr)



############################################################################################################################            
# METODO <LYS_MET>
# 5 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 2)
# FORAGGIO + FONTE PROTEICA inseriti manualmente
# 2 alimenti inseriti manualmente + 5 alimenti inseriti in automatico => TOT 7

                elif Q and QFP:

                    
                    F_arr = F_arr_ricalcolato_FE
                    
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI> e <FONTI PROTEICHE>')      
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(F_arr)
                        
                

############################################################################################################################            
# METODO <LYS_MET>
# 5 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 3)
# FORAGGIO + CEREALE inseriti manualmente
# 2 alimenti inseriti manualmente + 5 alimenti inseriti in automatico => TOT 7

                elif Q and QM and not QFP:

                    F_arr = F_arr_ricalcolato
        
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI> e <CEREALI>')
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')                    
                    print(F_arr)
                                     
            

############################################################################################################################            
# METODO <LYS_MET>
# 5 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 4)
# FORAGGIO inserito manualmente
# 1 alimento inserito manualmente + 5 alimenti inseriti in automatico => TOT 6

                elif Q and not QM and not QFP:
        

                    F_arr = F_arr_FORAGGIo
        
                    print('Hai inserito manualmente solo un alimento della categoria <FORAGGI>')
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(F_arr)



############################################################################################################################            
# METODO <LYS_MET>
# 5 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 5)
# CEREALE inserito manualmente
# 1 alimento inserito manualmente + 5 alimenti inseriti in automatico => TOT 6

                elif QM and not Q and not QFP:                                
            
                    F_arr = F_arr_cereale
                     
                    print('Hai inserito manualmente solo un alimento della categoria <CEREALI>')
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(F_arr)



############################################################################################################################            
# METODO <LYS_MET>
# 5 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 6)
# FONTE PROTEICA inserita manualmente
# 1 alimento inserito manualmente + 5 alimenti inseriti in automatico => TOT 6

                elif QFP and not Q and not QM:
                        
            
                    F_arr = F_arr_FE
                     
                    print('Hai inserito manualmente solo un alimento della categoria <FONTI PROTEICHE>')
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(F_arr)


############################################################################################################################            
# METODO <LYS_MET>
# 5 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 7)
# NESSUN ALIMENTO inserito manualmente
# 0 alimenti inseriti manualmente + 5 alimenti inseriti in automatico => TOT 5

                else:

                    F_arr = F_arr
        
                    print('Nessun alimento inserito manualmente')


                print('')
                print("L'apporto di Sostanza Secca degli alimenti selezionati è %f" % APPORTO_SOSTANZA_SECCA)
                print('')
                


############################################################################################################################            
# METODO <LYS_MET>
# 4 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 1)
# FORAGGIO + MAIS GRANELLA + FONTE PROTEICA inseriti manualmente
# 3 alimenti inseriti manualmente + 4 alimenti inseriti in automatico => TOT 7


                if Q and QM and QFP:
                
                
                
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI>, <CEREALI> e <FONTI PROTEICHE>')
                

                    quantità_TOTALE_TAL_QUALE = Q + QM + QFP + quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0] + quantità_alimento_4[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_FP_man[0] + app_FOR_man[0] + app_CER_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0] + random_ARR_3_new[0] 
                    APPORTO_PROTEINA_GREZZA = app_FP_man[1] + app_FOR_man[1] + app_CER_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1] + random_ARR_3_new[1]
                    APPORTO_FIBRA_GREZZA = app_FP_man[2] + app_FOR_man[2] + app_CER_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2] + random_ARR_3_new[2]
                    APPORTO_NDF = app_FP_man[3] + app_FOR_man[3] + app_CER_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3] + random_ARR_3_new[3]
                    APPORTO_ADF = app_FP_man[4] + app_FOR_man[4] + app_CER_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4] + random_ARR_3_new[4]
                    APPORTO_GRASSO = app_FP_man[5] + app_FOR_man[5] + app_CER_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5] + random_ARR_3_new[5]
                    APPORTO_AMIDO = app_FP_man[6] + app_FOR_man[6] + app_CER_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6] + random_ARR_3_new[6]
                    APPORTO_ZUCCHERI = app_FP_man[7] + app_FOR_man[7] + app_CER_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7] + random_ARR_3_new[7]
                    APPORTO_Ca = app_FP_man[8] + app_FOR_man[8] + app_CER_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8] + random_ARR_3_new[8]
                    APPORTO_P = app_FP_man[9] + app_FOR_man[9] + app_CER_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9] + random_ARR_3_new[9]
                    APPORTO_UFL = app_FP_man[10] + app_FOR_man[10] + app_CER_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10] + random_ARR_3_new[10]
                    APPORTO_PDI = app_FP_man[11] + app_FOR_man[11] + app_CER_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11] + random_ARR_3_new[11]
                

                   
                    print('')
                    print('apporti di %s:' % M)
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(app_FOR_man)
                    print('')

                    print('')
                    print('apporti di %s:' % MG)
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(app_CER_man)
                    print('')
                    
                    print('apporti di %s:' % FE)
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(app_FP_man)
                    print('')

                    print('apporti di %s:' % S[0])
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(random_ARR_2_new)
                    print('')
                    print('apporti di %s:' % S[3])
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(random_ARR_3_new)
                    print('')
                             
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')
                                                                     
                    print('%f kg %s' % (Q, M))
                    print('%f kg %s' % (QM, MG))
                    print('%f kg %s' % (QFP, FE))
                                                
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))
                    print('%f kg %s' % (quantità_alimento_4[0], S[3]))

                                
                    app_PDIE_man = Q_PDIE + QM_PDIE + QFP_PDIE
                    app_PDIN_man = Q_PDIN + QM_PDIN + QFP_PDIN
                    app_LysDI_man = Q_LysDI + QM_LysDI + QFP_LysDI
                    app_MetDI_man = Q_MetDI + QM_MetDI + QFP_MetDI


                    quantità.append(Q)
                    quantità.append(QM)
                    quantità.append(QFP)
                    quantità.append(quantità_alimento_1[0])
                    quantità.append(quantità_alimento_2[0])
                    quantità.append(quantità_alimento_3[0])
                    quantità.append(quantità_alimento_4[0])
                    
                    quantità = np.array(quantità)
                    print(quantità)
                    
                    LISINA_TOT = np.sum(LISINA*quantità)
                    METIONINA_TOT = np.sum(METIONINA*quantità)
                    PDIE_TOT = np.sum(PDIE*quantità)
                    PDIN_TOT = np.sum(PDIN*quantità)
                    
                    LYS_MET_ratio = LISINA_TOT/METIONINA_TOT
                    LysDI_ratio = LISINA_TOT/PDIN_TOT
                    MetDI_ratio = METIONINA_TOT/PDIN_TOT
                    
                    
                    print('')
                    print('Apporto TOTALE PDIE => %f g' % PDIE_TOT)
                    print('')
                    print('Apporto TOTALE PDIN => %f g' % PDIN_TOT)
                    print('')
                    print('Rapporto LISINA / METIONINA => %f' % LYS_MET_ratio)
                    print('')
                    print('Rapporto LISINA / PROTEINA DIGERIBILE => %f' % LysDI_ratio)
                    print('')
                    print('Rapporto METIONINA / PROTEINA DIGERIBILE => %f' % MetDI_ratio)
                    print('')

                    

############################################################################################################################            
# METODO <LYS_MET>
# 4 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 2)
# FORAGGIO + FONTE PROTEICA inseriti manualmente
# 2 alimenti inseriti manualmente + 4 alimenti inseriti in automatico => TOT 6
  
                elif Q and QFP:
                
                
                
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI> e <FONTI PROTEICHE>')


                    quantità_TOTALE_TAL_QUALE = Q + QFP + quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0] + quantità_alimento_4[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_FP_man[0] + app_FOR_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0] + random_ARR_3_new[0]
                    APPORTO_PROTEINA_GREZZA = app_FP_man[1] + app_FOR_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1] + random_ARR_3_new[1]
                    APPORTO_FIBRA_GREZZA = app_FP_man[2] + app_FOR_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2] + random_ARR_3_new[2]
                    APPORTO_NDF = app_FP_man[3] + app_FOR_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3] + random_ARR_3_new[3]
                    APPORTO_ADF = app_FP_man[4] + app_FOR_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4] + random_ARR_3_new[4]
                    APPORTO_GRASSO = app_FP_man[5] + app_FOR_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5] + random_ARR_3_new[5]
                    APPORTO_AMIDO = app_FP_man[6] + app_FOR_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6] + random_ARR_3_new[6]
                    APPORTO_ZUCCHERI = app_FP_man[7] + app_FOR_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7] + random_ARR_3_new[7]
                    APPORTO_Ca = app_FP_man[8] + app_FOR_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8] + random_ARR_3_new[8]
                    APPORTO_P = app_FP_man[9] + app_FOR_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9] + random_ARR_3_new[9]
                    APPORTO_UFL = app_FP_man[10] + app_FOR_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10] + random_ARR_3_new[10]
                    APPORTO_PDI = app_FP_man[11] + app_FOR_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11] + random_ARR_3_new[11]


                       
                    print('')
                    print('apporti di %s:' % M)
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(app_FOR_man)
                    print('')
                    
                    print('apporti di %s:' % FE)
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(app_FP_man)
                    print('')

                    print('apporti di %s:' % S[0])
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(random_ARR_2_new)
                    print('')
                    print('apporti di %s:' % S[3])
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(random_ARR_3_new)
                    print('')
                    print('apporti di %s:' % S[4])
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')                                            
                    print('%f kg %s' % (Q, M))
                    print('%f kg %s' % (QFP, FE))
                                                
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))
                    print('%f kg %s' % (quantità_alimento_4[0], S[3]))
            
                    
                    print('')
                    print('Rapporto (LISINA / PROTEINA DIGERIBILE) => %f' % LysDI_ratio)
                    print('')
                    print('Rapporto (METIONINA / PROTEINA DIGERIBILE) => %f' % MetDI_ratio)
                    print('')
                    print('Rapporto (LISINA / METIONINA) => %f' % Lys_Met_ratio)
                    print('')
                    if Lys_Met_ratio >= 3.0:
                        print('La razione è carente di METIONINA!')
                        print('')
                        print("Prova a sostituire l'alimento <%s> (CARENTE DI METIONINA) con <girasole farina estrazione>" % FE) 
                       
                    
                    BFR = (APPORTO_PDI - app_tot_PDIE)/APPORTO_UFL
                    print('')
                    print('La RAZIONE fornisce %f g di PDIN' % APPORTO_PDI)
                    print('')
                    print('La RAZIONE fornisce %f g di PDIE' % app_tot_PDIE)
                    print('')
                    print('Rmic = (PDIN – PDIE)/UFL')
                    print('')
                    print('Rmic = %f' % BFR)
                    print('')
                    if BFR >= -17:
                        
                        print('La RAZIONE è accettabile')
                    else:
                        print('La RAZIONE non è accettabile')
                        print('Prova ad aumentare la quantità di %s' % FE) 



############################################################################################################################            
# METODO <LYS_MET>
# 4 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 3)
# FORAGGIO + CEREALE inseriti manualmente
# 2 alimenti inseriti manualmente + 4 alimenti inseriti in automatico => TOT 6
            
                elif Q and QM and not QFP:
                
                
                
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI> e <CEREALI>')

                                        
                
                    quantità_TOTALE_TAL_QUALE = Q + QM + quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0] + quantità_alimento_4[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_FOR_man[0] + app_CER_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0] + random_ARR_3_new[0]
                    APPORTO_PROTEINA_GREZZA = app_FOR_man[1] + app_CER_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1] + random_ARR_3_new[1]
                    APPORTO_FIBRA_GREZZA = app_FOR_man[2] + app_CER_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2] + random_ARR_3_new[2]
                    APPORTO_NDF = app_FOR_man[3] + app_CER_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3] + random_ARR_3_new[3]
                    APPORTO_ADF = app_FOR_man[4] + app_CER_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4] + random_ARR_3_new[4]
                    APPORTO_GRASSO = app_FOR_man[5] + app_CER_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5] + random_ARR_3_new[5]
                    APPORTO_AMIDO = app_FOR_man[6] + app_CER_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6] + random_ARR_3_new[6]
                    APPORTO_ZUCCHERI = app_FOR_man[7] + app_CER_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7] + random_ARR_3_new[7]
                    APPORTO_Ca = app_FOR_man[8] + app_CER_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8] + random_ARR_3_new[8]
                    APPORTO_P = app_FOR_man[9] + app_CER_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9] + random_ARR_3_new[9]
                    APPORTO_UFL = app_FOR_man[10] + app_CER_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10] + random_ARR_3_new[10]
                    APPORTO_PDI = app_FOR_man[11] + app_CER_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11] + random_ARR_3_new[11]



                    print('')
                    print('apporti di %s:' % M)
                    print('')
                    print(app_FOR_man)
                    print('')
                    print('apporti di %s:' % MG)
                    print('')
                    print(app_CER_man)
                    print('')        
                                                                          
                    print('apporti di %s:' % S[0])
                    print('')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print(random_ARR_2_new)
                    print('')
                    print('apporti di %s:' % S[3])
                    print('')
                    print(random_ARR_3_new)
                    print('')
                    print('apporti di %s:' % S[4])
                    print('')
                
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')
                    print('%f kg %s' % (QM, MG))                                                 
                    print('%f kg %s' % (Q, M))
                                                
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))
                    print('%f kg %s' % (quantità_alimento_4[0], S[3]))
                        
                  
                    print('')
                    print('Rapporto (LISINA / PROTEINA DIGERIBILE) => %f' % LysDI_ratio)
                    print('')
                    print('Rapporto (METIONINA / PROTEINA DIGERIBILE) => %f' % MetDI_ratio)
                    print('')
                    print('Rapporto (LISINA / METIONINA) => %f' % Lys_Met_ratio)
                    print('')
                    if Lys_Met_ratio >= 3.0:
                        print('La razione è carente di METIONINA!')
                        print('')
                        print("Prova a sostituire l'alimento <%s> (CARENTE DI METIONINA) con <girasole farina estrazione>" % FE) 
                       
                    
                    BFR = (APPORTO_PDI - app_tot_PDIE)/APPORTO_UFL
                    print('')
                    print('La RAZIONE fornisce %f g di PDIN' % APPORTO_PDI)
                    print('')
                    print('La RAZIONE fornisce %f g di PDIE' % app_tot_PDIE)
                    print('')
                    print('Rmic = (PDIN – PDIE)/UFL')
                    print('')
                    print('Rmic = %f' % BFR)
                    print('')
                    if BFR >= -17:
                        
                        print('La RAZIONE è accettabile')
                    else:
                        print('La RAZIONE non è accettabile')
                        print('Prova ad aumentare la quantità di %s' % FE) 
                    


############################################################################################################################            
# METODO <LYS_MET>
# 4 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 4)
# FORAGGIO inserito manualmente
# 1 alimento inserito manualmente + 4 alimenti inseriti in automatico => TOT 5

                elif Q and not QM and not QFP:
                
                
                
                    print('Hai inserito manualmente un alimento per la categoria <FORAGGI>') 



                    quantità_TOTALE_TAL_QUALE = Q + quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0] + quantità_alimento_4[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_FOR_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0] + random_ARR_3_new[0]
                    APPORTO_PROTEINA_GREZZA = app_FOR_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1] + random_ARR_3_new[1]
                    APPORTO_FIBRA_GREZZA = app_FOR_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2] + random_ARR_3_new[2]
                    APPORTO_NDF = app_FOR_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3] + random_ARR_3_new[3]
                    APPORTO_ADF = app_FOR_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4] + random_ARR_3_new[4]
                    APPORTO_GRASSO = app_FOR_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5] + random_ARR_3_new[5]
                    APPORTO_AMIDO = app_FOR_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6] + random_ARR_3_new[6]
                    APPORTO_ZUCCHERI = app_FOR_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7] + random_ARR_3_new[7]
                    APPORTO_Ca = app_FOR_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8] + random_ARR_3_new[8]
                    APPORTO_P = app_FOR_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9] + random_ARR_3_new[9]
                    APPORTO_UFL = app_FOR_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10] + random_ARR_3_new[10]
                    APPORTO_PDI = app_FOR_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11] + random_ARR_3_new[11]



                    print('')
                    print('apporti di %s:' % M)
                    print('')
                    print(app_FOR_man)
                    print('')  
                                        
                    print('apporti di %s:' % S[0])
                    print('')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print(random_ARR_2_new)
                    print('')
                    print('apporti di %s:' % S[3])
                    print('')
                    print(random_ARR_3_new)
                    print('')
                    print('apporti di %s:' % S[4])
                    print('')
                  
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')                       
                    print('%f kg %s' % (Q, M))
                                                
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))
                    print('%f kg %s' % (quantità_alimento_4[0], S[3]))
            
                   
                    print('')
                    print('Rapporto (LISINA / PROTEINA DIGERIBILE) => %f' % LysDI_ratio)
                    print('')
                    print('Rapporto (METIONINA / PROTEINA DIGERIBILE) => %f' % MetDI_ratio)
                    print('')
                    print('Rapporto (LISINA / METIONINA) => %f' % Lys_Met_ratio)
                    print('')
                    if Lys_Met_ratio >= 3.0:
                        print('La razione è carente di METIONINA!')
                        print('')
                        print("Prova a sostituire l'alimento <%s> (CARENTE DI METIONINA) con <girasole farina estrazione>" % FE) 
                       
                    
                    BFR = (APPORTO_PDI - app_tot_PDIE)/APPORTO_UFL
                    print('')
                    print('La RAZIONE fornisce %f g di PDIN' % APPORTO_PDI)
                    print('')
                    print('La RAZIONE fornisce %f g di PDIE' % app_tot_PDIE)
                    print('')
                    print('Rmic = (PDIN – PDIE)/UFL')
                    print('')
                    print('Rmic = %f' % BFR)
                    print('')
                    if BFR >= -17:
                        
                        print('La RAZIONE è accettabile')
                    else:
                        print('La RAZIONE non è accettabile')
                        print('Prova ad aumentare la quantità di %s' % FE) 
                    


############################################################################################################################            
# METODO <LYS_MET>
# 4 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 5)
# CEREALE inserito manualmente
# 1 alimento inserito manualmente + 4 alimenti inseriti in automatico => TOT 5

                elif QM and not Q and not QFP:
                
                
                
                    print('Hai inserito manualmente un alimento per la categoria <CEREALI>') 



                    quantità_TOTALE_TAL_QUALE = QM + quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0] + quantità_alimento_4[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_CER_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0] + random_ARR_3_new[0] 
                    APPORTO_PROTEINA_GREZZA = app_CER_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1] + random_ARR_3_new[1]
                    APPORTO_FIBRA_GREZZA = app_CER_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2] + random_ARR_3_new[2]
                    APPORTO_NDF = app_CER_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3] + random_ARR_3_new[3]
                    APPORTO_ADF = app_CER_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4] + random_ARR_3_new[4]
                    APPORTO_GRASSO = app_CER_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5] + random_ARR_3_new[5]
                    APPORTO_AMIDO = app_CER_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6] + random_ARR_3_new[6]
                    APPORTO_ZUCCHERI = app_CER_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7] + random_ARR_3_new[7]
                    APPORTO_Ca = app_CER_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8] + random_ARR_3_new[8]
                    APPORTO_P = app_CER_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9] + random_ARR_3_new[9]
                    APPORTO_UFL = app_CER_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10] + random_ARR_3_new[10]
                    APPORTO_PDI = app_CER_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11] + random_ARR_3_new[11]


                    print('')
                    print('apporti di %s:' % MG)
                    print('')
                    print(app_CER_man)
                    print('')  
                                        
                    print('apporti di %s:' % S[0])
                    print('')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print(random_ARR_2_new)
                    print('')
                    print('apporti di %s:' % S[3])
                    print('')
                    print(random_ARR_3_new)
                    print('')
                    print('apporti di %s:' % S[4])
                    print('')
                
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')
                    print('%f kg %s' % (QM, MG))                                                 
                                                
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))
                    print('%f kg %s' % (quantità_alimento_4[0], S[3]))
                    
                    print('')
                    print('Rapporto (LISINA / PROTEINA DIGERIBILE) => %f' % LysDI_ratio)
                    print('')
                    print('Rapporto (METIONINA / PROTEINA DIGERIBILE) => %f' % MetDI_ratio)
                    print('')
                    print('Rapporto (LISINA / METIONINA) => %f' % Lys_Met_ratio)
                    print('')
                    if Lys_Met_ratio >= 3.0:
                        print('La razione è carente di METIONINA!')
                        print('')
                        print("Prova a sostituire l'alimento <%s> (CARENTE DI METIONINA) con <girasole farina estrazione>" % FE) 
                       
                    
                    BFR = (APPORTO_PDI - app_tot_PDIE)/APPORTO_UFL
                    print('')
                    print('La RAZIONE fornisce %f g di PDIN' % APPORTO_PDI)
                    print('')
                    print('La RAZIONE fornisce %f g di PDIE' % app_tot_PDIE)
                    print('')
                    print('Rmic = (PDIN – PDIE)/UFL')
                    print('')
                    print('Rmic = %f' % BFR)
                    print('')
                    if BFR >= -17:
                        
                        print('La RAZIONE è accettabile')
                    else:
                        print('La RAZIONE non è accettabile')
                        print('Prova ad aumentare la quantità di %s' % FE) 
                    



############################################################################################################################            
# METODO <LYS_MET>
# 4 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 7)
# NESSUN ALIMENTO inserito manualmente
# 0 alimenti inseriti manualmente + 4 alimenti inseriti in automatico => TOT 4

                else:
                
                
                
                    print('Non hai inserito manualmente alcun alimento')


                    quantità_TOTALE_TAL_QUALE = quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0] + quantità_alimento_4[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0] + random_ARR_3_new[0]
                    APPORTO_PROTEINA_GREZZA = random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1] + random_ARR_3_new[1]
                    APPORTO_FIBRA_GREZZA = random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2] + random_ARR_3_new[2]
                    APPORTO_NDF = random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3] + random_ARR_3_new[3]
                    APPORTO_ADF = random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4] + random_ARR_3_new[4]
                    APPORTO_GRASSO = random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5] + random_ARR_3_new[5]
                    APPORTO_AMIDO = random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6] + random_ARR_3_new[6]
                    APPORTO_ZUCCHERI = random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7] + random_ARR_3_new[7]
                    APPORTO_Ca = random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8] + random_ARR_3_new[8]
                    APPORTO_P = random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9] + random_ARR_3_new[9]
                    APPORTO_UFL = random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10] + random_ARR_3_new[10]
                    APPORTO_PDI = random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11] + random_ARR_3_new[11]



                    print('apporti di %s:' % S[0])
                    print('')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print(random_ARR_2_new)
                    print('')
                    print('apporti di %s:' % S[3])
                    print('')
                    print(random_ARR_3_new)
                    print('')
                    print('apporti di %s:' % S[4])
                    print('')
                    
                    print('')
                    print('Rapporto (LISINA / PROTEINA DIGERIBILE) => %f' % LysDI_ratio)
                    print('')
                    print('Rapporto (METIONINA / PROTEINA DIGERIBILE) => %f' % MetDI_ratio)
                    print('')
                    print('Rapporto (LISINA / METIONINA) => %f' % Lys_Met_ratio)
                    print('')
                    if Lys_Met_ratio >= 3.0:
                        print('La razione è carente di METIONINA!')
                        print('')
                        print("Prova a sostituire l'alimento <%s> (CARENTE DI METIONINA) con <girasole farina estrazione>" % FE) 
                       
                    
                    BFR = (APPORTO_PDI - app_tot_PDIE)/APPORTO_UFL
                    print('')
                    print('La RAZIONE fornisce %f g di PDIN' % APPORTO_PDI)
                    print('')
                    print('La RAZIONE fornisce %f g di PDIE' % app_tot_PDIE)
                    print('')
                    print('Rmic = (PDIN – PDIE)/UFL')
                    print('')
                    print('Rmic = %f' % BFR)
                    print('')
                    if BFR >= -17:
                        
                        print('La RAZIONE è accettabile')
                    else:
                        print('La RAZIONE non è accettabile')
                        print('Prova ad aumentare la quantità di %s' % FE) 
                    



          
############################################################################################################################

        except NameError:
            print('ERRORE!')
            




        if metodo == 'LYS_MET':
            
                
      
            A = []
            A.append(APPORTO_DEFINITIVO_SOSTANZA_SECCA)
            A.append(APPORTO_PROTEINA_GREZZA)
            A.append(APPORTO_FIBRA_GREZZA)
            A.append(APPORTO_NDF)
            A.append(APPORTO_ADF)
            A.append(APPORTO_GRASSO)
            A.append(APPORTO_AMIDO)
            A.append(APPORTO_ZUCCHERI)
            A.append(APPORTO_Ca)
            A.append(APPORTO_P)
            A.append(APPORTO_UFL)
            A.append(APPORTO_PDI)
            
        
            try:
                with open('%s.txt' % nome_file_apporti, 'w') as external_file:
                    print(A, file=external_file)
                external_file.close()
            except NameError:
                with open('nuovi_apporti.txt', 'w') as external_file:
                    print(A, file=external_file)
                external_file.close()
            

            try:
                with open('%s.txt' % nome_file_fabbisogni, 'w') as external_file:
                    print(F, file=external_file)
                external_file.close()
            except NameError:
                with open('nuovi_fabbisogni.txt', 'w') as external_file:
                    print(A, file=external_file)
                external_file.close()

            
            print('')
            print('Ho salvato i PARAMETRI nel FILE DI TESTO <%s.txt>' % nome_file_parametri)
            print('')
            print('Ho salvato i FABBISOGNI nel FILE DI TESTO <%s.txt>' % nome_file_fabbisogni)
            print('')
            print('Ho salvato gli APPORTI nel FILE DI TESTO <%s.txt>' % nome_file_apporti)
            print('')
            print('Ho salvato i DATI nel FILE DI TESTO <%s.py>' % nome_file_dati)
            print('')
            print('Ho salvato le quantità nel FILE DI TESTO <%s.py>' % nome_file_quantità)
            print('')
            print('Ho salvato la RAZIONE nel FILE DI TESTO <%s.txt>' % nome_file_razione)
            print('')

        
            DELTA_SOSTANZA_SECCA = APPORTO_DEFINITIVO_SOSTANZA_SECCA - F[0]
            DELTA_PROTEINA_GREZZA = APPORTO_PROTEINA_GREZZA - F[1]
            DELTA_FIBRA_GREZZA = APPORTO_FIBRA_GREZZA - F[2]
            DELTA_NDF = APPORTO_NDF - F[3]
            DELTA_ADF = APPORTO_ADF - F[4]
            DELTA_GRASSO = APPORTO_GRASSO - F[5]
            DELTA_AMIDO = APPORTO_AMIDO - F[6]
            DELTA_ZUCCHERI = APPORTO_ZUCCHERI - F[7]
            DELTA_Ca = APPORTO_Ca - F[8]
            DELTA_P = APPORTO_P - F[9]
            DELTA_UFL = APPORTO_UFL - F[10]
            DELTA_PDI = APPORTO_PDI - F[11]
        
                              
            print('')
            print('')
            if i == N_repl-1:
                print('Il calcolo della razione non ha avuto SUCCESSO; per favore cancella gli alimenti inseriti e riprova.')
            elif i < N_repl-1:
                print('Il CALCOLO DELLA RAZIONE è stato effettuato con SUCCESSO alla %d^ replica!' % i)        
            print('')
        


                        
            print("Il FABBISOGNO DI SOSTANZA SECCA (che dev'essere soddisfatto dagli alimenti aggiunti) delle bovine del gruppo <%s> è di %f kg" %  (gruppo, F_arr[0]))
            print('')
            print("L'APPORTO DI SOSTANZA SECCA degli alimenti selezionati è di %f kg" % APPORTO_SOSTANZA_SECCA)
            print('')

            print('')        
            print('LEGENDA')
            print('')
            print("DM => Dry Matter (Apporto di Sostanza Secca)")
            print("CP => Crude Protein (Apporto di PROTEINA GREZZA)")
            print("FG => FIBRA GREZZA (apporto di FIBRA GREZZA)")
            print("NDF => NDF (apporto di Fibra resistente al Detergente Neutro)")
            print("ADF => ADF (apporto di Fibra resistente al Detergente Acido)")
            print("FAT => Fat (apporto di GRASSO)")
            print("AM => AMIDO (apporto di AMIDO)")
            print("ZUC => ZUCCHERI (apporto di ZUCCHERI)")
            print("Ca => Calcio (apporto di Calcio)")
            print("P => Fosforo (apporto di Fosforo)")
            print("UFL => Unità Foraggere Latte (apporto di Energia Netta)")
            print("PDI => Proteina Digeribile Intestinale (apporto di PDI)")
            print('')
            print('')
            print('DMI','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PFI')
            
            
            if len(PREZZI) == len(S):

                print('')
                for i in list(range(len(PREZZI))):
                    print("Prezzo dell'alimento <%s> => %f EURO/ton" % (S[i], PREZZI[i]))
                print('')
                print('********************************************************************')
                print('')
            else:
                print('Impossibile creare la TABELLA DEI PREZZI: ci sono uno o più alimenti non quotati!')


            
            if len(PREZZI) == len(S):

            
                costo_alimento_1 = quantità_alimento_1[0] * PREZZI[0] / 1000
                costo_alimento_2 = quantità_alimento_2[0] * PREZZI[1] / 1000
                costo_alimento_3 = quantità_alimento_3[0] * PREZZI[2] / 1000
                costo_alimento_4 = quantità_alimento_4[0] * PREZZI[3] / 1000
                          
                COSTO_RAZIONE = []            
                COSTO_RAZIONE.append(costo_alimento_1)
                COSTO_RAZIONE.append(costo_alimento_2)
                COSTO_RAZIONE.append(costo_alimento_3)
                COSTO_RAZIONE.append(costo_alimento_4)
                
            
                if Q and not QM and not QFP:
                            
                    if type(costo_FORAGGIO_quantità) is float: 
                        COSTO_RAZIONE.append(costo_FORAGGIO_quantità)
                        print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[3], costo_alimento_4))
                        print("Costo dell'alimento <%s>: %f EURO" % (M, costo_FORAGGIO_quantità))

                    else:
                        print("Il prezzo dell'alimento <%s> non è disponibile!" % M) 

                
                elif QM and not Q and not QFP:                
                
                    if type(costo_CEREALE_quantità) is float:
                        COSTO_RAZIONE.append(costo_CEREALE_quantità)  
                        print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[3], costo_alimento_4))
                        print("Costo dell'alimento <%s>: %f EURO" % (MG, costo_CEREALE_quantità))

                    else:
                        print("Il prezzo dell'alimento <%s> non è disponibile!" % MG) 

            
                elif QFP and not Q and not QM:
                
                    if type(costo_FONTE_PROTEICA_quantità) is float:
                        COSTO_RAZIONE.append(costo_FONTE_PROTEICA_quantità)
                        print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[3], costo_alimento_4))
                        print("Costo dell'alimento <%s>: %f EURO" % (FE, costo_FONTE_PROTEICA_quantità))
                    else:
                        print("Il prezzo dell'alimento <%s> non è disponibile!" % FE)

            
                elif Q and QM and not QFP:
                
                    if type(costo_FORAGGIO_quantità) is float and type(costo_CEREALE_quantità) is float: 
                        COSTO_RAZIONE.append(costo_FORAGGIO_quantità)
                        COSTO_RAZIONE.append(costo_CEREALE_quantità)  
                        print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[3], costo_alimento_4))              
                        print("Costo dell'alimento <%s>: %f EURO" % (M, costo_FORAGGIO_quantità))
                        print("Costo dell'alimento <%s>: %f EURO" % (MG, costo_CEREALE_quantità))                        
                    
                    else:
                        print("Il prezzo dell'alimento <%s> e/o dell'alimento <%s> non è disponibile!" % (M, MG))

            
                elif Q and QFP:
                
                    if type(costo_FORAGGIO_quantità) is float and type(costo_FONTE_PROTEICA_quantità) is float:  
                        COSTO_RAZIONE.append(costo_FORAGGIO_quantità)
                        COSTO_RAZIONE.append(costo_FONTE_PROTEICA_quantità)
                        print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[3], costo_alimento_4))                     
                        print("Costo dell'alimento <%s>: %f EURO" % (M, costo_FORAGGIO_quantità))
                        print("Costo dell'alimento <%s>: %f EURO" % (FE, costo_FONTE_PROTEICA_quantità))

                    else:
                        print("Il prezzo dell'alimento <%s> e/o dell'alimento <%s> non è disponibile!" % (M, FE))

                
                elif QM and QFP and not Q:
                
                    if type(costo_CEREALE_quantità) is float and type(costo_FONTE_PROTEICA_quantità) is float:
                        COSTO_RAZIONE.append(costo_CEREALE_quantità) 
                        COSTO_RAZIONE.append(costo_FONTE_PROTEICA_quantità)
                        print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[3], costo_alimento_4))                   
                        print("Costo dell'alimento <%s>: %f EURO" % (MG, costo_CEREALE_quantità))
                        print("Costo dell'alimento <%s>: %f EURO" % (FE, costo_FONTE_PROTEICA_quantità)) 
                    else:
                        print("Il prezzo dell'alimento <%s> e/o dell'alimento <%s> non è disponibile!" % (MG, FE))
                                           
                   
                elif Q and QM and QFP:
                    if type(prezzo_FORAGGIO_quantità) is float and type(prezzo_CEREALE_quantità) is float and type(prezzo_FONTE_PROTEICA_quantità) is float:
                        COSTO_RAZIONE.append(costo_FORAGGIO_quantità)
                        COSTO_RAZIONE.append(costo_CEREALE_quantità)                                   
                        COSTO_RAZIONE.append(costo_FONTE_PROTEICA_quantità)

                        print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[3], costo_alimento_4))
                        print("Costo dell'alimento <%s>: %f EURO" % (M, costo_FORAGGIO_quantità))                     
                        print("Costo dell'alimento <%s>: %f EURO" % (MG, costo_CEREALE_quantità))
                        print("Costo dell'alimento <%s>: %f EURO" % (FE, costo_FONTE_PROTEICA_quantità)) 
                    else:
                        print("Il prezzo dell'alimento <%s> e/o dell'alimento <%s> e/o dell'alimento <%s> non è disponibile!" % (M, MG, FE))
                                           
                COSTO_TOTALE = sum(COSTO_RAZIONE)
                print('')
                print('Il costo della razione è %f EURO' % COSTO_TOTALE)
                if COSTO_TOTALE > PREZZO_MAX:
                    print('Il COSTO TOTALE della razione è > del PREZZO MASSIMO che hai impostato!')
                    print('Prova a scegliere altri alimenti e ricalcola la RAZIONE')
            
            
            else:
                print('Non posso calcolare il COSTO DELLA RAZIONE: ci sono uno o più alimenti non quotati!') 
            
            
            print('')                
            print('')
            print('')
            print('_______________________________________________________________________________________________')
            print('|                         |                    |                         |                    |')
            print('|                         |                    |                         |                    |')
            print('|   PRINCIPIO NUTRITIVO   |      APPORTO       |       Fabbisogno        |     DIFFERENZA     |')
            print('|                         |                    |                         |                    |')
            print('|_________________________|____________________|_________________________|____________________|')
            print('|      Sostanza Secca     |     %f kg   |  %f kg           |  %f kg       |' % (APPORTO_DEFINITIVO_SOSTANZA_SECCA, F[0], DELTA_SOSTANZA_SECCA))
            print('|      PROTEINA GREZZA    |   %f g    |%f g            |%f g        |' % (APPORTO_PROTEINA_GREZZA, F[1], DELTA_PROTEINA_GREZZA))
            print('|      FIBRA GREZZA       |   %f g    |%f g            |%f g        |' % (APPORTO_FIBRA_GREZZA, F[2], DELTA_FIBRA_GREZZA))
            print('|           NDF           |   %f g    |%f g            |%f g        |' % (APPORTO_NDF, F[3], DELTA_NDF))
            print('|           ADF           |   %f g    |%f g            |%f g        |' % (APPORTO_ADF, F[4], DELTA_ADF))
            print('|         GRASSO          |   %f g    |%f g            |%f g        |' % (APPORTO_GRASSO, F[5], DELTA_GRASSO)) 
            print('|          AMIDO          |   %f g    |%f g            |%f g        |' % (APPORTO_AMIDO, F[6], DELTA_AMIDO))
            print('|        ZUCCHERI         |    %f g    |%f g            |%f g       |' % (APPORTO_ZUCCHERI, F[7], DELTA_ZUCCHERI))
            print('|           Ca            |   %f g      |  %f g           |  %f g     |' % (APPORTO_Ca, F[8], DELTA_Ca))        
            print('|            P            |   %f g      |  %f g            |  %f g      |' % (APPORTO_P, F[9], DELTA_P))        
            print('|           UFL           |     %f      | %f               | %f           |' % (APPORTO_UFL, F[10], DELTA_UFL))
            print('|           PDI           |     %f      | %f               | %f           |' % (APPORTO_PDI, F[11], DELTA_PDI))        
            print('_______________________________________________________________________________________________')
            print('')
            print('')
            print('')
            print('******************************************** SOSTANZA SECCA ********************************************')
            print('')
            print('La razione fornisce %f kg di alimento tal quale' % quantità_TOTALE_TAL_QUALE)
            print('')
            print('La razione fornisce %f kg di Sostanza Secca' % APPORTO_DEFINITIVO_SOSTANZA_SECCA)            
            print('')
            DMI_AS_FED_ratio = (APPORTO_DEFINITIVO_SOSTANZA_SECCA/quantità_TOTALE_TAL_QUALE)*100
            print('La tua RAZIONE contiene il %fx100 di SOSTANZA SECCA' % DMI_AS_FED_ratio)
            print('')
            if DMI_AS_FED_ratio < 0.6:
                print('')
                print('In estate, in caso di COMPETIZIONE ALIMENTARE x un N° INSUFFICIENTE DI AUTOCATTURANTI (= BOVINE IN PIEDI),')
                print('se prepari un CARRO MISCELATORE con, per es., un 10x100 in più di razioni (per es., con 100')
                print('BOVINE IN LATTAZIONE metto nel carro 110 RAZIONI), dal momento che la miscelata rimarrà per più tempo in')
                print('mangiatoia, potrebbe scaldarsi!')
                print("Prova a RIDURRE UN PO' L'APPORTO COMPLESSIVO DI FORAGGIO, insilato, per aumentare la SS della razione,")
                print("o fieno (dipende da che tipo di FORAGGIo hai inserito manualmente), per forzare il programma ad")
                print("AUMENTARE L'APPORTO DELLA FONTE DI FIBRA DIGERIBILE")
                print("In questo modo, si dovrebbe attenuare la riduzione dell'ingestione volontaria di fibra scarsamente")
                print("digeribile (poiché più o meno lignificata), nonché il conseguente CALO DEL TENORE IN GRASSO del latte")
                print("Tieni anche conto del fatto che, riducendo l'apporto della cosiddetta <FIBRA FISICAMENTE EFFICACE>")
                print("(quella dei FORAGGI, che fa ruminare), LE BOVINE PRODURRANNO MENO SALIVA (che è il tampone naturale")
                print("del rumine) e, quindi, dovrai valutare l'inserimento di un TAMPONE ARTIFICIALE, come il bicarbonato")
                print("di calcio o di sodio, nella razione")    
            print('')
            print('')
            print('******************************************** PROTEINA GREZZA ********************************************')
            print('')
            APPORTO_DEFINITIVO_SOSTANZA_SECCA_g = APPORTO_DEFINITIVO_SOSTANZA_SECCA * 1000
            CP_DMI_ratio = APPORTO_PROTEINA_GREZZA/APPORTO_DEFINITIVO_SOSTANZA_SECCA_g
            print('Rapporto (PROTEINA GREZZA : Sostanza Secca) => %f' % CP_DMI_ratio)
            print('')
            print("Secondo Dell'Orto e Savoini, ad inizio lattazione dovrebbe essere ~ 0.18 (18%)")
            print('')
            if CP_DMI_ratio <= 0.17:
                print("L'apporto di PROTEINA GREZZA è insufficiente")
                print("Se avevi scelto una fonte proteica diversa dalla <F.E. DI SOIA>, sostituiscila con quest'ultima!")
                print("Se non basta, prova a sostituire il fieno di prato stabile o l'insilato di loietto con il <FIENO DI ERBA MEDICA e/o a ridurre l'apporto di insilato (o di pastone) di mais>")         
            print('')
            print('')


            print('******************************************* LISINA & METIONINA *******************************************')
            print('')
            print('Rapporto (LISINA / PROTEINA DIGERIBILE) => %f' % LysDI_ratio)
            print('')
            print('Rapporto (METIONINA / PROTEINA DIGERIBILE) => %f' % MetDI_ratio)
            print('')
            
            rapporto_Lys_Met = LysDI_ratio/MetDI_ratio

            print('Rapporto (LISINA / METIONINA) => %f' % rapporto_Lys_Met)
            print('')
            if rapporto_Lys_Met >= 3.0:
                print('La razione contiene un eccesso di LISINA!')
                print('')
                print('Dovrebbe essere > 2.7 e < 3.0')
                print('')
                print("Se hai scelto come FONTE DI PROTEINA un alimento CARENTE DI METIONINA, prova a sostituirlo con la <farina estrazione di girasole>")

            print('')
            print('')      
            print('')
            print('')           
            print('*********************************************** PDIN & PDIE ***********************************************')        
            
            BFR = (APPORTO_PDI - PDIE_TOT)/APPORTO_UFL
            print('')
            print('La RAZIONE fornisce %f g di PDIN' % PDIN_TOT)
            print('')
            print('La RAZIONE fornisce %f g di PDIE' % PDIE_TOT)
            print('')
            print('Rmic = (PDIN – PDIE)/UFL')
            print('')
            print('Rmic = %f' % BFR)
            print('')
            if BFR >= -17:                       
                print('La RAZIONE è accettabile')
                print('')
            else:
                print('La RAZIONE non è accettabile')
                print('Prova ad aumentare la quantità di %s' % FE)
            print('')
            print('')


            print('********************************************** FIBRA GREZZA **********************************************')                   
            FG_DMI_ratio = APPORTO_FIBRA_GREZZA/APPORTO_DEFINITIVO_SOSTANZA_SECCA_g
            print('')                 
            FG_DMI_ratio = APPORTO_FIBRA_GREZZA/APPORTO_DEFINITIVO_SOSTANZA_SECCA_g
            print('')
            print('Rapporto (FIBRA GREZZA : Sostanza Secca) => %f' % FG_DMI_ratio)
            print('')
            print('Dovrebbe essere ~ 0.17 (17%)')
            print('')
            # print('********************************************** NDF **********************************************')  
            APPORTO_NDF_FORAGGI = app_FOR_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3]
            NDF_FORAGGI_NDF_tot_ratio = APPORTO_NDF_FORAGGI/APPORTO_NDF
#           print('Rapporto (NDF da FORAGGI : NDF totale) => %f' % NDF_FORAGGI_NDF_tot_ratio)
#           print('')
#           print('Dovrebbe essere ~ 0.75 (75%)')
            print('')
            print('')           
            print('')
            print('***********************************************************************************************************')
            print('********************************************* FINE DEL REPORT *********************************************')
            print('***********************************************************************************************************')
            
            sys.stdout = original



#################################################################################################################
###################################### 5 ALIMENTI INSERITI AUTOMATICAMENTE ######################################
#################################################################################################################
                                        


    elif len(S) == 5:
    
        print('')
        print('Questo TESTO viene visualizzato sul terminale, non inserito nel file!')
        print('')
        if day == 'Monday': 
            print('RAZIONE di %s, creata Lunedì %s, %s' % (user, data, current_time))
        if day == 'Tuesday': 
            print('RAZIONE di %s, creata Martedì %s, %s' % (user, data, current_time))
        if day == 'Wednesday': 
            print('RAZIONE di %s, creata Mercoledì %s, %s' % (user, data, current_time))
        if day == 'Thursday': 
            print('RAZIONE di %s, creata Giovedì %s, %s' % (user, data, current_time))
        if day == 'Friday': 
            print('RAZIONE di %s, creata Venerdì %s, %s' % (user, data, current_time))
        if day == 'Saturday': 
            print('RAZIONE di %s, creata Sabato %s, %s' % (user, data, current_time))
        if day == 'Sunday': 
            print('RAZIONE di %s, creata Domenica %s, %s' % (user, data, current_time))

        print('')
        print('Hai inserito 5 alimenti:')
        print('')
        print('ALIMENTO 1 => <%s>' % S[0])
        print('ALIMENTO 2 => <%s>' % S[1])
        print('ALIMENTO 3 => <%s>' % S[2])
        print('ALIMENTO 4 => <%s>' % S[3])
        print('ALIMENTO 5 => <%s>' % S[4])
        print('')
        
        print(ARR[0])
        print(ARR[1])
        print(ARR[2])
        print(ARR[3])
        print(ARR[4])
        
                
        random_ARR_0_old = ARR[0] * random.random() * 10
        random_ARR_1_old = ARR[1] * random.random() * 10
        random_ARR_2_old = ARR[2] * random.random() * 10
        random_ARR_3_old = ARR[3] * random.random() * 10
        random_ARR_4_old = ARR[4] * random.random() * 10
        
# ogni alimento scelto dall'utente viene moltiplicato per un numero casuale compreso fra 0 e 10 (kg) 
# dichiaro random_ARR_x_old

        
        random_ARR_0_new = random_ARR_0_old * (random.random() + 0.5)
        random_ARR_1_new = random_ARR_1_old * (random.random() + 0.5)
        random_ARR_2_new = random_ARR_2_old * (random.random() + 0.5)
        random_ARR_3_new = random_ARR_3_old * (random.random() + 0.5)
        random_ARR_4_new = random_ARR_4_old * (random.random() + 0.5)
        
# dichiaro random_ARR_x_new
        
        SOMMA_old = random_ARR_0_old + random_ARR_1_old + random_ARR_2_old + random_ARR_3_old + random_ARR_4_old

###########################################################################################################################################        
        
        print(SOMMA_old)
        print(F_arr)
        
        DELTA_old = SOMMA_old - F_arr
        print('La somma iniziale è...')
        print(SOMMA_old)

# dichiaro SOMMA_old e DELTA_old

        SOMMA_new = random_ARR_0_new + random_ARR_1_new + random_ARR_2_new + random_ARR_3_new + random_ARR_4_new
        DELTA_new = SOMMA_new - F_arr
        print('La nuova somma è...')
        print(SOMMA_new)
        print('La nuova differenza è...')
        print(DELTA_new)

# dichiaro SOMMA_new e DELTA_new
        
        quantità_alimento_1 = random_ARR_0_new / ARR[0]
        quantità_alimento_2 = random_ARR_1_new / ARR[1]
        quantità_alimento_3 = random_ARR_2_new / ARR[2]
        quantità_alimento_4 = random_ARR_3_new / ARR[3]
        quantità_alimento_5 = random_ARR_4_new / ARR[4]
        
# dichiaro gli apporti dei singoli alimenti


        i = 0

# inizializzo il contatore i        
        
        for i in range(N_repl):
        
            rules = [abs(DELTA_new[0]) < abs(DELTA_old[0]), abs(DELTA_new[1]) < abs(DELTA_old[1]), abs(DELTA_new[2]) < abs(DELTA_old[2])]

# dichiaro le regole da rispettare
                                    
            if all(rules):
            
                print('ESTRAGGO DALLA PROPOSAL DISTRIBUTION')
                i += 1
                print(i)
                                                         	               	        
                random_ARR_0_new = random_ARR_0_new * (random.random() + 0.5)
                random_ARR_1_new = random_ARR_1_new * (random.random() + 0.5)
                random_ARR_2_new = random_ARR_2_new * (random.random() + 0.5)
                random_ARR_3_new = random_ARR_3_new * (random.random() + 0.5)
                random_ARR_4_new = random_ARR_4_new * (random.random() + 0.5)
                
# ACCETTO random_ARR_x_new e lo uso per aggiornare random_ARR_x_new stesso 
                
                APPORTO_SOSTANZA_SECCA = random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0] + random_ARR_3_new[0] + random_ARR_4_new[0]
                print(APPORTO_SOSTANZA_SECCA)

# aggiorno l'apporto di SS
                                
                SOMMA_new = random_ARR_0_new + random_ARR_1_new + random_ARR_2_new + random_ARR_3_new + random_ARR_4_new
                DELTA_new = SOMMA_new - F_arr
                
# aggiorno SOMMA_new e DELTA_new                
                
                print('La nuova somma è...')
                print(SOMMA_new)
                print('La nuova differenza è...')
                print(DELTA_new)
            
                quantità_alimento_1 = random_ARR_0_new / ARR[0]
                quantità_alimento_2 = random_ARR_1_new / ARR[1]
                quantità_alimento_3 = random_ARR_2_new / ARR[2]
                quantità_alimento_4 = random_ARR_3_new / ARR[3]
                quantità_alimento_5 = random_ARR_4_new / ARR[4]
                
                if round(APPORTO_SOSTANZA_SECCA) == round(F_arr[0]):
                
                    break
                                
                print('')                
                print("SUCCESSO! L'APPORTO di Sostanza Secca corrisponde al FABBISOGNO.")

                    	                
            else:
                    
                random_ARR_0_new = random_ARR_0_old * (random.random() + 0.5)
                random_ARR_1_new = random_ARR_1_old * (random.random() + 0.5)
                random_ARR_2_new = random_ARR_2_old * (random.random() + 0.5)
                random_ARR_3_new = random_ARR_3_old * (random.random() + 0.5)
                random_ARR_4_new = random_ARR_4_old * (random.random() + 0.5)
                
# RIFIUTO random_ARR_x_new e lo ricalcolo a partire da random_ARR_x_old 
                
                print('FALLIMENTO')
                
                APPORTO_SOSTANZA_SECCA = random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0] + random_ARR_3_new[0] + random_ARR_4_new[0]

                                
                SOMMA_new = random_ARR_0_new + random_ARR_1_new + random_ARR_2_new + random_ARR_3_new + random_ARR_4_new
                DELTA_new = SOMMA_new - F_arr
                                                
                print('La nuova somma è...')
                print(SOMMA_new)
                print('La nuova differenza è...')
                print(DELTA_new)
                
            
                quantità_alimento_1 = random_ARR_0_new / ARR[0]
                quantità_alimento_2 = random_ARR_1_new / ARR[1]
                quantità_alimento_3 = random_ARR_2_new / ARR[2]
                quantità_alimento_4 = random_ARR_3_new / ARR[3]
                quantità_alimento_5 = random_ARR_4_new / ARR[4]


                random_ARR_0_new_ROUND = list(map(arrotonda, random_ARR_0_new))
                random_ARR_1_new_ROUND = list(map(arrotonda, random_ARR_1_new))
                random_ARR_2_new_ROUND = list(map(arrotonda, random_ARR_2_new))
                random_ARR_3_new_ROUND = list(map(arrotonda, random_ARR_3_new))
                random_ARR_4_new_ROUND = list(map(arrotonda, random_ARR_4_new))


                
############################################################################################################################
################################# metodo => <_CNCPS_> INIZIO DEL REDIREZIONAMENTO DELLA STAMPA #############################
############################################################################################################################

                                                    ### 5 ALIMENTI AUTO ###


           
        original = sys.stdout
        sys.stdout = open('%s.txt' % nome_file_razione, 'w')

        if day == 'Monday': 
            print('RAZIONE di %s, creata Lunedì %s, %s' % (user, data, current_time))
        if day == 'Tuesday': 
            print('RAZIONE di %s, creata Martedì %s, %s' % (user, data, current_time))
        if day == 'Wednesday': 
            print('RAZIONE di %s, creata Mercoledì %s, %s' % (user, data, current_time))
        if day == 'Thursday': 
            print('RAZIONE di %s, creata Giovedì %s, %s' % (user, data, current_time))
        if day == 'Friday': 
            print('RAZIONE di %s, creata Venerdì %s, %s' % (user, data, current_time))
        if day == 'Saturday': 
            print('RAZIONE di %s, creata Sabato %s, %s' % (user, data, current_time))
        if day == 'Sunday': 
            print('RAZIONE di %s, creata Domenica %s, %s' % (user, data, current_time))



        try:


                
            if metodo == '_CNCPS_':
            
            
                            
                # from crea_db_PARAMETRI_L_CNCPS_ import LW, WOL, MY, FAT_milk, CP_milk, LAC_milk, N_repl, giorno_di_inserimento, data_di_inserimento, ora_di_inserimento
                
                print('PARAMETRI inseriti da %s, %s %s alle ore %s' % (user, giorno_di_inserimento, data_di_inserimento, ora_di_inserimento))
                print('') 
                print('METODO DI CALCOLO della razione => <%s>' % metodo)
                print('PESO VIVO MEDIO BOVINE IN LATTAZIONE => %f kg' % LW)
                print('SETTIMANA DI LATTAZIONE media => %d^' % WOL)
                print('LIVELLO PRODUTTIVO medio => %f kg di latte al giorno' % MY)
                print('TENORE DI GRASSO del latte => %fx100' % FAT_milk)
                print('TENORE DI PROTEINA del latte => %fx100' % CP_milk)
                print('TENORE DI LATTOSIO del latte => %fx100' % LAC_milk)
                print('N° DI REPLICHE => %d' % N_repl)
                print('')
        

                F = []
                F.append(DMI)
                F.append(CP)
                F.append(RDP)
                F.append(RUP)
                F.append(FG)
                F.append(NDF)
                F.append(ADF)
                F.append(FAT)
                F.append(AM)
                F.append(ZUC)
                F.append(Ca_tot)
                F.append(P_tot)
                F.append(UFL_tot)


# STAMPA FABBISOGNI _CNCPS_

                print('')
                print('Hai scelto il METODO DI CALCOLO della razione <Cornell %s>' % metodo)    
                print('')
                print('FABBISOGNI')
                print('')    
                print('CAPACITÀ DI INGESTIONE => %f kg di Sostanza Secca' % F[0])
                print('Fabbisogno di <PROTEINA GREZZA> => %f g' % F[1])
                print('Fabbisogno di <PROTEINA DEGRADABILE> => %f g' % F[2])
                print('Fabbisogno di <PROTEINA INDEGRADABILE> => %f g' % F[3])
                print('Fabbisogno di <FIBRA GREZZA> => %f g' % F[4])
                print('Fabbisogno di <NDF> => %f g' % F[5])
                print('Fabbisogno di <ADF> => %f g' % F[6]) 
                print('Fabbisogno di <GRASSO> => %f g' % F[7])
                print('Fabbisogno di <AMIDO> => %f g' % F[8])
                print('Fabbisogno di <ZUCCHERI> => %f g' % F[9])
                print('Fabbisogno di <CALCIO> => %f g' % F[10])
                print('Fabbisogno di <FOSFORO> => %f g' % F[11])
                print('Fabbisogno di <ENERGIA NETTA> => %f Unità Foraggere Latte. \n' % F[12])
                print('')
                


                if Q and QM and QFP:
                
                    F_arr = F_arr_ricalcolato_QM_FE
                
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI>, <CEREALI> e <FONTI PROTEICHE>')
                    print('')
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                              
                    print(F_arr)


                elif Q and QFP:
                
                    F_arr = F_arr_ricalcolato_FE
                
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI> e <FONTI PROTEICHE>')      
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(F_arr)
                

                elif Q and QM and not QFP:

                    F_arr = F_arr_ricalcolato
        
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI> e <CEREALI>')
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')                
                    print(F_arr)              
            

                elif Q and not QM and not QFP: 

                    F_arr = F_arr_ric
        
                    print('Hai inserito manualmente solo un alimento della categoria <FORAGGI>')
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(F_arr)


                else:

                    F_arr = F_arr
        
                    print('Nessun alimento inserito manualmente')


                    print('')
                    print("L'apporto di Sostanza Secca degli alimenti selezionati è %f" % APPORTO_SOSTANZA_SECCA)
                    print('')
                    
                

############################################################################################################################

             

# CASO 1)
# FORAGGIO + MAIS GRANELLA + FE inseriti manualmente
# 3 alimenti inseriti manualmente + 5 alimenti inseriti in automatico => TOT 8
                                                
                if Q and QM and QFP:
                

                    quantità_TOTALE_TAL_QUALE = Q + QM + QFP + quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0] + quantità_alimento_4[0] + quantità_alimento_5[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_FP_man[0] + app_FOR_man[0] + app_CER_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0] + random_ARR_3_new[0] + random_ARR_4_new[0] 
                    APPORTO_PROTEINA_GREZZA = app_FP_man[1] + app_FOR_man[1] + app_CER_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1] + random_ARR_3_new[1] + random_ARR_4_new[1]
                    APPORTO_PROTEINA_DEGRADABILE = app_FP_man[2] + app_FOR_man[2] + app_CER_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2] + random_ARR_3_new[2] + random_ARR_4_new[2]
                    APPORTO_PROTEINA_INDEGRADABILE = app_FP_man[3] + app_FOR_man[3] + app_CER_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3] + random_ARR_3_new[3] + random_ARR_4_new[3]
                    APPORTO_FIBRA_GREZZA = app_FP_man[4] + app_FOR_man[4] + app_CER_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4] + random_ARR_3_new[4] + random_ARR_4_new[4]
                    APPORTO_NDF = app_FP_man[5] + app_FOR_man[5] + app_CER_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5] + random_ARR_3_new[5] + random_ARR_4_new[5]
                    APPORTO_ADF = app_FP_man[6] + app_FOR_man[6] + app_CER_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6] + random_ARR_3_new[6] + random_ARR_4_new[6]
                    APPORTO_GRASSO = app_FP_man[7] + app_FOR_man[7] + app_CER_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7] + random_ARR_3_new[7] + random_ARR_4_new[7]
                    APPORTO_AMIDO = app_FP_man[8] + app_FOR_man[8] + app_CER_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8] + random_ARR_3_new[8] + random_ARR_4_new[8]
                    APPORTO_ZUCCHERI = app_FP_man[9] + app_FOR_man[9] + app_CER_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9] + random_ARR_3_new[9] + random_ARR_4_new[9]
                    APPORTO_Ca = app_FP_man[10] + app_FOR_man[10] + app_CER_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10] + random_ARR_3_new[10] + random_ARR_4_new[10]
                    APPORTO_P = app_FP_man[11] + app_FOR_man[11] + app_CER_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11] + random_ARR_3_new[11] + random_ARR_4_new[11]
                    APPORTO_UFL = app_FP_man[12] + app_FOR_man[12] + app_CER_man[12] + random_ARR_0_new[12] + random_ARR_1_new[12] + random_ARR_2_new[12] + random_ARR_3_new[12] + random_ARR_4_new[12]


                    
                    print('')
                    print('apporti di %s:' % M)
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(app_FOR_man)
                    print('')

                    print('')
                    print('apporti di %s:' % MG)
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(app_CER_man)
                    print('')
                
                    print('apporti di %s:' % FE)
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(app_FP_man)
                    print('')

                    print('apporti di %s:' % S[0])
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(random_ARR_2_new)
                    print('')
                    print('apporti di %s:' % S[3])
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(random_ARR_3_new)
                    print('')
                    print('apporti di %s:' % S[4])
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(random_ARR_4_new)
                    print('')
                               
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')
                    print('%f kg %s' % (QM, MG))                                         
                    print('%f kg %s' % (Q, M))
                    print('%f kg %s' % (QFP, FE))
                                            
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))
                    print('%f kg %s' % (quantità_alimento_4[0], S[3]))
                    print('%f kg %s' % (quantità_alimento_5[0], S[4]))
            
            

############################################################################################################################


# CASO 2)
# FORAGGIO + FE inseriti manualmente
                  
                elif Q and QFP:


                    quantità_TOTALE_TAL_QUALE = Q + QFP + quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0] + quantità_alimento_4[0] + quantità_alimento_5[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_FP_man[0] + app_FOR_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0] + random_ARR_3_new[0] + random_ARR_4_new[0] 
                    APPORTO_PROTEINA_GREZZA = app_FP_man[1] + app_FOR_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1] + random_ARR_3_new[1] + random_ARR_4_new[1]
                    APPORTO_PROTEINA_DEGRADABILE = app_FP_man[2] + app_FOR_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2] + random_ARR_3_new[2] + random_ARR_4_new[2]
                    APPORTO_PROTEINA_INDEGRADABILE = app_FP_man[3] + app_FOR_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3] + random_ARR_3_new[3] + random_ARR_4_new[3]
                    APPORTO_FIBRA_GREZZA = app_FP_man[4] + app_FOR_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4] + random_ARR_3_new[4] + random_ARR_4_new[4]
                    APPORTO_NDF = app_FP_man[5] + app_FOR_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5] + random_ARR_3_new[5] + random_ARR_4_new[5]
                    APPORTO_ADF = app_FP_man[6] + app_FOR_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6] + random_ARR_3_new[6] + random_ARR_4_new[6]
                    APPORTO_GRASSO = app_FP_man[7] + app_FOR_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7] + random_ARR_3_new[7] + random_ARR_4_new[7]
                    APPORTO_AMIDO = app_FP_man[8] + app_FOR_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8] + random_ARR_3_new[8] + random_ARR_4_new[8]
                    APPORTO_ZUCCHERI = app_FP_man[9] + app_FOR_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9] + random_ARR_3_new[9] + random_ARR_4_new[9]
                    APPORTO_Ca = app_FP_man[10] + app_FOR_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10] + random_ARR_3_new[10] + random_ARR_4_new[10]
                    APPORTO_P = app_FP_man[11] + app_FOR_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11] + random_ARR_3_new[11] + random_ARR_4_new[11]
                    APPORTO_UFL = app_FP_man[12] + app_FOR_man[12] + random_ARR_0_new[12] + random_ARR_1_new[12] + random_ARR_2_new[12] + random_ARR_3_new[12] + random_ARR_4_new[12]


                       
                    print('')
                    print('apporti di %s:' % M)
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(app_FOR_man)
                    print('')
                
                    print('apporti di %s:' % FE)
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(app_FP_man)
                    print('')

                    print('apporti di %s:' % S[0])
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(random_ARR_2_new)
                    print('')
                    print('apporti di %s:' % S[3])
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(random_ARR_3_new)
                    print('')
                    print('apporti di %s:' % S[4])
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(random_ARR_4_new)
                    print('')
               
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')                                    
                    print('%f kg %s' % (Q, M))
                    print('%f kg %s' % (QFP, FE))
                                        
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))
                    print('%f kg %s' % (quantità_alimento_4[0], S[3]))
                    print('%f kg %s' % (quantità_alimento_5[0], S[4]))
            


############################################################################################################################


# CASO 3)
# INSILATO MAIS e MAIS GRANELLA inseriti manualmente
            
                elif Q and QM and not QFP:

                                        
                
                    quantità_TOTALE_TAL_QUALE = Q + QM + quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0] + quantità_alimento_4[0] + quantità_alimento_5[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_CER_man[0] + app_FOR_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0] + random_ARR_3_new[0] + random_ARR_4_new[0] 
                    APPORTO_PROTEINA_GREZZA = app_CER_man[1] + app_FOR_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1] + random_ARR_3_new[1] + random_ARR_4_new[1]
                    APPORTO_PROTEINA_DEGRADABILE = app_CER_man[2] + app_FOR_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2] + random_ARR_3_new[2] + random_ARR_4_new[2]
                    APPORTO_PROTEINA_INDEGRADABILE = app_CER_man[3] + app_FOR_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3] + random_ARR_3_new[3] + random_ARR_4_new[3]
                    APPORTO_FIBRA_GREZZA = app_CER_man[4] + app_FOR_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4] + random_ARR_3_new[4] + random_ARR_4_new[4]
                    APPORTO_NDF = app_CER_man[5] + app_FOR_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5] + random_ARR_3_new[5] + random_ARR_4_new[5]
                    APPORTO_ADF = app_CER_man[6] + app_FOR_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6] + random_ARR_3_new[6] + random_ARR_4_new[6]
                    APPORTO_GRASSO = app_CER_man[7] + app_FOR_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7] + random_ARR_3_new[7] + random_ARR_4_new[7]
                    APPORTO_AMIDO = app_CER_man[8] + app_FOR_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8] + random_ARR_3_new[8] + random_ARR_4_new[8]
                    APPORTO_ZUCCHERI = app_CER_man[9] + app_FOR_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9] + random_ARR_3_new[9] + random_ARR_4_new[9]
                    APPORTO_Ca = app_CER_man[10] + app_FOR_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10] + random_ARR_3_new[10] + random_ARR_4_new[10]
                    APPORTO_P = app_CER_man[11] + app_FOR_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11] + random_ARR_3_new[11] + random_ARR_4_new[11]
                    APPORTO_UFL = app_CER_man[12] + app_FOR_man[12] + random_ARR_0_new[12] + random_ARR_1_new[12] + random_ARR_2_new[12] + random_ARR_3_new[12] + random_ARR_4_new[12]



                    print('')
                    print('apporti di %s:' % M)
                    print('')
                    print(app_FOR_man)
                    print('')
                    print('apporti di %s:' % MG)
                    print('')
                    print(app_CER_man)
                    print('')        
                
                                              
                    print('apporti di %s:' % S[0])
                    print('')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print(random_ARR_2_new)
                    print('')
                    print('apporti di %s:' % S[3])
                    print('')
                    print(random_ARR_3_new)
                    print('')
                    print('apporti di %s:' % S[4])
                    print('')
                    print(random_ARR_4_new)
                    print('')
               
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')
                    print('%f kg %s' % (QM, MG))                                         
                    print('%f kg %s' % (Q, M))
                                        
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))
                    print('%f kg %s' % (quantità_alimento_4[0], S[3]))
                    print('%f kg %s' % (quantità_alimento_5[0], S[4]))
            


############################################################################################################################


# CASO 4)
# SOLO FORAGGIO:
                
                elif Q and not QM and not QFP: 



                    quantità_TOTALE_TAL_QUALE = Q + quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0] + quantità_alimento_4[0] + quantità_alimento_5[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_FOR_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0] + random_ARR_3_new[0] + random_ARR_4_new[0] 
                    APPORTO_PROTEINA_GREZZA = app_FOR_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1] + random_ARR_3_new[1] + random_ARR_4_new[1]
                    APPORTO_PROTEINA_DEGRADABILE = app_FOR_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2] + random_ARR_3_new[2] + random_ARR_4_new[2]
                    APPORTO_PROTEINA_INDEGRADABILE = app_FOR_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3] + random_ARR_3_new[3] + random_ARR_4_new[3]
                    APPORTO_FIBRA_GREZZA = app_FOR_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4] + random_ARR_3_new[4] + random_ARR_4_new[4]
                    APPORTO_NDF = app_FOR_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5] + random_ARR_3_new[5] + random_ARR_4_new[5]
                    APPORTO_ADF = app_FOR_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6] + random_ARR_3_new[6] + random_ARR_4_new[6]
                    APPORTO_GRASSO = app_FOR_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7] + random_ARR_3_new[7] + random_ARR_4_new[7]
                    APPORTO_AMIDO = app_FOR_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8] + random_ARR_3_new[8] + random_ARR_4_new[8]
                    APPORTO_ZUCCHERI = app_FOR_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9] + random_ARR_3_new[9] + random_ARR_4_new[9]
                    APPORTO_Ca = app_FOR_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10] + random_ARR_3_new[10] + random_ARR_4_new[10]
                    APPORTO_P = app_FOR_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11] + random_ARR_3_new[11] + random_ARR_4_new[11]
                    APPORTO_UFL = app_FOR_man[12] + random_ARR_0_new[12] + random_ARR_1_new[12] + random_ARR_2_new[12] + random_ARR_3_new[12] + random_ARR_4_new[12]



                    print('')
                    print('apporti di %s:' % M)
                    print('')
                    print(app_FOR_man)
                    print('')  
                                    
                    print('apporti di %s:' % S[0])
                    print('')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print(random_ARR_2_new)
                    print('')
                    print('apporti di %s:' % S[3])
                    print('')
                    print(random_ARR_3_new)
                    print('')
                    print('apporti di %s:' % S[4])
                    print('')
                    print(random_ARR_4_new)
                    print('')


                                                
                    print('La razione fornisce %f kg di %s' % (Q, M))

                    print('')
                    print("Prezzo dell'alimento <%s> => %f EURO/ton" % (M, prezzo_FORAGGIO_quantità))
                  
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')                   
                    print('%f kg %s' % (Q, M))
                                        
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))
                    print('%f kg %s' % (quantità_alimento_4[0], S[3]))
                    print('%f kg %s' % (quantità_alimento_5[0], S[4]))
            



############################################################################################################################


# CASO 5)
# SOLO CEREALE:

                elif QM and not Q and not QFP: 



                    quantità_TOTALE_TAL_QUALE = QM + quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0] + quantità_alimento_4[0] + quantità_alimento_5[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_CER_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0] + random_ARR_3_new[0] + random_ARR_4_new[0] 
                    APPORTO_PROTEINA_GREZZA = app_CER_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1] + random_ARR_3_new[1] + random_ARR_4_new[1]
                    APPORTO_PROTEINA_DEGRADABILE = app_CER_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2] + random_ARR_3_new[2] + random_ARR_4_new[2]
                    APPORTO_PROTEINA_INDEGRADABILE = app_CER_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3] + random_ARR_3_new[3] + random_ARR_4_new[3]
                    APPORTO_FIBRA_GREZZA = app_CER_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4] + random_ARR_3_new[4] + random_ARR_4_new[4]
                    APPORTO_NDF = app_CER_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5] + random_ARR_3_new[5] + random_ARR_4_new[5]
                    APPORTO_ADF = app_CER_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6] + random_ARR_3_new[6] + random_ARR_4_new[6]
                    APPORTO_GRASSO = app_CER_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7] + random_ARR_3_new[7] + random_ARR_4_new[7]
                    APPORTO_AMIDO = app_CER_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8] + random_ARR_3_new[8] + random_ARR_4_new[8]
                    APPORTO_ZUCCHERI = app_CER_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9] + random_ARR_3_new[9] + random_ARR_4_new[9]
                    APPORTO_Ca = app_CER_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10] + random_ARR_3_new[10] + random_ARR_4_new[10]
                    APPORTO_P = app_CER_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11] + random_ARR_3_new[11] + random_ARR_4_new[11]
                    APPORTO_UFL = app_CER_man[12] + random_ARR_0_new[12] + random_ARR_1_new[12] + random_ARR_2_new[12] + random_ARR_3_new[12] + random_ARR_4_new[12]



                    print('')
                    print('apporti di %s:' % MG)
                    print('')
                    print(app_CER_man)
                    print('')  
                                
                    print('apporti di %s:' % S[0])
                    print('')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print(random_ARR_2_new)
                    print('')
                    print('apporti di %s:' % S[3])
                    print('')
                    print(random_ARR_3_new)
                    print('')
                    print('apporti di %s:' % S[4])
                    print('')
                    print(random_ARR_4_new)
                    print('')

                
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')
                    print('%f kg %s' % (QM, MG))                                         
                                        
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))
                    print('%f kg %s' % (quantità_alimento_4[0], S[3]))
                    print('%f kg %s' % (quantità_alimento_5[0], S[4]))
            



############################################################################################################################

# CASO 6)
# NESSUN ALIMENTO INSERITO MANUALMENTE

                else:


                    quantità_TOTALE_TAL_QUALE = quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0] + quantità_alimento_4[0] + quantità_alimento_5[0] 
                    APPORTO_PROTEINA_GREZZA = random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1] + random_ARR_3_new[1] + random_ARR_4_new[1]
                    APPORTO_PROTEINA_DEGRADABILE = random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2] + random_ARR_3_new[2] + random_ARR_4_new[2]
                    APPORTO_PROTEINA_INDEGRADABILE = random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3] + random_ARR_3_new[3] + random_ARR_4_new[3]
                    APPORTO_FIBRA_GREZZA = random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4] + random_ARR_3_new[4] + random_ARR_4_new[4]
                    APPORTO_NDF = random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5] + random_ARR_3_new[5] + random_ARR_4_new[5]
                    APPORTO_ADF = random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6] + random_ARR_3_new[6] + random_ARR_4_new[6]
                    APPORTO_GRASSO = random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7] + random_ARR_3_new[7] + random_ARR_4_new[7]
                    APPORTO_AMIDO = random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8] + random_ARR_3_new[8] + random_ARR_4_new[8]
                    APPORTO_ZUCCHERI = random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9] + random_ARR_3_new[9] + random_ARR_4_new[9]
                    APPORTO_Ca = random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10] + random_ARR_3_new[10] + random_ARR_4_new[10]
                    APPORTO_P = random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11] + random_ARR_3_new[11] + random_ARR_4_new[11]
                    APPORTO_UFL = random_ARR_0_new[12] + random_ARR_1_new[12] + random_ARR_2_new[12] + random_ARR_3_new[12] + random_ARR_4_new[12]


                    print('apporti di %s:' % S[0])
                    print('')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print(random_ARR_2_new)
                    print('')
                    print('apporti di %s:' % S[3])
                    print('')
                    print(random_ARR_3_new)
                    print('')
                    print('apporti di %s:' % S[4])
                    print('')
                    print(random_ARR_4_new)
                    print('')


                
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')
                                        
                                        
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))
                    print('%f kg %s' % (quantità_alimento_4[0], S[3]))
                    print('%f kg %s' % (quantità_alimento_5[0], S[4]))
            


          
############################################################################################################################

#           if metodo == '_CNCPS_':
                    
                A = []
                A.append(APPORTO_DEFINITIVO_SOSTANZA_SECCA)
                A.append(APPORTO_PROTEINA_GREZZA)
                A.append(APPORTO_PROTEINA_DEGRADABILE)
                A.append(APPORTO_PROTEINA_INDEGRADABILE)
                A.append(APPORTO_FIBRA_GREZZA)
                A.append(APPORTO_NDF)
                A.append(APPORTO_ADF)
                A.append(APPORTO_GRASSO)
                A.append(APPORTO_AMIDO)
                A.append(APPORTO_ZUCCHERI)
                A.append(APPORTO_Ca)
                A.append(APPORTO_P)
                A.append(APPORTO_UFL)
        
                with open('%s.txt' % nome_file_apporti, 'w') as external_file:
                    print(A, file=external_file)
                external_file.close()
        
                DELTA_SOSTANZA_SECCA = APPORTO_DEFINITIVO_SOSTANZA_SECCA - F[0]
                DELTA_PROTEINA_GREZZA = APPORTO_PROTEINA_GREZZA - F[1]
                DELTA_PROTEINA_DEGRADABILE = APPORTO_PROTEINA_DEGRADABILE - F[2]
                DELTA_PROTEINA_INDEGRADABILE = APPORTO_PROTEINA_INDEGRADABILE - F[3]
                DELTA_FIBRA_GREZZA = APPORTO_FIBRA_GREZZA - F[4]
                DELTA_NDF = APPORTO_NDF - F[5]
                DELTA_ADF = APPORTO_ADF - F[6]
                DELTA_GRASSO = APPORTO_GRASSO - F[7]
                DELTA_AMIDO = APPORTO_AMIDO - F[8]
                DELTA_ZUCCHERI = APPORTO_ZUCCHERI - F[9]
                DELTA_Ca = APPORTO_Ca - F[10]
                DELTA_P = APPORTO_P - F[11]
                DELTA_UFL = APPORTO_UFL - F[12]
        
                              
                print('')
                print('')
                if i == N_repl-1:
                    print('Il calcolo della razione non ha avuto SUCCESSO; per favore cancella gli alimenti inseriti e riprova.')
                elif i < N_repl-1:
                    print('Il CALCOLO DELLA RAZIONE è stato effettuato con SUCCESSO alla %d^ replica!' % i)        
                print('')
        


                        
                print("Il FABBISOGNO DI SOSTANZA SECCA (che dev'essere soddisfatto dagli alimenti aggiunti) delle bovine del gruppo <%s> è di %f kg" %  (gruppo, F_arr[0]))
                print('')
                print("L'APPORTO DI SOSTANZA SECCA degli alimenti selezionati è di %f kg" % APPORTO_SOSTANZA_SECCA)
                print('')
                

                print('')        
                print('LEGENDA')
                print('')
                print("DM => Dry Matter (Apporto di Sostanza Secca)")
                print("CP => Crude Protein (Apporto di PROTEINA GREZZA)")
                print("RDP => Rumen Degradable Protein (Apporto di PROTEINA DEGRADABILE)")
                print("RUP => Rumen Undegradable Protein (Apporto di PROTEINA INDEGRADABILE)")
                print("FG => FIBRA GREZZA (apporto di FIBRA GREZZA)")
                print("NDF => NDF (apporto di Fibra resistente al Detergente Neutro)")
                print("ADF => ADF (apporto di Fibra resistente al Detergente Acido)")
                print("FAT => Fat (apporto di GRASSO)")
                print("AM => AMIDO (apporto di AMIDO)")
                print("ZUC => ZUCCHERI (apporto di ZUCCHERI)")
                print("Ca => Calcio (apporto di Calcio)")
                print("P => Fosforo (apporto di Fosforo)")
                print("UFL => Unità Foraggere Latte (apporto di Energia Netta)")
                print('')
                print('')
                print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')


                if len(PREZZI) == len(S):

                    print('')
                    for i in list(range(len(PREZZI))):
                        print("Prezzo dell'alimento <%s> => %f EURO/ton" % (S[i], PREZZI[i]))
                    print('')
                    print('********************************************************************')
                    print('')
                else:
                    print('Impossibile creare la TABELLA DEI PREZZI: ci sono uno o più alimenti non quotati!')


            
                if len(PREZZI) == len(S):

            
                    costo_alimento_1 = quantità_alimento_1[0] * PREZZI[0] / 1000
                    costo_alimento_2 = quantità_alimento_2[0] * PREZZI[1] / 1000
                    costo_alimento_3 = quantità_alimento_3[0] * PREZZI[2] / 1000
                    costo_alimento_4 = quantità_alimento_4[0] * PREZZI[3] / 1000
                    costo_alimento_5 = quantità_alimento_5[0] * PREZZI[4] / 1000
            
                    COSTO_RAZIONE = []            
                    COSTO_RAZIONE.append(costo_alimento_1)
                    COSTO_RAZIONE.append(costo_alimento_2)
                    COSTO_RAZIONE.append(costo_alimento_3)
                    COSTO_RAZIONE.append(costo_alimento_4)
                    COSTO_RAZIONE.append(costo_alimento_5)

            
                    if Q and not QM and not QFP:
                            
                        if type(costo_FORAGGIO_quantità) is float: 
                            COSTO_RAZIONE.append(costo_FORAGGIO_quantità)
                            print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[3], costo_alimento_4))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[4], costo_alimento_5))
                            print("Costo dell'alimento <%s>: %f EURO" % (M, costo_FORAGGIO_quantità))

                        else:
                            print("Il prezzo dell'alimento <%s> non è disponibile!" % M) 

                
                    elif QM and not Q and not QFP:                
                
                        if type(costo_CEREALE_quantità) is float:
                            COSTO_RAZIONE.append(costo_CEREALE_quantità)  
                            print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[3], costo_alimento_4))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[4], costo_alimento_5))
                            print("Costo dell'alimento <%s>: %f EURO" % (MG, costo_CEREALE_quantità))

                        else:
                            print("Il prezzo dell'alimento <%s> non è disponibile!" % MG) 

            
                    elif QFP and not Q and not QM:
                
                        if type(costo_FONTE_PROTEICA_quantità) is float:
                            COSTO_RAZIONE.append(costo_FONTE_PROTEICA_quantità)
                            print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[3], costo_alimento_4))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[4], costo_alimento_5))
                            print("Costo dell'alimento <%s>: %f EURO" % (FE, costo_FONTE_PROTEICA_quantità))
                        else:
                            print("Il prezzo dell'alimento <%s> non è disponibile!" % FE)

            
                    elif Q and QM and not QFP:
                
                        if type(costo_FORAGGIO_quantità) is float and type(costo_CEREALE_quantità) is float: 
                            COSTO_RAZIONE.append(costo_FORAGGIO_quantità)
                            COSTO_RAZIONE.append(costo_CEREALE_quantità)  
                            print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[3], costo_alimento_4))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[4], costo_alimento_5))                     
                            print("Costo dell'alimento <%s>: %f EURO" % (M, costo_FORAGGIO_quantità))
                            print("Costo dell'alimento <%s>: %f EURO" % (MG, costo_CEREALE_quantità))                        
                    
                        else:
                            print("Il prezzo dell'alimento <%s> e/o dell'alimento <%s> non è disponibile!" % (M, MG))

            
                    elif Q and QFP:
                    
                        if type(costo_FORAGGIO_quantità) is float and type(costo_FONTE_PROTEICA_quantità) is float:  
                            COSTO_RAZIONE.append(costo_FORAGGIO_quantità)
                            COSTO_RAZIONE.append(costo_FONTE_PROTEICA_quantità)
                            print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[3], costo_alimento_4))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[4], costo_alimento_5))                     
                            print("Costo dell'alimento <%s>: %f EURO" % (M, costo_FORAGGIO_quantità))
                            print("Costo dell'alimento <%s>: %f EURO" % (FE, costo_FONTE_PROTEICA_quantità))

                        else:
                            print("Il prezzo dell'alimento <%s> e/o dell'alimento <%s> non è disponibile!" % (M, FE))

                
                    elif QM and QFP and not Q:
                
                        if type(costo_CEREALE_quantità) is float and type(costo_FONTE_PROTEICA_quantità) is float:
                            COSTO_RAZIONE.append(costo_CEREALE_quantità) 
                            COSTO_RAZIONE.append(costo_FONTE_PROTEICA_quantità)
                            print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[3], costo_alimento_4))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[4], costo_alimento_5))                     
                            print("Costo dell'alimento <%s>: %f EURO" % (MG, costo_CEREALE_quantità))
                            print("Costo dell'alimento <%s>: %f EURO" % (FE, costo_FONTE_PROTEICA_quantità)) 
                        else:
                            print("Il prezzo dell'alimento <%s> e/o dell'alimento <%s> non è disponibile!" % (MG, FE))
                                           
                   
                    elif Q and QM and QFP:
                        if type(costo_FORAGGIO_quantità) is float and type(costo_CEREALE_quantità) is float and type(costo_FONTE_PROTEICA_quantità) is float:
                            COSTO_RAZIONE.append(costo_FORAGGIO_quantità)
                            COSTO_RAZIONE.append(costo_CEREALE_quantità)                                   
                            COSTO_RAZIONE.append(costo_FONTE_PROTEICA_quantità)

                            print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[3], costo_alimento_4))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[4], costo_alimento_5))
                            print("Costo dell'alimento <%s>: %f EURO" % (M, costo_FORAGGIO_quantità))                     
                            print("Costo dell'alimento <%s>: %f EURO" % (MG, costo_CEREALE_quantità))
                            print("Costo dell'alimento <%s>: %f EURO" % (FE, costo_FONTE_PROTEICA_quantità)) 
                        else:
                            print("Il prezzo dell'alimento <%s> e/o dell'alimento <%s> e/o dell'alimento <%s> non è disponibile!" % (M, MG, FE))
                                           
                    COSTO_TOTALE = sum(COSTO_RAZIONE)
                    print('')
                    print('Il costo della razione è %f EURO' % COSTO_TOTALE)
                    if COSTO_TOTALE > PREZZO_MAX:
                        print('Il COSTO TOTALE della razione è > del PREZZO MASSIMO che hai impostato!')
                        print('Prova a scegliere altri alimenti e ricalcola la RAZIONE')
            
            
                else:
                    print('Non posso calcolare il COSTO DELLA RAZIONE: ci sono uno o più alimenti non quotati!') 
            
            
                print('')                
                print('La razione fornisce %f kg di alimento tal quale' % quantità_TOTALE_TAL_QUALE)
                print('La razione fornisce %f kg di Sostanza Secca' % APPORTO_DEFINITIVO_SOSTANZA_SECCA)
                print('')
                print('')
                print('_______________________________________________________________________________________________')
                print('|                         |                    |                         |                    |')
                print('|                         |                    |                         |                    |')
                print('|   PRINCIPIO NUTRITIVO   |      APPORTO       |       Fabbisogno        |     DIFFERENZA     |')
                print('|                         |                    |                         |                    |')
                print('|_________________________|____________________|_________________________|____________________|')
                print('|      Sostanza Secca     |     %f kg   |  %f kg           |  %f kg       |' % (APPORTO_DEFINITIVO_SOSTANZA_SECCA, F[0], DELTA_SOSTANZA_SECCA))
                print('|      PROTEINA GREZZA    |   %f g    |%f g            |%f g        |' % (APPORTO_PROTEINA_GREZZA, F[1], DELTA_PROTEINA_GREZZA))
                print('|   PROTEINA DEGRADABILE  |   %f g    |%f g            |%f g        |' % (APPORTO_PROTEINA_DEGRADABILE, F[2], DELTA_PROTEINA_DEGRADABILE))
                print('| PROTEINA INDEGRADABILE  |   %f g    |%f g            |%f g        |' % (APPORTO_PROTEINA_INDEGRADABILE, F[3], DELTA_PROTEINA_INDEGRADABILE))
                print('|      FIBRA GREZZA       |   %f g    |%f g            |%f g        |' % (APPORTO_FIBRA_GREZZA, F[4], DELTA_FIBRA_GREZZA))
                print('|           NDF           |   %f g    |%f g            |%f g        |' % (APPORTO_NDF, F[5], DELTA_NDF))
                print('|           ADF           |   %f g    |%f g            |%f g        |' % (APPORTO_ADF, F[6], DELTA_ADF))
                print('|         GRASSO          |   %f g    |%f g            |%f g        |' % (APPORTO_GRASSO, F[7], DELTA_GRASSO)) 
                print('|          AMIDO          |   %f g    |%f g            |%f g        |' % (APPORTO_AMIDO, F[8], DELTA_AMIDO))
                print('|        ZUCCHERI         |    %f g    |%f g            |%f g       |' % (APPORTO_ZUCCHERI, F[9], DELTA_ZUCCHERI))
                print('|           Ca            |   %f g      |  %f g           |  %f g     |' % (APPORTO_Ca, F[10], DELTA_Ca))        
                print('|            P            |   %f g      |  %f g            |  %f g      |' % (APPORTO_P, F[11], DELTA_P))        
                print('|           UFL           |     %f      | %f               | %f           |' % (APPORTO_UFL, F[12], DELTA_UFL))        
                print('_______________________________________________________________________________________________')
                print('')
                print('                                               *     *     *                                   ')
                print('')
                print('')
                print('')
                print('******************************************** SOSTANZA SECCA ********************************************')
                print('')
                print('La razione fornisce %f kg di alimento tal quale' % quantità_TOTALE_TAL_QUALE)
                print('')
                print('La razione fornisce %f kg di Sostanza Secca' % APPORTO_DEFINITIVO_SOSTANZA_SECCA)                
                print('')
                DMI_AS_FED_ratio = (APPORTO_DEFINITIVO_SOSTANZA_SECCA/quantità_TOTALE_TAL_QUALE)*100
                print('La tua RAZIONE contiene il %fx100 di SOSTANZA SECCA' % DMI_AS_FED_ratio)
                print('')
                if DMI_AS_FED_ratio < 0.6:
                    print('')
                    print('In estate, in caso di COMPETIZIONE ALIMENTARE x un N° INSUFFICIENTE DI AUTOCATTURANTI (= BOVINE IN PIEDI),')
                    print('se prepari un CARRO MISCELATORE con, per es., un 10x100 in più di razioni (per es., con 100')
                    print('BOVINE IN LATTAZIONE metto nel carro 110 RAZIONI), dal momento che la miscelata rimarrà per più tempo in')
                    print('mangiatoia, potrebbe scaldarsi!')
                    print("Prova a RIDURRE UN PO' L'APPORTO COMPLESSIVO DI FORAGGIO, insilato, per aumentare la SS della razione,")
                    print("o fieno (dipende da che tipo di FORAGGIo hai inserito manualmente), per forzare il programma ad")
                    print("AUMENTARE L'APPORTO DELLA FONTE DI FIBRA DIGERIBILE")
                    print("In questo modo, si dovrebbe attenuare la riduzione dell'ingestione volontaria di fibra scarsamente")
                    print("digeribile (poiché più o meno lignificata), nonché il conseguente CALO DEL TENORE IN GRASSO del latte")
                    print("Tieni anche conto del fatto che, riducendo l'apporto della cosiddetta <FIBRA FISICAMENTE EFFICACE>")
                    print("(quella dei FORAGGI, che fa ruminare), LE BOVINE PRODURRANNO MENO SALIVA (che è il tampone naturale")
                    print("del rumine) e, quindi, dovrai valutare l'inserimento di un TAMPONE ARTIFICIALE, come il bicarbonato")
                    print("di calcio o di sodio, nella razione")    
                print('')
                print('')
                print('******************************************** PROTEINA GREZZA ********************************************')
                print('')
                APPORTO_DEFINITIVO_SOSTANZA_SECCA_g = APPORTO_DEFINITIVO_SOSTANZA_SECCA * 1000
                CP_DMI_ratio = APPORTO_PROTEINA_GREZZA/APPORTO_DEFINITIVO_SOSTANZA_SECCA_g
                print('Rapporto (PROTEINA GREZZA : Sostanza Secca) => %f' % CP_DMI_ratio)
                print('')
                print("Secondo Dell'Orto e Savoini, ad inizio lattazione dovrebbe essere ~ 0.18 (18%)")
                print('')
                if CP_DMI_ratio <= 0.17:
                    print("L'apporto di PROTEINA GREZZA è insufficiente")
                    print("Se avevi scelto una fonte proteica diversa dalla <F.E. DI SOIA>, sostituiscila con quest'ultima!")
                    print("Se non basta, prova a sostituire il fieno di prato stabile o l'insilato di loietto con il <FIENO DI ERBA MEDICA e/o a ridurre l'apporto di insilato (o di pastone) di mais>")         
                print('')
                print('')
                print('********************************************** FIBRA GREZZA **********************************************')
                print('')                       
                FG_DMI_ratio = APPORTO_FIBRA_GREZZA/APPORTO_DEFINITIVO_SOSTANZA_SECCA_g
                print('')                     
                FG_DMI_ratio = APPORTO_FIBRA_GREZZA/APPORTO_DEFINITIVO_SOSTANZA_SECCA_g
                print('')
                print('Rapporto (FIBRA GREZZA : Sostanza Secca) => %f' % FG_DMI_ratio)
                print('')
                print('Dovrebbe essere ~ 0.17 (17%)')
                print('')
                # print('********************************************** NDF **********************************************')  
                APPORTO_NDF_FORAGGI = app_FOR_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3]
                NDF_FORAGGI_NDF_tot_ratio = APPORTO_NDF_FORAGGI/APPORTO_NDF
#           print('Rapporto (NDF da FORAGGI : NDF totale) => %f' % NDF_FORAGGI_NDF_tot_ratio)
#           print('')
#           print('Dovrebbe essere ~ 0.75 (75%)')
                print('')
                print('')           
                print('')
                print('***********************************************************************************************************')
                print('********************************************* FINE DEL REPORT *********************************************')
                print('***********************************************************************************************************')
                
                sys.stdout = original



############################################################################################################################
###################### 5 alimenti auto - metodo => <LYS_MET> INIZIO DEL REDIREZIONAMENTO DELLA STAMPA ######################
############################################################################################################################

                                                    ### 5 ALIMENTI AUTO ###


            elif metodo == 'LYS_MET':



                original = sys.stdout
                sys.stdout = open('%s.txt' % nome_file_razione, 'w')


                
                print('PARAMETRI inseriti da %s, %s %s alle ore %s' % (user, giorno_di_inserimento, data_di_inserimento, ora_di_inserimento))
                print('') 
                print('METODO DI CALCOLO della razione => <%s>' % metodo)
                print('PESO MEDIO ALLA NASCITA => %f kg' % calf_weight)
                print('PESO VIVO MEDIO BOVINE IN LATTAZIONE => %f kg' % LW)
                print('ETÀ MEDIA BOVINE IN LATTAZIONE => %d mesi' % cow_age)
                print('SETTIMANA DI LATTAZIONE media => %d^' % WOL)
                print('SETTIMANA DI GRAVIDANZA media => %d^' % WOP)
                print('LIVELLO PRODUTTIVO medio => %f kg di latte al giorno' % MY)
                print('TENORE DI GRASSO del latte => %fx100' % FAT_milk)
                print('TENORE DI PROTEINA del latte => %fx100' % CP_milk)
                print('TENORE DI LATTOSIO del latte => %fx100' % LAC_milk)
                print('N° DI REPLICHE => %d' % N_repl)
        

                F = []
                F.append(DMI)
                F.append(CP)
                F.append(FG)
                F.append(NDF)
                F.append(ADF)
                F.append(FAT)
                F.append(AM)
                F.append(ZUC)
                F.append(Ca_tot)
                F.append(P_tot)
                F.append(UFL_tot)
                F.append(PDI)


# STAMPA FABBISOGNI LYS_MET

                print('')
                print('')
                print('FABBISOGNI calcolati secondo il METODO <INRA %s>' % metodo)
                print('')
                print('CAPACITÀ DI INGESTIONE => %f kg di Sostanza Secca' % F[0])
                print('Fabbisogno di PROTEINA GREZZA => %f g' % F[1])
                print('Fabbisogno di FIBRA GREZZA => %f g' % F[2])
                print('Fabbisogno di NDF => %f g' % F[3])
                print('Fabbisogno di ADF => %f g' % F[4]) 
                print('Fabbisogno di GRASSO => %f g' % F[5])
                print('Fabbisogno di AMIDO => %f g' % F[6])
                print('Fabbisogno di ZUCCHERI => %f g' % F[7])
                print('Fabbisogno di CALCIO => %f g' % F[8])
                print('Fabbisogno di FOSFORO => %f g' % F[9])
                print('Fabbisogno di ENERGIA NETTA => %f Unità Foraggere Latte' % F[10])
                print('Fabbisogno di PROTEINA  DIGERIBILE INTESTINALE => %f g' % F[11])
                print('')
                


############################################################################################################################
################################### SINGOLI CASI MANTENUTI PER EVENTUALI SVILUPPI FUTURI ###################################
############################################################################################################################



############################################################################################################################            
# METODO <LYS_MET>
# 5 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 1)
# FORAGGIO + MAIS GRANELLA + FONTE PROTEICA inseriti manualmente
# 3 alimenti inseriti manualmente + 5 alimenti inseriti in automatico => TOT 8

                if Q and QM and QFP:
                                           
                    F_arr = F_arr_ricalcolato_QM_FE
                
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI>, <CEREALI> e <FONTI PROTEICHE>')
                    print('')
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DM in kg, ENERGIA NETTA in UFL, tutti gli altri PARAMETRI (CP, FG, NDF, ADF, FAT, AM, ZUC, Ca, P e PDI) in grammi') 
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                              
                    print(F_arr)



############################################################################################################################            
# METODO <LYS_MET>
# 5 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 2)
# FORAGGIO + FONTE PROTEICA inseriti manualmente
# 2 alimenti inseriti manualmente + 5 alimenti inseriti in automatico => TOT 7

                elif Q and QFP:

                    
                    F_arr = F_arr_ricalcolato_FE
                    
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI> e <FONTI PROTEICHE>')      
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(F_arr)
                        
                

############################################################################################################################            
# METODO <LYS_MET>
# 5 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 3)
# FORAGGIO + CEREALE inseriti manualmente
# 2 alimenti inseriti manualmente + 5 alimenti inseriti in automatico => TOT 7

                elif Q and QM and not QFP:

                    F_arr = F_arr_ricalcolato
        
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI> e <CEREALI>')
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')                    
                    print(F_arr)
                                     
            

############################################################################################################################            
# METODO <LYS_MET>
# 5 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 4)
# FORAGGIO inserito manualmente
# 1 alimento inserito manualmente + 5 alimenti inseriti in automatico => TOT 6

                elif Q and not QM and not QFP:
        

                    F_arr = F_arr_FORAGGIo
        
                    print('Hai inserito manualmente solo un alimento della categoria <FORAGGI>')
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(F_arr)



############################################################################################################################            
# METODO <LYS_MET>
# 5 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 5)
# CEREALE inserito manualmente
# 1 alimento inserito manualmente + 5 alimenti inseriti in automatico => TOT 6

                elif QM and not Q and not QFP:                                
            
                    F_arr = F_arr_cereale
                     
                    print('Hai inserito manualmente solo un alimento della categoria <CEREALI>')
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(F_arr)



############################################################################################################################            
# METODO <LYS_MET>
# 5 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 6)
# FONTE PROTEICA inserita manualmente
# 1 alimento inserito manualmente + 5 alimenti inseriti in automatico => TOT 6

                elif QFP and not Q and not QM:
                        
            
                    F_arr = F_arr_FE
                     
                    print('Hai inserito manualmente solo un alimento della categoria <FONTI PROTEICHE>')
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(F_arr)


############################################################################################################################            
# METODO <LYS_MET>
# 5 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 7)
# NESSUN ALIMENTO inserito manualmente
# 0 alimenti inseriti manualmente + 5 alimenti inseriti in automatico => TOT 5

                else:

                    F_arr = F_arr
        
                    print('Nessun alimento inserito manualmente')


                print('')
                print("L'apporto di Sostanza Secca degli alimenti selezionati è %f" % APPORTO_SOSTANZA_SECCA)
                print('')
                


############################################################################################################################            
# METODO <LYS_MET>
# 5 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 1)
# FORAGGIO + MAIS GRANELLA + FONTE PROTEICA inseriti manualmente
# 3 alimenti inseriti manualmente + 5 alimenti inseriti in automatico => TOT 8


                if Q and QM and QFP:
                
                
                
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI>, <CEREALI> e <FONTI PROTEICHE>')
                

                    quantità_TOTALE_TAL_QUALE = Q + QM + QFP + quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0] + quantità_alimento_4[0] + quantità_alimento_5[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_FP_man[0] + app_FOR_man[0] + app_CER_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0] + random_ARR_3_new[0] + random_ARR_4_new[0] 
                    APPORTO_PROTEINA_GREZZA = app_FP_man[1] + app_FOR_man[1] + app_CER_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1] + random_ARR_3_new[1] + random_ARR_4_new[1]
                    APPORTO_FIBRA_GREZZA = app_FP_man[2] + app_FOR_man[2] + app_CER_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2] + random_ARR_3_new[2] + random_ARR_4_new[2]
                    APPORTO_NDF = app_FP_man[3] + app_FOR_man[3] + app_CER_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3] + random_ARR_3_new[3] + random_ARR_4_new[3]
                    APPORTO_ADF = app_FP_man[4] + app_FOR_man[4] + app_CER_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4] + random_ARR_3_new[4] + random_ARR_4_new[4]
                    APPORTO_GRASSO = app_FP_man[5] + app_FOR_man[5] + app_CER_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5] + random_ARR_3_new[5] + random_ARR_4_new[5]
                    APPORTO_AMIDO = app_FP_man[6] + app_FOR_man[6] + app_CER_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6] + random_ARR_3_new[6] + random_ARR_4_new[6]
                    APPORTO_ZUCCHERI = app_FP_man[7] + app_FOR_man[7] + app_CER_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7] + random_ARR_3_new[7] + random_ARR_4_new[7]
                    APPORTO_Ca = app_FP_man[8] + app_FOR_man[8] + app_CER_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8] + random_ARR_3_new[8] + random_ARR_4_new[8]
                    APPORTO_P = app_FP_man[9] + app_FOR_man[9] + app_CER_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9] + random_ARR_3_new[9] + random_ARR_4_new[9]
                    APPORTO_UFL = app_FP_man[10] + app_FOR_man[10] + app_CER_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10] + random_ARR_3_new[10] + random_ARR_4_new[10]
                    APPORTO_PDI = app_FP_man[11] + app_FOR_man[11] + app_CER_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11] + random_ARR_3_new[11] + random_ARR_4_new[11]
                


                    
                    print('')
                    print('apporti di %s:' % M)
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(app_FOR_man)
                    print('')

                    print('')
                    print('apporti di %s:' % MG)
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(app_CER_man)
                    print('')
                    
                    print('apporti di %s:' % FE)
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(app_FP_man)
                    print('')

                    print('apporti di %s:' % S[0])
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(random_ARR_2_new)
                    print('')
                    print('apporti di %s:' % S[3])
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(random_ARR_3_new)
                    print('')
                    print('apporti di %s:' % S[4])
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(random_ARR_4_new)
                    print('')                                                
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')
                                                                     
                    print('%f kg %s' % (Q, M))
                    print('%f kg %s' % (QM, MG))
                    print('%f kg %s' % (QFP, FE))
                                                
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))
                    print('%f kg %s' % (quantità_alimento_4[0], S[3]))
                    print('%f kg %s' % (quantità_alimento_5[0], S[4]))

                                
                    app_PDIE_man = Q_PDIE + QM_PDIE + QFP_PDIE
                    app_PDIN_man = Q_PDIN + QM_PDIN + QFP_PDIN
                    app_LysDI_man = Q_LysDI + QM_LysDI + QFP_LysDI
                    app_MetDI_man = Q_MetDI + QM_MetDI + QFP_MetDI



                    quantità.append(Q)
                    quantità.append(QM)
                    quantità.append(QFP)
                    quantità.append(quantità_alimento_1[0])
                    quantità.append(quantità_alimento_2[0])
                    quantità.append(quantità_alimento_3[0])
                    quantità.append(quantità_alimento_4[0])
                    quantità.append(quantità_alimento_5[0]) 
                    
                    quantità = np.array(quantità)
                    print(quantità)
                    
                    LISINA_TOT = np.sum(LISINA*quantità)
                    METIONINA_TOT = np.sum(METIONINA*quantità)
                    PDIE_TOT = np.sum(PDIE*quantità)
                    PDIN_TOT = np.sum(PDIN*quantità)
                    
                    LYS_MET_ratio = LISINA_TOT/METIONINA_TOT
                    LysDI_ratio = LISINA_TOT/PDIN_TOT
                    MetDI_ratio = METIONINA_TOT/PDIN_TOT
                    
                    
                    print('')
                    print('Apporto TOTALE PDIE => %f g' % PDIE_TOT)
                    print('')
                    print('Apporto TOTALE PDIN => %f g' % PDIN_TOT)
                    print('')
                    print('Rapporto LISINA / METIONINA => %f' % LYS_MET_ratio)
                    print('')
                    print('Rapporto LISINA / PROTEINA DIGERIBILE => %f' % LysDI_ratio)
                    print('')
                    print('Rapporto METIONINA / PROTEINA DIGERIBILE => %f' % MetDI_ratio)
                    print('')

                    

############################################################################################################################            
# METODO <LYS_MET>
# 5 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 2)
# FORAGGIO + FONTE PROTEICA inseriti manualmente
# 2 alimenti inseriti manualmente + 5 alimenti inseriti in automatico => TOT 7
  
                elif Q and QFP:
                
                
                
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI> e <FONTI PROTEICHE>')


                    quantità_TOTALE_TAL_QUALE = Q + QFP + quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0] + quantità_alimento_4[0] + quantità_alimento_5[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_FP_man[0] + app_FOR_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0] + random_ARR_3_new[0] + random_ARR_4_new[0] 
                    APPORTO_PROTEINA_GREZZA = app_FP_man[1] + app_FOR_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1] + random_ARR_3_new[1] + random_ARR_4_new[1]
                    APPORTO_FIBRA_GREZZA = app_FP_man[2] + app_FOR_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2] + random_ARR_3_new[2] + random_ARR_4_new[2]
                    APPORTO_NDF = app_FP_man[3] + app_FOR_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3] + random_ARR_3_new[3] + random_ARR_4_new[3]
                    APPORTO_ADF = app_FP_man[4] + app_FOR_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4] + random_ARR_3_new[4] + random_ARR_4_new[4]
                    APPORTO_GRASSO = app_FP_man[5] + app_FOR_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5] + random_ARR_3_new[5] + random_ARR_4_new[5]
                    APPORTO_AMIDO = app_FP_man[6] + app_FOR_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6] + random_ARR_3_new[6] + random_ARR_4_new[6]
                    APPORTO_ZUCCHERI = app_FP_man[7] + app_FOR_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7] + random_ARR_3_new[7] + random_ARR_4_new[7]
                    APPORTO_Ca = app_FP_man[8] + app_FOR_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8] + random_ARR_3_new[8] + random_ARR_4_new[8]
                    APPORTO_P = app_FP_man[9] + app_FOR_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9] + random_ARR_3_new[9] + random_ARR_4_new[9]
                    APPORTO_UFL = app_FP_man[10] + app_FOR_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10] + random_ARR_3_new[10] + random_ARR_4_new[10]
                    APPORTO_PDI = app_FP_man[11] + app_FOR_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11] + random_ARR_3_new[11] + random_ARR_4_new[11]


                       
                    print('')
                    print('apporti di %s:' % M)
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(app_FOR_man)
                    print('')
                    
                    print('apporti di %s:' % FE)
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(app_FP_man)
                    print('')

                    print('apporti di %s:' % S[0])
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(random_ARR_2_new)
                    print('')
                    print('apporti di %s:' % S[3])
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(random_ARR_3_new)
                    print('')
                    print('apporti di %s:' % S[4])
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(random_ARR_4_new)
                    print('')
                
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')                                            
                    print('%f kg %s' % (Q, M))
                    print('%f kg %s' % (QFP, FE))
                                                
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))
                    print('%f kg %s' % (quantità_alimento_4[0], S[3]))
                    print('%f kg %s' % (quantità_alimento_5[0], S[4]))
            
                    
                    print('')
                    print('Rapporto (LISINA / PROTEINA DIGERIBILE) => %f' % LysDI_ratio)
                    print('')
                    print('Rapporto (METIONINA / PROTEINA DIGERIBILE) => %f' % MetDI_ratio)
                    print('')
                    print('Rapporto (LISINA / METIONINA) => %f' % Lys_Met_ratio)
                    print('')
                    if Lys_Met_ratio >= 3.0:
                        print('La razione è carente di METIONINA!')
                        print('')
                        print("Prova a sostituire l'alimento <%s> (CARENTE DI METIONINA) con <girasole farina estrazione>" % FE) 
                       
                    
                    BFR = (APPORTO_PDI - app_tot_PDIE)/APPORTO_UFL
                    print('')
                    print('La RAZIONE fornisce %f g di PDIN' % APPORTO_PDI)
                    print('')
                    print('La RAZIONE fornisce %f g di PDIE' % app_tot_PDIE)
                    print('')
                    print('Rmic = (PDIN – PDIE)/UFL')
                    print('')
                    print('Rmic = %f' % BFR)
                    print('')
                    if BFR >= -17:
                        
                        print('La RAZIONE è accettabile')
                    else:
                        print('La RAZIONE non è accettabile')
                        print('Prova ad aumentare la quantità di %s' % FE) 



############################################################################################################################            
# METODO <LYS_MET>
# 5 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 3)
# FORAGGIO + CEREALE inseriti manualmente
# 2 alimenti inseriti manualmente + 5 alimenti inseriti in automatico => TOT 7
            
                elif Q and QM and not QFP:
                
                
                
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI> e <CEREALI>')

                                        
                
                    quantità_TOTALE_TAL_QUALE = Q + QM + quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0] + quantità_alimento_4[0] + quantità_alimento_5[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_FOR_man[0] + app_CER_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0] + random_ARR_3_new[0] + random_ARR_4_new[0] 
                    APPORTO_PROTEINA_GREZZA = app_FOR_man[1] + app_CER_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1] + random_ARR_3_new[1] + random_ARR_4_new[1]
                    APPORTO_FIBRA_GREZZA = app_FOR_man[2] + app_CER_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2] + random_ARR_3_new[2] + random_ARR_4_new[2]
                    APPORTO_NDF = app_FOR_man[3] + app_CER_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3] + random_ARR_3_new[3] + random_ARR_4_new[3]
                    APPORTO_ADF = app_FOR_man[4] + app_CER_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4] + random_ARR_3_new[4] + random_ARR_4_new[4]
                    APPORTO_GRASSO = app_FOR_man[5] + app_CER_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5] + random_ARR_3_new[5] + random_ARR_4_new[5]
                    APPORTO_AMIDO = app_FOR_man[6] + app_CER_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6] + random_ARR_3_new[6] + random_ARR_4_new[6]
                    APPORTO_ZUCCHERI = app_FOR_man[7] + app_CER_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7] + random_ARR_3_new[7] + random_ARR_4_new[7]
                    APPORTO_Ca = app_FOR_man[8] + app_CER_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8] + random_ARR_3_new[8] + random_ARR_4_new[8]
                    APPORTO_P = app_FOR_man[9] + app_CER_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9] + random_ARR_3_new[9] + random_ARR_4_new[9]
                    APPORTO_UFL = app_FOR_man[10] + app_CER_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10] + random_ARR_3_new[10] + random_ARR_4_new[10]
                    APPORTO_PDI = app_FOR_man[11] + app_CER_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11] + random_ARR_3_new[11] + random_ARR_4_new[11]



                    print('')
                    print('apporti di %s:' % M)
                    print('')
                    print(app_FOR_man)
                    print('')
                    print('apporti di %s:' % MG)
                    print('')
                    print(app_CER_man)
                    print('')        
                    
                                                      
                    print('apporti di %s:' % S[0])
                    print('')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print(random_ARR_2_new)
                    print('')
                    print('apporti di %s:' % S[3])
                    print('')
                    print(random_ARR_3_new)
                    print('')
                    print('apporti di %s:' % S[4])
                    print('')
                    print(random_ARR_4_new)
                    print('')
                
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')
                    print('%f kg %s' % (QM, MG))                                                 
                    print('%f kg %s' % (Q, M))
                                                
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))
                    print('%f kg %s' % (quantità_alimento_4[0], S[3]))
                    print('%f kg %s' % (quantità_alimento_5[0], S[4]))
                        

                    
                    print('')
                    print('Rapporto (LISINA / PROTEINA DIGERIBILE) => %f' % LysDI_ratio)
                    print('')
                    print('Rapporto (METIONINA / PROTEINA DIGERIBILE) => %f' % MetDI_ratio)
                    print('')
                    print('Rapporto (LISINA / METIONINA) => %f' % Lys_Met_ratio)
                    print('')
                    if Lys_Met_ratio >= 3.0:
                        print('La razione è carente di METIONINA!')
                        print('')
                        print("Prova a sostituire l'alimento <%s> (CARENTE DI METIONINA) con <girasole farina estrazione>" % FE) 
                       
                    
                    BFR = (APPORTO_PDI - app_tot_PDIE)/APPORTO_UFL
                    print('')
                    print('La RAZIONE fornisce %f g di PDIN' % APPORTO_PDI)
                    print('')
                    print('La RAZIONE fornisce %f g di PDIE' % app_tot_PDIE)
                    print('')
                    print('Rmic = (PDIN – PDIE)/UFL')
                    print('')
                    print('Rmic = %f' % BFR)
                    print('')
                    if BFR >= -17:
                        
                        print('La RAZIONE è accettabile')
                    else:
                        print('La RAZIONE non è accettabile')
                        print('Prova ad aumentare la quantità di %s' % FE) 
                    


############################################################################################################################            
# METODO <LYS_MET>
# 5 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 4)
# FORAGGIO inserito manualmente
# 1 alimento inserito manualmente + 5 alimenti inseriti in automatico => TOT 6

                elif Q and not QM and not QFP:
                
                
                
                    print('Hai inserito manualmente un alimento per la categoria <FORAGGI>') 



                    quantità_TOTALE_TAL_QUALE = Q + quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0] + quantità_alimento_4[0] + quantità_alimento_5[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_FOR_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0] + random_ARR_3_new[0] + random_ARR_4_new[0] 
                    APPORTO_PROTEINA_GREZZA = app_FOR_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1] + random_ARR_3_new[1] + random_ARR_4_new[1]
                    APPORTO_FIBRA_GREZZA = app_FOR_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2] + random_ARR_3_new[2] + random_ARR_4_new[2]
                    APPORTO_NDF = app_FOR_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3] + random_ARR_3_new[3] + random_ARR_4_new[3]
                    APPORTO_ADF = app_FOR_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4] + random_ARR_3_new[4] + random_ARR_4_new[4]
                    APPORTO_GRASSO = app_FOR_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5] + random_ARR_3_new[5] + random_ARR_4_new[5]
                    APPORTO_AMIDO = app_FOR_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6] + random_ARR_3_new[6] + random_ARR_4_new[6]
                    APPORTO_ZUCCHERI = app_FOR_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7] + random_ARR_3_new[7] + random_ARR_4_new[7]
                    APPORTO_Ca = app_FOR_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8] + random_ARR_3_new[8] + random_ARR_4_new[8]
                    APPORTO_P = app_FOR_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9] + random_ARR_3_new[9] + random_ARR_4_new[9]
                    APPORTO_UFL = app_FOR_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10] + random_ARR_3_new[10] + random_ARR_4_new[10]
                    APPORTO_PDI = app_FOR_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11] + random_ARR_3_new[11] + random_ARR_4_new[11]



                    print('')
                    print('apporti di %s:' % M)
                    print('')
                    print(app_FOR_man)
                    print('')  
                                        
                    print('apporti di %s:' % S[0])
                    print('')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print(random_ARR_2_new)
                    print('')
                    print('apporti di %s:' % S[3])
                    print('')
                    print(random_ARR_3_new)
                    print('')
                    print('apporti di %s:' % S[4])
                    print('')
                    print(random_ARR_4_new)
                    print('')
                  
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')                       
                    print('%f kg %s' % (Q, M))
                                                
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))
                    print('%f kg %s' % (quantità_alimento_4[0], S[3]))
                    print('%f kg %s' % (quantità_alimento_5[0], S[4]))
            

                    
                    print('')
                    print('Rapporto (LISINA / PROTEINA DIGERIBILE) => %f' % LysDI_ratio)
                    print('')
                    print('Rapporto (METIONINA / PROTEINA DIGERIBILE) => %f' % MetDI_ratio)
                    print('')
                    print('Rapporto (LISINA / METIONINA) => %f' % Lys_Met_ratio)
                    print('')
                    if Lys_Met_ratio >= 3.0:
                        print('La razione è carente di METIONINA!')
                        print('')
                        print("Prova a sostituire l'alimento <%s> (CARENTE DI METIONINA) con <girasole farina estrazione>" % FE) 
                       
                    
                    BFR = (APPORTO_PDI - app_tot_PDIE)/APPORTO_UFL
                    print('')
                    print('La RAZIONE fornisce %f g di PDIN' % APPORTO_PDI)
                    print('')
                    print('La RAZIONE fornisce %f g di PDIE' % app_tot_PDIE)
                    print('')
                    print('Rmic = (PDIN – PDIE)/UFL')
                    print('')
                    print('Rmic = %f' % BFR)
                    print('')
                    if BFR >= -17:
                        
                        print('La RAZIONE è accettabile')
                    else:
                        print('La RAZIONE non è accettabile')
                        print('Prova ad aumentare la quantità di %s' % FE) 
                    



############################################################################################################################            
# METODO <LYS_MET>
# 5 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 5)
# CEREALE inserito manualmente
# 1 alimento inserito manualmente + 5 alimenti inseriti in automatico => TOT 6

                elif QM and not Q and not QFP:
                
                
                
                    print('Hai inserito manualmente un alimento per la categoria <CEREALI>') 



                    quantità_TOTALE_TAL_QUALE = QM + quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0] + quantità_alimento_4[0] + quantità_alimento_5[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_CER_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0] + random_ARR_3_new[0] + random_ARR_4_new[0] 
                    APPORTO_PROTEINA_GREZZA = app_CER_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1] + random_ARR_3_new[1] + random_ARR_4_new[1]
                    APPORTO_FIBRA_GREZZA = app_CER_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2] + random_ARR_3_new[2] + random_ARR_4_new[2]
                    APPORTO_NDF = app_CER_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3] + random_ARR_3_new[3] + random_ARR_4_new[3]
                    APPORTO_ADF = app_CER_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4] + random_ARR_3_new[4] + random_ARR_4_new[4]
                    APPORTO_GRASSO = app_CER_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5] + random_ARR_3_new[5] + random_ARR_4_new[5]
                    APPORTO_AMIDO = app_CER_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6] + random_ARR_3_new[6] + random_ARR_4_new[6]
                    APPORTO_ZUCCHERI = app_CER_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7] + random_ARR_3_new[7] + random_ARR_4_new[7]
                    APPORTO_Ca = app_CER_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8] + random_ARR_3_new[8] + random_ARR_4_new[8]
                    APPORTO_P = app_CER_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9] + random_ARR_3_new[9] + random_ARR_4_new[9]
                    APPORTO_UFL = app_CER_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10] + random_ARR_3_new[10] + random_ARR_4_new[10]
                    APPORTO_PDI = app_CER_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11] + random_ARR_3_new[11] + random_ARR_4_new[11]



                    print('')
                    print('apporti di %s:' % MG)
                    print('')
                    print(app_CER_man)
                    print('')  
                                        
                    print('apporti di %s:' % S[0])
                    print('')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print(random_ARR_2_new)
                    print('')
                    print('apporti di %s:' % S[3])
                    print('')
                    print(random_ARR_3_new)
                    print('')
                    print('apporti di %s:' % S[4])
                    print('')
                    print(random_ARR_4_new)
                    print('')

                    print('La razione fornisce %f kg di %s' % (QM, MG))
                    if QM == Q_MAISGRA:
                        from crea_db_PREZZI_Milano_L import prezzo_MAIS
                        if type(prezzo_MAIS) is float:
                            prezzo_CEREALE_quantità = prezzo_MAIS               
                            costo_MAIS_GRANELLA = QM * prezzo_MAIS / 1000
                            costo_CEREALE_quantità = costo_MAIS_GRANELLA
                            print("Prezzo del MAIS GRANELLA => %f EURO/ton" % prezzo_MAIS)
                        else:
                            print('Prezzo del MAIS GRANELLA => NON DISPONIBILE')

                
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')
                    print('%f kg %s' % (QM, MG))                                                 
                                                
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))
                    print('%f kg %s' % (quantità_alimento_4[0], S[3]))
                    print('%f kg %s' % (quantità_alimento_5[0], S[4]))
            


                    
                    print('')
                    print('Rapporto (LISINA / PROTEINA DIGERIBILE) => %f' % LysDI_ratio)
                    print('')
                    print('Rapporto (METIONINA / PROTEINA DIGERIBILE) => %f' % MetDI_ratio)
                    print('')
                    print('Rapporto (LISINA / METIONINA) => %f' % Lys_Met_ratio)
                    print('')
                    if Lys_Met_ratio >= 3.0:
                        print('La razione è carente di METIONINA!')
                        print('')
                        print("Prova a sostituire l'alimento <%s> (CARENTE DI METIONINA) con <girasole farina estrazione>" % FE) 
                       
                    
                    BFR = (APPORTO_PDI - app_tot_PDIE)/APPORTO_UFL
                    print('')
                    print('La RAZIONE fornisce %f g di PDIN' % APPORTO_PDI)
                    print('')
                    print('La RAZIONE fornisce %f g di PDIE' % app_tot_PDIE)
                    print('')
                    print('Rmic = (PDIN – PDIE)/UFL')
                    print('')
                    print('Rmic = %f' % BFR)
                    print('')
                    if BFR >= -17:
                        
                        print('La RAZIONE è accettabile')
                    else:
                        print('La RAZIONE non è accettabile')
                        print('Prova ad aumentare la quantità di %s' % FE) 
                    



############################################################################################################################            
# METODO <LYS_MET>
# 5 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 7)
# NESSUN ALIMENTO inserito manualmente
# 0 alimenti inseriti manualmente + 5 alimenti inseriti in automatico => TOT 5

                else:
                
                
                
                    print('Non hai inserito manualmente alcun alimento')


                    quantità_TOTALE_TAL_QUALE = quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0] + quantità_alimento_4[0] + quantità_alimento_5[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0] + random_ARR_3_new[0] + random_ARR_4_new[0] 
                    APPORTO_PROTEINA_GREZZA = random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1] + random_ARR_3_new[1] + random_ARR_4_new[1]
                    APPORTO_FIBRA_GREZZA = random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2] + random_ARR_3_new[2] + random_ARR_4_new[2]
                    APPORTO_NDF = random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3] + random_ARR_3_new[3] + random_ARR_4_new[3]
                    APPORTO_ADF = random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4] + random_ARR_3_new[4] + random_ARR_4_new[4]
                    APPORTO_GRASSO = random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5] + random_ARR_3_new[5] + random_ARR_4_new[5]
                    APPORTO_AMIDO = random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6] + random_ARR_3_new[6] + random_ARR_4_new[6]
                    APPORTO_ZUCCHERI = random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7] + random_ARR_3_new[7] + random_ARR_4_new[7]
                    APPORTO_Ca = random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8] + random_ARR_3_new[8] + random_ARR_4_new[8]
                    APPORTO_P = random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9] + random_ARR_3_new[9] + random_ARR_4_new[9]
                    APPORTO_UFL = random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10] + random_ARR_3_new[10] + random_ARR_4_new[10]
                    APPORTO_PDI = random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11] + random_ARR_3_new[11] + random_ARR_4_new[11]



                    print('apporti di %s:' % S[0])
                    print('')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print(random_ARR_2_new)
                    print('')
                    print('apporti di %s:' % S[3])
                    print('')
                    print(random_ARR_3_new)
                    print('')
                    print('apporti di %s:' % S[4])
                    print('')
                    print(random_ARR_4_new)
                    print('')


                    
                    print('')
                    print('Rapporto (LISINA / PROTEINA DIGERIBILE) => %f' % LysDI_ratio)
                    print('')
                    print('Rapporto (METIONINA / PROTEINA DIGERIBILE) => %f' % MetDI_ratio)
                    print('')
                    print('Rapporto (LISINA / METIONINA) => %f' % Lys_Met_ratio)
                    print('')
                    if Lys_Met_ratio >= 3.0:
                        print('La razione è carente di METIONINA!')
                        print('')
                        print("Prova a sostituire l'alimento <%s> (CARENTE DI METIONINA) con <girasole farina estrazione>" % FE) 
                       
                    
                    BFR = (APPORTO_PDI - app_tot_PDIE)/APPORTO_UFL
                    print('')
                    print('La RAZIONE fornisce %f g di PDIN' % APPORTO_PDI)
                    print('')
                    print('La RAZIONE fornisce %f g di PDIE' % app_tot_PDIE)
                    print('')
                    print('Rmic = (PDIN – PDIE)/UFL')
                    print('')
                    print('Rmic = %f' % BFR)
                    print('')
                    if BFR >= -17:
                        
                        print('La RAZIONE è accettabile')
                    else:
                        print('La RAZIONE non è accettabile')
                        print('Prova ad aumentare la quantità di %s' % FE) 
                    



          
############################################################################################################################

        except NameError:
            print('ERRORE!')
            




        if metodo == 'LYS_MET':
            
                
      
            A = []
            A.append(APPORTO_DEFINITIVO_SOSTANZA_SECCA)
            A.append(APPORTO_PROTEINA_GREZZA)
            A.append(APPORTO_FIBRA_GREZZA)
            A.append(APPORTO_NDF)
            A.append(APPORTO_ADF)
            A.append(APPORTO_GRASSO)
            A.append(APPORTO_AMIDO)
            A.append(APPORTO_ZUCCHERI)
            A.append(APPORTO_Ca)
            A.append(APPORTO_P)
            A.append(APPORTO_UFL)
            A.append(APPORTO_PDI)
            
        
            try:
                with open('%s.txt' % nome_file_apporti, 'w') as external_file:
                    print(A, file=external_file)
                external_file.close()
            except NameError:
                with open('nuovi_apporti.txt', 'w') as external_file:
                    print(A, file=external_file)
                external_file.close()
            

            try:
                with open('%s.txt' % nome_file_fabbisogni, 'w') as external_file:
                    print(F, file=external_file)
                external_file.close()
            except NameError:
                with open('nuovi_fabbisogni.txt', 'w') as external_file:
                    print(A, file=external_file)
                external_file.close()

            
            print('')
            print('Ho salvato i PARAMETRI nel FILE DI TESTO <%s.txt>' % nome_file_parametri)
            print('')
            print('Ho salvato i FABBISOGNI nel FILE DI TESTO <%s.txt>' % nome_file_fabbisogni)
            print('')
            print('Ho salvato gli APPORTI nel FILE DI TESTO <%s.txt>' % nome_file_apporti)
            print('')
            print('Ho salvato i DATI nel FILE DI TESTO <%s.py>' % nome_file_dati)
            print('')
            print('Ho salvato le quantità nel FILE DI TESTO <%s.py>' % nome_file_quantità)
            print('')
            print('Ho salvato la RAZIONE nel FILE DI TESTO <%s.txt>' % nome_file_razione)
            print('')

        
            DELTA_SOSTANZA_SECCA = APPORTO_DEFINITIVO_SOSTANZA_SECCA - F[0]
            DELTA_PROTEINA_GREZZA = APPORTO_PROTEINA_GREZZA - F[1]
            DELTA_FIBRA_GREZZA = APPORTO_FIBRA_GREZZA - F[2]
            DELTA_NDF = APPORTO_NDF - F[3]
            DELTA_ADF = APPORTO_ADF - F[4]
            DELTA_GRASSO = APPORTO_GRASSO - F[5]
            DELTA_AMIDO = APPORTO_AMIDO - F[6]
            DELTA_ZUCCHERI = APPORTO_ZUCCHERI - F[7]
            DELTA_Ca = APPORTO_Ca - F[8]
            DELTA_P = APPORTO_P - F[9]
            DELTA_UFL = APPORTO_UFL - F[10]
            DELTA_PDI = APPORTO_PDI - F[11]
        
                              
            print('')
            print('')
            if i == N_repl-1:
                print('Il calcolo della razione non ha avuto SUCCESSO; per favore cancella gli alimenti inseriti e riprova.')
            elif i < N_repl-1:
                print('Il CALCOLO DELLA RAZIONE è stato effettuato con SUCCESSO alla %d^ replica!' % i)        
            print('')
        


                        
            print("Il FABBISOGNO DI SOSTANZA SECCA (che dev'essere soddisfatto dagli alimenti aggiunti) delle bovine del gruppo <%s> è di %f kg" %  (gruppo, F_arr[0]))
            print('')
            print("L'APPORTO DI SOSTANZA SECCA degli alimenti selezionati è di %f kg" % APPORTO_SOSTANZA_SECCA)
            print('')

            print('')        
            print('LEGENDA')
            print('')
            print("DM => Dry Matter (Apporto di Sostanza Secca)")
            print("CP => Crude Protein (Apporto di PROTEINA GREZZA)")
            print("FG => FIBRA GREZZA (apporto di FIBRA GREZZA)")
            print("NDF => NDF (apporto di Fibra resistente al Detergente Neutro)")
            print("ADF => ADF (apporto di Fibra resistente al Detergente Acido)")
            print("FAT => Fat (apporto di GRASSO)")
            print("AM => AMIDO (apporto di AMIDO)")
            print("ZUC => ZUCCHERI (apporto di ZUCCHERI)")
            print("Ca => Calcio (apporto di Calcio)")
            print("P => Fosforo (apporto di Fosforo)")
            print("UFL => Unità Foraggere Latte (apporto di Energia Netta)")
            print("PDI => Proteina Digeribile Intestinale (apporto di PDI)")
            print('')
            print('')
            print('DMI','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PFI')
            
            
            if len(PREZZI) == len(S):

                print('')
                for i in list(range(len(PREZZI))):
                    print("Prezzo dell'alimento <%s> => %f EURO/ton" % (S[i], PREZZI[i]))
                print('')
                print('********************************************************************')
                print('')
            else:
                print('Impossibile creare la TABELLA DEI PREZZI: ci sono uno o più alimenti non quotati!')


            
            if len(PREZZI) == len(S):

            
                costo_alimento_1 = quantità_alimento_1[0] * PREZZI[0] / 1000
                costo_alimento_2 = quantità_alimento_2[0] * PREZZI[1] / 1000
                costo_alimento_3 = quantità_alimento_3[0] * PREZZI[2] / 1000
                costo_alimento_4 = quantità_alimento_4[0] * PREZZI[3] / 1000
                costo_alimento_5 = quantità_alimento_5[0] * PREZZI[4] / 1000
                
            
                COSTO_RAZIONE = []            
                COSTO_RAZIONE.append(costo_alimento_1)
                COSTO_RAZIONE.append(costo_alimento_2)
                COSTO_RAZIONE.append(costo_alimento_3)
                COSTO_RAZIONE.append(costo_alimento_4)
                COSTO_RAZIONE.append(costo_alimento_5)
                

            
                if Q and not QM and not QFP:
                            
                    if type(costo_FORAGGIO_quantità) is float: 
                        COSTO_RAZIONE.append(costo_FORAGGIO_quantità)
                        print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[3], costo_alimento_4))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[4], costo_alimento_5))
                        print("Costo dell'alimento <%s>: %f EURO" % (M, costo_FORAGGIO_quantità))

                    else:
                        print("Il prezzo dell'alimento <%s> non è disponibile!" % M) 

                
                elif QM and not Q and not QFP:                
                
                    if type(costo_CEREALE_quantità) is float:
                        COSTO_RAZIONE.append(costo_CEREALE_quantità)  
                        print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[3], costo_alimento_4))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[4], costo_alimento_5))
                        print("Costo dell'alimento <%s>: %f EURO" % (MG, costo_CEREALE_quantità))

                    else:
                        print("Il prezzo dell'alimento <%s> non è disponibile!" % MG) 

            
                elif QFP and not Q and not QM:
                
                    if type(costo_FONTE_PROTEICA_quantità) is float:
                        COSTO_RAZIONE.append(costo_FONTE_PROTEICA_quantità)
                        print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[3], costo_alimento_4))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[4], costo_alimento_5))
                        print("Costo dell'alimento <%s>: %f EURO" % (FE, costo_FONTE_PROTEICA_quantità))
                    else:
                        print("Il prezzo dell'alimento <%s> non è disponibile!" % FE)

            
                elif Q and QM and not QFP:
                
                    if type(costo_FORAGGIO_quantità) is float and type(costo_CEREALE_quantità) is float: 
                        COSTO_RAZIONE.append(costo_FORAGGIO_quantità)
                        COSTO_RAZIONE.append(costo_CEREALE_quantità)  
                        print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[3], costo_alimento_4))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[4], costo_alimento_5))                     
                        print("Costo dell'alimento <%s>: %f EURO" % (M, costo_FORAGGIO_quantità))
                        print("Costo dell'alimento <%s>: %f EURO" % (MG, costo_CEREALE_quantità))                        
                    
                    else:
                        print("Il prezzo dell'alimento <%s> e/o dell'alimento <%s> non è disponibile!" % (M, MG))

            
                elif Q and QFP:
                
                    if type(costo_FORAGGIO_quantità) is float and type(costo_FONTE_PROTEICA_quantità) is float:  
                        COSTO_RAZIONE.append(costo_FORAGGIO_quantità)
                        COSTO_RAZIONE.append(costo_FONTE_PROTEICA_quantità)
                        print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[3], costo_alimento_4))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[4], costo_alimento_5))                     
                        print("Costo dell'alimento <%s>: %f EURO" % (M, costo_FORAGGIO_quantità))
                        print("Costo dell'alimento <%s>: %f EURO" % (FE, costo_FONTE_PROTEICA_quantità))

                    else:
                        print("Il prezzo dell'alimento <%s> e/o dell'alimento <%s> non è disponibile!" % (M, FE))

                
                elif QM and QFP and not Q:
                
                    if type(costo_CEREALE_quantità) is float and type(costo_FONTE_PROTEICA_quantità) is float:
                        COSTO_RAZIONE.append(costo_CEREALE_quantità) 
                        COSTO_RAZIONE.append(costo_FONTE_PROTEICA_quantità)
                        print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[3], costo_alimento_4))                   
                        print("Costo dell'alimento <%s>: %f EURO" % (MG, costo_CEREALE_quantità))
                        print("Costo dell'alimento <%s>: %f EURO" % (FE, costo_FONTE_PROTEICA_quantità)) 
                    else:
                        print("Il prezzo dell'alimento <%s> e/o dell'alimento <%s> non è disponibile!" % (MG, FE))
                                           
                   
                elif Q and QM and QFP:
                    if type(prezzo_FORAGGIO_quantità) is float and type(prezzo_CEREALE_quantità) is float and type(prezzo_FONTE_PROTEICA_quantità) is float:
                        COSTO_RAZIONE.append(costo_FORAGGIO_quantità)
                        COSTO_RAZIONE.append(costo_CEREALE_quantità)                                   
                        COSTO_RAZIONE.append(costo_FONTE_PROTEICA_quantità)

                        print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[3], costo_alimento_4))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[4], costo_alimento_5))
                        print("Costo dell'alimento <%s>: %f EURO" % (M, costo_FORAGGIO_quantità))                     
                        print("Costo dell'alimento <%s>: %f EURO" % (MG, costo_CEREALE_quantità))
                        print("Costo dell'alimento <%s>: %f EURO" % (FE, costo_FONTE_PROTEICA_quantità)) 
                    else:
                        print("Il prezzo dell'alimento <%s> e/o dell'alimento <%s> e/o dell'alimento <%s> non è disponibile!" % (M, MG, FE))
                                           
                COSTO_TOTALE = sum(COSTO_RAZIONE)
                print('')
                print('Il costo della razione è %f EURO' % COSTO_TOTALE)
                if COSTO_TOTALE > PREZZO_MAX:
                    print('Il COSTO TOTALE della razione è > del PREZZO MASSIMO che hai impostato!')
                    print('Prova a scegliere altri alimenti e ricalcola la RAZIONE')
            
            
            else:
                print('Non posso calcolare il COSTO DELLA RAZIONE: ci sono uno o più alimenti non quotati!') 
            
            
            print('')                
            print('')
            print('')
            print('_______________________________________________________________________________________________')
            print('|                         |                    |                         |                    |')
            print('|                         |                    |                         |                    |')
            print('|   PRINCIPIO NUTRITIVO   |      APPORTO       |       Fabbisogno        |     DIFFERENZA     |')
            print('|                         |                    |                         |                    |')
            print('|_________________________|____________________|_________________________|____________________|')
            print('|      Sostanza Secca     |     %f kg   |  %f kg           |  %f kg       |' % (APPORTO_DEFINITIVO_SOSTANZA_SECCA, F[0], DELTA_SOSTANZA_SECCA))
            print('|      PROTEINA GREZZA    |   %f g    |%f g            |%f g        |' % (APPORTO_PROTEINA_GREZZA, F[1], DELTA_PROTEINA_GREZZA))
            print('|      FIBRA GREZZA       |   %f g    |%f g            |%f g        |' % (APPORTO_FIBRA_GREZZA, F[2], DELTA_FIBRA_GREZZA))
            print('|           NDF           |   %f g    |%f g            |%f g        |' % (APPORTO_NDF, F[3], DELTA_NDF))
            print('|           ADF           |   %f g    |%f g            |%f g        |' % (APPORTO_ADF, F[4], DELTA_ADF))
            print('|         GRASSO          |   %f g    |%f g            |%f g        |' % (APPORTO_GRASSO, F[5], DELTA_GRASSO)) 
            print('|          AMIDO          |   %f g    |%f g            |%f g        |' % (APPORTO_AMIDO, F[6], DELTA_AMIDO))
            print('|        ZUCCHERI         |    %f g    |%f g            |%f g       |' % (APPORTO_ZUCCHERI, F[7], DELTA_ZUCCHERI))
            print('|           Ca            |   %f g      |  %f g           |  %f g     |' % (APPORTO_Ca, F[8], DELTA_Ca))        
            print('|            P            |   %f g      |  %f g            |  %f g      |' % (APPORTO_P, F[9], DELTA_P))        
            print('|           UFL           |     %f      | %f               | %f           |' % (APPORTO_UFL, F[10], DELTA_UFL))
            print('|           PDI           |     %f      | %f               | %f           |' % (APPORTO_PDI, F[11], DELTA_PDI))        
            print('_______________________________________________________________________________________________')
            print('')
            print('')
            print('')
            print('******************************************** SOSTANZA SECCA ********************************************')
            print('')
            print('La razione fornisce %f kg di alimento tal quale' % quantità_TOTALE_TAL_QUALE)
            print('')
            print('La razione fornisce %f kg di Sostanza Secca' % APPORTO_DEFINITIVO_SOSTANZA_SECCA)            
            print('')
            DMI_AS_FED_ratio = (APPORTO_DEFINITIVO_SOSTANZA_SECCA/quantità_TOTALE_TAL_QUALE)*100
            print('La tua RAZIONE contiene il %fx100 di SOSTANZA SECCA' % DMI_AS_FED_ratio)
            print('')
            if DMI_AS_FED_ratio < 0.6:
                print('')
                print('In estate, in caso di COMPETIZIONE ALIMENTARE x un N° INSUFFICIENTE DI AUTOCATTURANTI (= BOVINE IN PIEDI),')
                print('se prepari un CARRO MISCELATORE con, per es., un 10x100 in più di razioni (per es., con 100')
                print('BOVINE IN LATTAZIONE metto nel carro 110 RAZIONI), dal momento che la miscelata rimarrà per più tempo in')
                print('mangiatoia, potrebbe scaldarsi!')
                print("Prova a RIDURRE UN PO' L'APPORTO COMPLESSIVO DI FORAGGIO, insilato, per aumentare la SS della razione,")
                print("o fieno (dipende da che tipo di FORAGGIo hai inserito manualmente), per forzare il programma ad")
                print("AUMENTARE L'APPORTO DELLA FONTE DI FIBRA DIGERIBILE")
                print("In questo modo, si dovrebbe attenuare la riduzione dell'ingestione volontaria di fibra scarsamente")
                print("digeribile (poiché più o meno lignificata), nonché il conseguente CALO DEL TENORE IN GRASSO del latte")
                print("Tieni anche conto del fatto che, riducendo l'apporto della cosiddetta <FIBRA FISICAMENTE EFFICACE>")
                print("(quella dei FORAGGI, che fa ruminare), LE BOVINE PRODURRANNO MENO SALIVA (che è il tampone naturale")
                print("del rumine) e, quindi, dovrai valutare l'inserimento di un TAMPONE ARTIFICIALE, come il bicarbonato")
                print("di calcio o di sodio, nella razione")    
            print('')
            print('')
            print('******************************************** PROTEINA GREZZA ********************************************')
            print('')
            APPORTO_DEFINITIVO_SOSTANZA_SECCA_g = APPORTO_DEFINITIVO_SOSTANZA_SECCA * 1000
            CP_DMI_ratio = APPORTO_PROTEINA_GREZZA/APPORTO_DEFINITIVO_SOSTANZA_SECCA_g
            print('Rapporto (PROTEINA GREZZA : Sostanza Secca) => %f' % CP_DMI_ratio)
            print('')
            print("Secondo Dell'Orto e Savoini, ad inizio lattazione dovrebbe essere ~ 0.18 (18%)")
            print('')
            if CP_DMI_ratio <= 0.17:
                print("L'apporto di PROTEINA GREZZA è insufficiente")
                print("Se avevi scelto una fonte proteica diversa dalla <F.E. DI SOIA>, sostituiscila con quest'ultima!")
                print("Se non basta, prova a sostituire il fieno di prato stabile o l'insilato di loietto con il <FIENO DI ERBA MEDICA e/o a ridurre l'apporto di insilato (o di pastone) di mais>")         
            print('')
            print('')


            print('******************************************* LISINA & METIONINA *******************************************')
            print('')
            print('Rapporto (LISINA / PROTEINA DIGERIBILE) => %f' % LysDI_ratio)
            print('')
            print('Rapporto (METIONINA / PROTEINA DIGERIBILE) => %f' % MetDI_ratio)
            print('')
            
            rapporto_Lys_Met = LysDI_ratio/MetDI_ratio

            print('Rapporto (LISINA / METIONINA) => %f' % rapporto_Lys_Met)
            print('')
            if rapporto_Lys_Met >= 3.0:
                print('La razione contiene un eccesso di LISINA!')
                print('')
                print('Dovrebbe essere > 2.7 e < 3.0')
                print('')
                print("Se hai scelto come FONTE DI PROTEINA un alimento CARENTE DI METIONINA, prova a sostituirlo con la <farina estrazione di girasole>")

            print('')
            print('')      
            print('')
            print('')           
            print('*********************************************** PDIN & PDIE ***********************************************')        
            
            BFR = (APPORTO_PDI - PDIE_TOT)/APPORTO_UFL
            print('')
            print('La RAZIONE fornisce %f g di PDIN' % PDIN_TOT)
            print('')
            print('La RAZIONE fornisce %f g di PDIE' % PDIE_TOT)
            print('')
            print('Rmic = (PDIN – PDIE)/UFL')
            print('')
            print('Rmic = %f' % BFR)
            print('')
            if BFR >= -17:                       
                print('La RAZIONE è accettabile')
                print('')
            else:
                print('La RAZIONE non è accettabile')
                print('Prova ad aumentare la quantità di %s' % FE)
            print('')
            print('')


            print('********************************************** FIBRA GREZZA **********************************************')                   
            FG_DMI_ratio = APPORTO_FIBRA_GREZZA/APPORTO_DEFINITIVO_SOSTANZA_SECCA_g
            print('')                 
            FG_DMI_ratio = APPORTO_FIBRA_GREZZA/APPORTO_DEFINITIVO_SOSTANZA_SECCA_g
            print('')
            print('Rapporto (FIBRA GREZZA : Sostanza Secca) => %f' % FG_DMI_ratio)
            print('')
            print('Dovrebbe essere ~ 0.17 (17%)')
            print('')
            # print('********************************************** NDF **********************************************')  
            APPORTO_NDF_FORAGGI = app_FOR_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3]
            NDF_FORAGGI_NDF_tot_ratio = APPORTO_NDF_FORAGGI/APPORTO_NDF
#           print('Rapporto (NDF da FORAGGI : NDF totale) => %f' % NDF_FORAGGI_NDF_tot_ratio)
#           print('')
#           print('Dovrebbe essere ~ 0.75 (75%)')
            print('')
            print('')           
            print('')
            print('***********************************************************************************************************')
            print('********************************************* FINE DEL REPORT *********************************************')
            print('***********************************************************************************************************')
            
            sys.stdout = original


                                
#################################################################################################################
###################################### 6 ALIMENTI INSERITI AUTOMATICAMENTE ######################################
#################################################################################################################
                                        


    elif len(S) == 6:
    
        print('')
        print('Questo TESTO viene visualizzato sul terminale, non inserito nel file!')
        print('')
        if day == 'Monday': 
            print('RAZIONE di %s, creata Lunedì %s, %s' % (user, data, current_time))
        if day == 'Tuesday': 
            print('RAZIONE di %s, creata Martedì %s, %s' % (user, data, current_time))
        if day == 'Wednesday': 
            print('RAZIONE di %s, creata Mercoledì %s, %s' % (user, data, current_time))
        if day == 'Thursday': 
            print('RAZIONE di %s, creata Giovedì %s, %s' % (user, data, current_time))
        if day == 'Friday': 
            print('RAZIONE di %s, creata Venerdì %s, %s' % (user, data, current_time))
        if day == 'Saturday': 
            print('RAZIONE di %s, creata Sabato %s, %s' % (user, data, current_time))
        if day == 'Sunday': 
            print('RAZIONE di %s, creata Domenica %s, %s' % (user, data, current_time))

        print('')
        print('Hai inserito 6 alimenti:')
        print('')
        print('ALIMENTO 1 => <%s>' % S[0])
        print('ALIMENTO 2 => <%s>' % S[1])
        print('ALIMENTO 3 => <%s>' % S[2])
        print('ALIMENTO 4 => <%s>' % S[3])
        print('ALIMENTO 5 => <%s>' % S[4])
        print('ALIMENTO 6 => <%s>' % S[5])
        print('')
        
        print(ARR[0])
        print(ARR[1])
        print(ARR[2])
        print(ARR[3])
        print(ARR[4])
        print(ARR[5])
        
                
        random_ARR_0_old = ARR[0] * random.random() * 10
        random_ARR_1_old = ARR[1] * random.random() * 10
        random_ARR_2_old = ARR[2] * random.random() * 10
        random_ARR_3_old = ARR[3] * random.random() * 10
        random_ARR_4_old = ARR[4] * random.random() * 10
        random_ARR_5_old = ARR[5] * random.random() * 10
        
# ogni alimento scelto dall'utente viene moltiplicato per un numero casuale compreso fra 0 e 10 (kg) 
# dichiaro random_ARR_x_old

        
        random_ARR_0_new = random_ARR_0_old * (random.random() + 0.5)
        random_ARR_1_new = random_ARR_1_old * (random.random() + 0.5)
        random_ARR_2_new = random_ARR_2_old * (random.random() + 0.5)
        random_ARR_3_new = random_ARR_3_old * (random.random() + 0.5)
        random_ARR_4_new = random_ARR_4_old * (random.random() + 0.5)
        random_ARR_5_new = random_ARR_5_old * (random.random() + 0.5)
        
# dichiaro random_ARR_x_new
        
        SOMMA_old = random_ARR_0_old + random_ARR_1_old + random_ARR_2_old + random_ARR_3_old + random_ARR_4_old + random_ARR_5_old

###########################################################################################################################################        
        
        print(SOMMA_old)
        print(F_arr)
        
        DELTA_old = SOMMA_old - F_arr
        print('La somma iniziale è...')
        print(SOMMA_old)

# dichiaro SOMMA_old e DELTA_old

        SOMMA_new = random_ARR_0_new + random_ARR_1_new + random_ARR_2_new + random_ARR_3_new + random_ARR_4_new + random_ARR_5_new
        DELTA_new = SOMMA_new - F_arr
        print('La nuova somma è...')
        print(SOMMA_new)
        print('La nuova differenza è...')
        print(DELTA_new)

# dichiaro SOMMA_new e DELTA_new
        
        quantità_alimento_1 = random_ARR_0_new / ARR[0]
        quantità_alimento_2 = random_ARR_1_new / ARR[1]
        quantità_alimento_3 = random_ARR_2_new / ARR[2]
        quantità_alimento_4 = random_ARR_3_new / ARR[3]
        quantità_alimento_5 = random_ARR_4_new / ARR[4]
        quantità_alimento_6 = random_ARR_5_new / ARR[5]
        
# dichiaro gli apporti dei singoli alimenti


        i = 0

# inizializzo il contatore i        
        
        for i in range(N_repl):
        
            rules = [abs(DELTA_new[0]) < abs(DELTA_old[0]), abs(DELTA_new[1]) < abs(DELTA_old[1]), abs(DELTA_new[2]) < abs(DELTA_old[2])]

# dichiaro le regole da rispettare
                                    
            if all(rules):
            
                print('ESTRAGGO DALLA PROPOSAL DISTRIBUTION')
                i += 1
                print(i)
                                                         	               	        
                random_ARR_0_new = random_ARR_0_new * (random.random() + 0.5)
                random_ARR_1_new = random_ARR_1_new * (random.random() + 0.5)
                random_ARR_2_new = random_ARR_2_new * (random.random() + 0.5)
                random_ARR_3_new = random_ARR_3_new * (random.random() + 0.5)
                random_ARR_4_new = random_ARR_4_new * (random.random() + 0.5)
                random_ARR_5_new = random_ARR_5_new * (random.random() + 0.5)
                
# ACCETTO random_ARR_x_new e lo uso per aggiornare random_ARR_x_new stesso 
                
                APPORTO_SOSTANZA_SECCA = random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0] + random_ARR_3_new[0] + random_ARR_4_new[0] + random_ARR_5_new[0]
                print(APPORTO_SOSTANZA_SECCA)

# aggiorno l'apporto di SS
                                
                SOMMA_new = random_ARR_0_new + random_ARR_1_new + random_ARR_2_new + random_ARR_3_new + random_ARR_4_new + random_ARR_5_new
                DELTA_new = SOMMA_new - F_arr
                
# aggiorno SOMMA_new e DELTA_new                
                
                print('La nuova somma è...')
                print(SOMMA_new)
                print('La nuova differenza è...')
                print(DELTA_new)
            
                quantità_alimento_1 = random_ARR_0_new / ARR[0]
                quantità_alimento_2 = random_ARR_1_new / ARR[1]
                quantità_alimento_3 = random_ARR_2_new / ARR[2]
                quantità_alimento_4 = random_ARR_3_new / ARR[3]
                quantità_alimento_5 = random_ARR_4_new / ARR[4]
                quantità_alimento_6 = random_ARR_5_new / ARR[5]
                
                if round(APPORTO_SOSTANZA_SECCA) == round(F_arr[0]):
                
                    break
                                
                print('')                
                print("SUCCESSO! L'APPORTO di Sostanza Secca corrisponde al FABBISOGNO.")

                    	                
            else:
                    
                random_ARR_0_new = random_ARR_0_old * (random.random() + 0.5)
                random_ARR_1_new = random_ARR_1_old * (random.random() + 0.5)
                random_ARR_2_new = random_ARR_2_old * (random.random() + 0.5)
                random_ARR_3_new = random_ARR_3_old * (random.random() + 0.5)
                random_ARR_4_new = random_ARR_4_old * (random.random() + 0.5)
                random_ARR_5_new = random_ARR_5_old * (random.random() + 0.5)
                
# RIFIUTO random_ARR_x_new e lo ricalcolo a partire da random_ARR_x_old 
                
                print('FALLIMENTO')
                
                APPORTO_SOSTANZA_SECCA = random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0] + random_ARR_3_new[0] + random_ARR_4_new[0] + random_ARR_5_new[0]

                                
                SOMMA_new = random_ARR_0_new + random_ARR_1_new + random_ARR_2_new + random_ARR_3_new + random_ARR_4_new + random_ARR_5_new
                DELTA_new = SOMMA_new - F_arr
                                                
                print('La nuova somma è...')
                print(SOMMA_new)
                print('La nuova differenza è...')
                print(DELTA_new)
                
            
                quantità_alimento_1 = random_ARR_0_new / ARR[0]
                quantità_alimento_2 = random_ARR_1_new / ARR[1]
                quantità_alimento_3 = random_ARR_2_new / ARR[2]
                quantità_alimento_4 = random_ARR_3_new / ARR[3]
                quantità_alimento_5 = random_ARR_4_new / ARR[4]
                quantità_alimento_6 = random_ARR_5_new / ARR[5]


                random_ARR_0_new_ROUND = list(map(arrotonda, random_ARR_0_new))
                random_ARR_1_new_ROUND = list(map(arrotonda, random_ARR_1_new))
                random_ARR_2_new_ROUND = list(map(arrotonda, random_ARR_2_new))
                random_ARR_3_new_ROUND = list(map(arrotonda, random_ARR_3_new))
                random_ARR_4_new_ROUND = list(map(arrotonda, random_ARR_4_new))
                random_ARR_5_new_ROUND = list(map(arrotonda, random_ARR_5_new))


                
############################################################################################################################
################################# metodo => <_CNCPS_> INIZIO DEL REDIREZIONAMENTO DELLA STAMPA #############################
############################################################################################################################

                                                    ### 6 ALIMENTI AUTO ###


           
        original = sys.stdout
        sys.stdout = open('%s.txt' % nome_file_razione, 'w')

        if day == 'Monday': 
            print('RAZIONE di %s, creata Lunedì %s, %s' % (user, data, current_time))
        if day == 'Tuesday': 
            print('RAZIONE di %s, creata Martedì %s, %s' % (user, data, current_time))
        if day == 'Wednesday': 
            print('RAZIONE di %s, creata Mercoledì %s, %s' % (user, data, current_time))
        if day == 'Thursday': 
            print('RAZIONE di %s, creata Giovedì %s, %s' % (user, data, current_time))
        if day == 'Friday': 
            print('RAZIONE di %s, creata Venerdì %s, %s' % (user, data, current_time))
        if day == 'Saturday': 
            print('RAZIONE di %s, creata Sabato %s, %s' % (user, data, current_time))
        if day == 'Sunday': 
            print('RAZIONE di %s, creata Domenica %s, %s' % (user, data, current_time))



        try:


                
            if metodo == '_CNCPS_':
            
            
                            
                # from crea_db_PARAMETRI_L_CNCPS_ import LW, WOL, MY, FAT_milk, CP_milk, LAC_milk, N_repl, giorno_di_inserimento, data_di_inserimento, ora_di_inserimento
                
                print('PARAMETRI inseriti da %s, %s %s alle ore %s' % (user, giorno_di_inserimento, data_di_inserimento, ora_di_inserimento))
                print('') 
                print('METODO DI CALCOLO della razione => <%s>' % metodo)
                print('PESO VIVO MEDIO BOVINE IN LATTAZIONE => %f kg' % LW)
                print('SETTIMANA DI LATTAZIONE media => %d^' % WOL)
                print('LIVELLO PRODUTTIVO medio => %f kg di latte al giorno' % MY)
                print('TENORE DI GRASSO del latte => %fx100' % FAT_milk)
                print('TENORE DI PROTEINA del latte => %fx100' % CP_milk)
                print('TENORE DI LATTOSIO del latte => %fx100' % LAC_milk)
                print('N° DI REPLICHE => %d' % N_repl)
                print('')
        

                F = []
                F.append(DMI)
                F.append(CP)
                F.append(RDP)
                F.append(RUP)
                F.append(FG)
                F.append(NDF)
                F.append(ADF)
                F.append(FAT)
                F.append(AM)
                F.append(ZUC)
                F.append(Ca_tot)
                F.append(P_tot)
                F.append(UFL_tot)


# STAMPA FABBISOGNI _CNCPS_

                print('')
                print('Hai scelto il METODO DI CALCOLO della razione <Cornell %s>' % metodo)    
                print('')
                print('FABBISOGNI')
                print('')    
                print('CAPACITÀ DI INGESTIONE => %f kg di Sostanza Secca' % F[0])
                print('Fabbisogno di <PROTEINA GREZZA> => %f g' % F[1])
                print('Fabbisogno di <PROTEINA DEGRADABILE> => %f g' % F[2])
                print('Fabbisogno di <PROTEINA INDEGRADABILE> => %f g' % F[3])
                print('Fabbisogno di <FIBRA GREZZA> => %f g' % F[4])
                print('Fabbisogno di <NDF> => %f g' % F[5])
                print('Fabbisogno di <ADF> => %f g' % F[6]) 
                print('Fabbisogno di <GRASSO> => %f g' % F[7])
                print('Fabbisogno di <AMIDO> => %f g' % F[8])
                print('Fabbisogno di <ZUCCHERI> => %f g' % F[9])
                print('Fabbisogno di <CALCIO> => %f g' % F[10])
                print('Fabbisogno di <FOSFORO> => %f g' % F[11])
                print('Fabbisogno di <ENERGIA NETTA> => %f Unità Foraggere Latte. \n' % F[12])
                print('')
                


                if Q and QM and QFP:
                
                    F_arr = F_arr_ricalcolato_QM_FE
                
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI>, <CEREALI> e <FONTI PROTEICHE>')
                    print('')
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                              
                    print(F_arr)


                elif Q and QFP:
                
                    F_arr = F_arr_ricalcolato_FE
                
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI> e <FONTI PROTEICHE>')      
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(F_arr)
                

                elif Q and QM and not QFP:

                    F_arr = F_arr_ricalcolato
        
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI> e <CEREALI>')
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')                
                    print(F_arr)              
            

                elif Q and not QM and not QFP: 

                    F_arr = F_arr_ric
        
                    print('Hai inserito manualmente solo un alimento della categoria <FORAGGI>')
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(F_arr)


                else:

                    F_arr = F_arr
        
                    print('Nessun alimento inserito manualmente')


                    print('')
                    print("L'apporto di Sostanza Secca degli alimenti selezionati è %f" % APPORTO_SOSTANZA_SECCA)
                    print('')
                    
                

############################################################################################################################

             

# CASO 1)
# FORAGGIO + MAIS GRANELLA + FE inseriti manualmente
# 3 alimenti inseriti manualmente + 5 alimenti inseriti in automatico => TOT 8
                                                
                if Q and QM and QFP:
                

                    quantità_TOTALE_TAL_QUALE = Q + QM + QFP + quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0] + quantità_alimento_4[0] + quantità_alimento_5[0] + quantità_alimento_6[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_FP_man[0] + app_FOR_man[0] + app_CER_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0] + random_ARR_3_new[0] + random_ARR_4_new[0] + random_ARR_5_new[0] 
                    APPORTO_PROTEINA_GREZZA = app_FP_man[1] + app_FOR_man[1] + app_CER_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1] + random_ARR_3_new[1] + random_ARR_4_new[1] + random_ARR_5_new[1]
                    APPORTO_PROTEINA_DEGRADABILE = app_FP_man[2] + app_FOR_man[2] + app_CER_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2] + random_ARR_3_new[2] + random_ARR_4_new[2] + random_ARR_5_new[2]
                    APPORTO_PROTEINA_INDEGRADABILE = app_FP_man[3] + app_FOR_man[3] + app_CER_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3] + random_ARR_3_new[3] + random_ARR_4_new[3] + random_ARR_5_new[3]
                    APPORTO_FIBRA_GREZZA = app_FP_man[4] + app_FOR_man[4] + app_CER_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4] + random_ARR_3_new[4] + random_ARR_4_new[4] + random_ARR_5_new[4]
                    APPORTO_NDF = app_FP_man[5] + app_FOR_man[5] + app_CER_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5] + random_ARR_3_new[5] + random_ARR_4_new[5] + random_ARR_5_new[5]
                    APPORTO_ADF = app_FP_man[6] + app_FOR_man[6] + app_CER_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6] + random_ARR_3_new[6] + random_ARR_4_new[6] + random_ARR_5_new[6]
                    APPORTO_GRASSO = app_FP_man[7] + app_FOR_man[7] + app_CER_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7] + random_ARR_3_new[7] + random_ARR_4_new[7] + random_ARR_5_new[7]
                    APPORTO_AMIDO = app_FP_man[8] + app_FOR_man[8] + app_CER_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8] + random_ARR_3_new[8] + random_ARR_4_new[8] + random_ARR_5_new[8]
                    APPORTO_ZUCCHERI = app_FP_man[9] + app_FOR_man[9] + app_CER_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9] + random_ARR_3_new[9] + random_ARR_4_new[9] + random_ARR_5_new[9]
                    APPORTO_Ca = app_FP_man[10] + app_FOR_man[10] + app_CER_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10] + random_ARR_3_new[10] + random_ARR_4_new[10] + random_ARR_5_new[10]
                    APPORTO_P = app_FP_man[11] + app_FOR_man[11] + app_CER_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11] + random_ARR_3_new[11] + random_ARR_4_new[11] + random_ARR_5_new[11]
                    APPORTO_UFL = app_FP_man[12] + app_FOR_man[12] + app_CER_man[12] + random_ARR_0_new[12] + random_ARR_1_new[12] + random_ARR_2_new[12] + random_ARR_3_new[12] + random_ARR_4_new[12] + random_ARR_5_new[12]


                    
                    print('')
                    print('apporti di %s:' % M)
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(app_FOR_man)
                    print('')

                    print('')
                    print('apporti di %s:' % MG)
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(app_CER_man)
                    print('')
                
                    print('apporti di %s:' % FE)
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(app_FP_man)
                    print('')

                    print('apporti di %s:' % S[0])
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(random_ARR_2_new)
                    print('')
                    print('apporti di %s:' % S[3])
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(random_ARR_3_new)
                    print('')
                    print('apporti di %s:' % S[4])
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(random_ARR_4_new)
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(random_ARR_5_new)
                    print('')
                               
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')
                    print('%f kg %s' % (QM, MG))                                         
                    print('%f kg %s' % (Q, M))
                    print('%f kg %s' % (QFP, FE))
                                            
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))
                    print('%f kg %s' % (quantità_alimento_4[0], S[3]))
                    print('%f kg %s' % (quantità_alimento_5[0], S[4]))
                    print('%f kg %s' % (quantità_alimento_6[0], S[5]))
            
            

############################################################################################################################


# CASO 2)
# FORAGGIO + FE inseriti manualmente
                  
                elif Q and QFP:


                    quantità_TOTALE_TAL_QUALE = Q + QFP + quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0] + quantità_alimento_4[0] + quantità_alimento_5[0] + quantità_alimento_6[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_FP_man[0] + app_FOR_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0] + random_ARR_3_new[0] + random_ARR_4_new[0] + random_ARR_5_new[0] 
                    APPORTO_PROTEINA_GREZZA = app_FP_man[1] + app_FOR_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1] + random_ARR_3_new[1] + random_ARR_4_new[1] + random_ARR_5_new[1]
                    APPORTO_PROTEINA_DEGRADABILE = app_FP_man[2] + app_FOR_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2] + random_ARR_3_new[2] + random_ARR_4_new[2] + random_ARR_5_new[2]
                    APPORTO_PROTEINA_INDEGRADABILE = app_FP_man[3] + app_FOR_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3] + random_ARR_3_new[3] + random_ARR_4_new[3] + random_ARR_5_new[3]
                    APPORTO_FIBRA_GREZZA = app_FP_man[4] + app_FOR_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4] + random_ARR_3_new[4] + random_ARR_4_new[4] + random_ARR_5_new[4]
                    APPORTO_NDF = app_FP_man[5] + app_FOR_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5] + random_ARR_3_new[5] + random_ARR_4_new[5] + random_ARR_5_new[5]
                    APPORTO_ADF = app_FP_man[6] + app_FOR_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6] + random_ARR_3_new[6] + random_ARR_4_new[6] + random_ARR_5_new[6]
                    APPORTO_GRASSO = app_FP_man[7] + app_FOR_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7] + random_ARR_3_new[7] + random_ARR_4_new[7] + random_ARR_5_new[7]
                    APPORTO_AMIDO = app_FP_man[8] + app_FOR_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8] + random_ARR_3_new[8] + random_ARR_4_new[8] + random_ARR_5_new[8]
                    APPORTO_ZUCCHERI = app_FP_man[9] + app_FOR_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9] + random_ARR_3_new[9] + random_ARR_4_new[9] + random_ARR_5_new[9]
                    APPORTO_Ca = app_FP_man[10] + app_FOR_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10] + random_ARR_3_new[10] + random_ARR_4_new[10] + random_ARR_5_new[10]
                    APPORTO_P = app_FP_man[11] + app_FOR_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11] + random_ARR_3_new[11] + random_ARR_4_new[11] + random_ARR_5_new[11]
                    APPORTO_UFL = app_FP_man[12] + app_FOR_man[12] + random_ARR_0_new[12] + random_ARR_1_new[12] + random_ARR_2_new[12] + random_ARR_3_new[12] + random_ARR_4_new[12] + random_ARR_5_new[12]


                       
                    print('')
                    print('apporti di %s:' % M)
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(app_FOR_man)
                    print('')
                
                    print('apporti di %s:' % FE)
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(app_FP_man)
                    print('')

                    print('apporti di %s:' % S[0])
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(random_ARR_2_new)
                    print('')
                    print('apporti di %s:' % S[3])
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(random_ARR_3_new)
                    print('')
                    print('apporti di %s:' % S[4])
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(random_ARR_4_new)
                    print('')
                    print('apporti di %s:' % S[5])
                    print('')
                    print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')
                    print(random_ARR_5_new)
                    print('')
               
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')                                    
                    print('%f kg %s' % (Q, M))
                    print('%f kg %s' % (QFP, FE))
                                        
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))
                    print('%f kg %s' % (quantità_alimento_4[0], S[3]))
                    print('%f kg %s' % (quantità_alimento_5[0], S[4]))
                    print('%f kg %s' % (quantità_alimento_6[0], S[5]))
            


############################################################################################################################


# CASO 3)
# INSILATO MAIS e MAIS GRANELLA inseriti manualmente
            
                elif Q and QM and not QFP:

                                        
                
                    quantità_TOTALE_TAL_QUALE = Q + QM + quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0] + quantità_alimento_4[0] + quantità_alimento_5[0] + quantità_alimento_6[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_CER_man[0] + app_FOR_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0] + random_ARR_3_new[0] + random_ARR_4_new[0] + random_ARR_5_new[0] 
                    APPORTO_PROTEINA_GREZZA = app_CER_man[1] + app_FOR_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1] + random_ARR_3_new[1] + random_ARR_4_new[1] + random_ARR_5_new[1]
                    APPORTO_PROTEINA_DEGRADABILE = app_CER_man[2] + app_FOR_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2] + random_ARR_3_new[2] + random_ARR_4_new[2] + random_ARR_5_new[2]
                    APPORTO_PROTEINA_INDEGRADABILE = app_CER_man[3] + app_FOR_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3] + random_ARR_3_new[3] + random_ARR_4_new[3] + random_ARR_5_new[3]
                    APPORTO_FIBRA_GREZZA = app_CER_man[4] + app_FOR_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4] + random_ARR_3_new[4] + random_ARR_4_new[4] + random_ARR_5_new[4]
                    APPORTO_NDF = app_CER_man[5] + app_FOR_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5] + random_ARR_3_new[5] + random_ARR_4_new[5] + random_ARR_5_new[5]
                    APPORTO_ADF = app_CER_man[6] + app_FOR_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6] + random_ARR_3_new[6] + random_ARR_4_new[6] + random_ARR_5_new[6]
                    APPORTO_GRASSO = app_CER_man[7] + app_FOR_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7] + random_ARR_3_new[7] + random_ARR_4_new[7] + random_ARR_5_new[7]
                    APPORTO_AMIDO = app_CER_man[8] + app_FOR_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8] + random_ARR_3_new[8] + random_ARR_4_new[8] + random_ARR_5_new[8]
                    APPORTO_ZUCCHERI = app_CER_man[9] + app_FOR_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9] + random_ARR_3_new[9] + random_ARR_4_new[9] + random_ARR_5_new[9]
                    APPORTO_Ca = app_CER_man[10] + app_FOR_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10] + random_ARR_3_new[10] + random_ARR_4_new[10] + random_ARR_5_new[10]
                    APPORTO_P = app_CER_man[11] + app_FOR_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11] + random_ARR_3_new[11] + random_ARR_4_new[11] + random_ARR_5_new[11]
                    APPORTO_UFL = app_CER_man[12] + app_FOR_man[12] + random_ARR_0_new[12] + random_ARR_1_new[12] + random_ARR_2_new[12] + random_ARR_3_new[12] + random_ARR_4_new[12] + random_ARR_5_new[12]



                    print('')
                    print('apporti di %s:' % M)
                    print('')
                    print(app_FOR_man)
                    print('')
                    print('apporti di %s:' % MG)
                    print('')
                    print(app_CER_man)
                    print('')        
                                                              
                    print('apporti di %s:' % S[0])
                    print('')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print(random_ARR_2_new)
                    print('')
                    print('apporti di %s:' % S[3])
                    print('')
                    print(random_ARR_3_new)
                    print('')
                    print('apporti di %s:' % S[4])
                    print('')
                    print(random_ARR_4_new)
                    print('')
                    print('')
                    print('apporti di %s:' % S[5])
                    print('')
                    print(random_ARR_5_new)
                    print('')
               
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')
                    print('%f kg %s' % (QM, MG))                                         
                    print('%f kg %s' % (Q, M))
                                        
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))
                    print('%f kg %s' % (quantità_alimento_4[0], S[3]))
                    print('%f kg %s' % (quantità_alimento_5[0], S[4]))
                    print('%f kg %s' % (quantità_alimento_6[0], S[5]))
            


############################################################################################################################


# CASO 4)
# SOLO FORAGGIO:
                
                elif Q and not QM and not QFP: 



                    quantità_TOTALE_TAL_QUALE = Q + quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0] + quantità_alimento_4[0] + quantità_alimento_5[0] + quantità_alimento_6[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_FOR_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0] + random_ARR_3_new[0] + random_ARR_4_new[0] + random_ARR_5_new[0] 
                    APPORTO_PROTEINA_GREZZA = app_FOR_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1] + random_ARR_3_new[1] + random_ARR_4_new[1] + random_ARR_5_new[1]
                    APPORTO_PROTEINA_DEGRADABILE = app_FOR_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2] + random_ARR_3_new[2] + random_ARR_4_new[2] + random_ARR_5_new[2]
                    APPORTO_PROTEINA_INDEGRADABILE = app_FOR_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3] + random_ARR_3_new[3] + random_ARR_4_new[3] + random_ARR_5_new[3]
                    APPORTO_FIBRA_GREZZA = app_FOR_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4] + random_ARR_3_new[4] + random_ARR_4_new[4] + random_ARR_5_new[4]
                    APPORTO_NDF = app_FOR_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5] + random_ARR_3_new[5] + random_ARR_4_new[5] + random_ARR_5_new[5]
                    APPORTO_ADF = app_FOR_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6] + random_ARR_3_new[6] + random_ARR_4_new[6] + random_ARR_5_new[6]
                    APPORTO_GRASSO = app_FOR_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7] + random_ARR_3_new[7] + random_ARR_4_new[7] + random_ARR_5_new[7]
                    APPORTO_AMIDO = app_FOR_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8] + random_ARR_3_new[8] + random_ARR_4_new[8] + random_ARR_5_new[8]
                    APPORTO_ZUCCHERI = app_FOR_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9] + random_ARR_3_new[9] + random_ARR_4_new[9] + random_ARR_5_new[9]
                    APPORTO_Ca = app_FOR_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10] + random_ARR_3_new[10] + random_ARR_4_new[10] + random_ARR_5_new[10]
                    APPORTO_P = app_FOR_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11] + random_ARR_3_new[11] + random_ARR_4_new[11] + random_ARR_5_new[11]
                    APPORTO_UFL = app_FOR_man[12] + random_ARR_0_new[12] + random_ARR_1_new[12] + random_ARR_2_new[12] + random_ARR_3_new[12] + random_ARR_4_new[12] + random_ARR_5_new[12]



                    print('')
                    print('apporti di %s:' % M)
                    print('')
                    print(app_FOR_man)
                    print('')  
                                    
                    print('apporti di %s:' % S[0])
                    print('')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print(random_ARR_2_new)
                    print('')
                    print('apporti di %s:' % S[3])
                    print('')
                    print(random_ARR_3_new)
                    print('')
                    print('apporti di %s:' % S[4])
                    print('')
                    print(random_ARR_4_new)
                    print('')
                    print('apporti di %s:' % S[5])
                    print('')
                    print(random_ARR_5_new)
                    print('')

                                                
                    print('La razione fornisce %f kg di %s' % (Q, M))
                    print('')
                    print("Prezzo dell'alimento <%s> => %f EURO/ton" % (M, prezzo_FORAGGIO_quantità))
                  
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')                   
                    print('%f kg %s' % (Q, M))
                                        
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))
                    print('%f kg %s' % (quantità_alimento_4[0], S[3]))
                    print('%f kg %s' % (quantità_alimento_5[0], S[4]))
                    print('%f kg %s' % (quantità_alimento_6[0], S[5]))
            



############################################################################################################################


# CASO 5)
# SOLO CEREALE:

                elif QM and not Q and not QFP: 



                    quantità_TOTALE_TAL_QUALE = QM + quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0] + quantità_alimento_4[0] + quantità_alimento_5[0] + quantità_alimento_6[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_CER_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0] + random_ARR_3_new[0] + random_ARR_4_new[0] + random_ARR_5_new[0] 
                    APPORTO_PROTEINA_GREZZA = app_CER_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1] + random_ARR_3_new[1] + random_ARR_4_new[1] + random_ARR_5_new[1]
                    APPORTO_PROTEINA_DEGRADABILE = app_CER_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2] + random_ARR_3_new[2] + random_ARR_4_new[2] + random_ARR_5_new[2]
                    APPORTO_PROTEINA_INDEGRADABILE = app_CER_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3] + random_ARR_3_new[3] + random_ARR_4_new[3] + random_ARR_5_new[3]
                    APPORTO_FIBRA_GREZZA = app_CER_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4] + random_ARR_3_new[4] + random_ARR_4_new[4] + random_ARR_5_new[4]
                    APPORTO_NDF = app_CER_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5] + random_ARR_3_new[5] + random_ARR_4_new[5] + random_ARR_5_new[5]
                    APPORTO_ADF = app_CER_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6] + random_ARR_3_new[6] + random_ARR_4_new[6] + random_ARR_5_new[6]
                    APPORTO_GRASSO = app_CER_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7] + random_ARR_3_new[7] + random_ARR_4_new[7] + random_ARR_5_new[7]
                    APPORTO_AMIDO = app_CER_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8] + random_ARR_3_new[8] + random_ARR_4_new[8] + random_ARR_5_new[8]
                    APPORTO_ZUCCHERI = app_CER_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9] + random_ARR_3_new[9] + random_ARR_4_new[9] + random_ARR_5_new[9]
                    APPORTO_Ca = app_CER_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10] + random_ARR_3_new[10] + random_ARR_4_new[10] + random_ARR_5_new[10]
                    APPORTO_P = app_CER_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11] + random_ARR_3_new[11] + random_ARR_4_new[11] + random_ARR_5_new[11]
                    APPORTO_UFL = app_CER_man[12] + random_ARR_0_new[12] + random_ARR_1_new[12] + random_ARR_2_new[12] + random_ARR_3_new[12] + random_ARR_4_new[12] + random_ARR_5_new[12]



                    print('')
                    print('apporti di %s:' % MG)
                    print('')
                    print(app_CER_man)
                    print('')  
                                
                    print('apporti di %s:' % S[0])
                    print('')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print(random_ARR_2_new)
                    print('')
                    print('apporti di %s:' % S[3])
                    print('')
                    print(random_ARR_3_new)
                    print('')
                    print('apporti di %s:' % S[4])
                    print('')
                    print(random_ARR_4_new)
                    print('')
                    print('')
                    print('apporti di %s:' % S[5])
                    print('')
                    print(random_ARR_5_new)
                    print('')
                
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')
                    print('%f kg %s' % (QM, MG))                                         
                                        
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))
                    print('%f kg %s' % (quantità_alimento_4[0], S[3]))
                    print('%f kg %s' % (quantità_alimento_5[0], S[4]))
                    print('%f kg %s' % (quantità_alimento_6[0], S[5]))
            



############################################################################################################################

# CASO 6)
# NESSUN ALIMENTO INSERITO MANUALMENTE

                else:


                    quantità_TOTALE_TAL_QUALE = quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0] + quantità_alimento_4[0] + quantità_alimento_5[0] + quantità_alimento_6[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0] + random_ARR_3_new[0] + random_ARR_4_new[0] + random_ARR_5_new[0]  
                    APPORTO_PROTEINA_GREZZA = random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1] + random_ARR_3_new[1] + random_ARR_4_new[1] + random_ARR_5_new[1]
                    APPORTO_PROTEINA_DEGRADABILE = random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2] + random_ARR_3_new[2] + random_ARR_4_new[2] + random_ARR_5_new[2]
                    APPORTO_PROTEINA_INDEGRADABILE = random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3] + random_ARR_3_new[3] + random_ARR_4_new[3] + random_ARR_5_new[3]
                    APPORTO_FIBRA_GREZZA = random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4] + random_ARR_3_new[4] + random_ARR_4_new[4] + random_ARR_5_new[4]
                    APPORTO_NDF = random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5] + random_ARR_3_new[5] + random_ARR_4_new[5] + random_ARR_5_new[5]
                    APPORTO_ADF = random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6] + random_ARR_3_new[6] + random_ARR_4_new[6] + random_ARR_5_new[6]
                    APPORTO_GRASSO = random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7] + random_ARR_3_new[7] + random_ARR_4_new[7] + random_ARR_5_new[7]
                    APPORTO_AMIDO = random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8] + random_ARR_3_new[8] + random_ARR_4_new[8] + random_ARR_5_new[8]
                    APPORTO_ZUCCHERI = random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9] + random_ARR_3_new[9] + random_ARR_4_new[9] + random_ARR_5_new[9]
                    APPORTO_Ca = random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10] + random_ARR_3_new[10] + random_ARR_4_new[10] + random_ARR_5_new[10]
                    APPORTO_P = random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11] + random_ARR_3_new[11] + random_ARR_4_new[11] + random_ARR_5_new[11]
                    APPORTO_UFL = random_ARR_0_new[12] + random_ARR_1_new[12] + random_ARR_2_new[12] + random_ARR_3_new[12] + random_ARR_4_new[12] + random_ARR_5_new[12]


                    print('apporti di %s:' % S[0])
                    print('')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print(random_ARR_2_new)
                    print('')
                    print('apporti di %s:' % S[3])
                    print('')
                    print(random_ARR_3_new)
                    print('')
                    print('apporti di %s:' % S[4])
                    print('')
                    print(random_ARR_4_new)
                    print('')
                    print('apporti di %s:' % S[5])
                    print('')
                    print(random_ARR_5_new)
                    print('')


                
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')
                                                                              
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))
                    print('%f kg %s' % (quantità_alimento_4[0], S[3]))
                    print('%f kg %s' % (quantità_alimento_5[0], S[4]))
                    print('%f kg %s' % (quantità_alimento_6[0], S[5]))
            

          
############################################################################################################################

#           if metodo == '_CNCPS_':
                    
                A = []
                A.append(APPORTO_DEFINITIVO_SOSTANZA_SECCA)
                A.append(APPORTO_PROTEINA_GREZZA)
                A.append(APPORTO_PROTEINA_DEGRADABILE)
                A.append(APPORTO_PROTEINA_INDEGRADABILE)
                A.append(APPORTO_FIBRA_GREZZA)
                A.append(APPORTO_NDF)
                A.append(APPORTO_ADF)
                A.append(APPORTO_GRASSO)
                A.append(APPORTO_AMIDO)
                A.append(APPORTO_ZUCCHERI)
                A.append(APPORTO_Ca)
                A.append(APPORTO_P)
                A.append(APPORTO_UFL)
        
                with open('%s.txt' % nome_file_apporti, 'w') as external_file:
                    print(A, file=external_file)
                external_file.close()
        
                DELTA_SOSTANZA_SECCA = APPORTO_DEFINITIVO_SOSTANZA_SECCA - F[0]
                DELTA_PROTEINA_GREZZA = APPORTO_PROTEINA_GREZZA - F[1]
                DELTA_PROTEINA_DEGRADABILE = APPORTO_PROTEINA_DEGRADABILE - F[2]
                DELTA_PROTEINA_INDEGRADABILE = APPORTO_PROTEINA_INDEGRADABILE - F[3]
                DELTA_FIBRA_GREZZA = APPORTO_FIBRA_GREZZA - F[4]
                DELTA_NDF = APPORTO_NDF - F[5]
                DELTA_ADF = APPORTO_ADF - F[6]
                DELTA_GRASSO = APPORTO_GRASSO - F[7]
                DELTA_AMIDO = APPORTO_AMIDO - F[8]
                DELTA_ZUCCHERI = APPORTO_ZUCCHERI - F[9]
                DELTA_Ca = APPORTO_Ca - F[10]
                DELTA_P = APPORTO_P - F[11]
                DELTA_UFL = APPORTO_UFL - F[12]
        
                              
                print('')
                print('')
                if i == N_repl-1:
                    print('Il calcolo della razione non ha avuto SUCCESSO; per favore cancella gli alimenti inseriti e riprova.')
                elif i < N_repl-1:
                    print('Il CALCOLO DELLA RAZIONE è stato effettuato con SUCCESSO alla %d^ replica!' % i)        
                print('')
        
                        
                print("Il FABBISOGNO DI SOSTANZA SECCA (che dev'essere soddisfatto dagli alimenti aggiunti) delle bovine del gruppo <%s> è di %f kg" %  (gruppo, F_arr[0]))
                print('')
                print("L'APPORTO DI SOSTANZA SECCA degli alimenti selezionati è di %f kg" % APPORTO_SOSTANZA_SECCA)
                print('')
                

                print('')        
                print('LEGENDA')
                print('')
                print("DM => Dry Matter (Apporto di Sostanza Secca)")
                print("CP => Crude Protein (Apporto di PROTEINA GREZZA)")
                print("RDP => Rumen Degradable Protein (Apporto di PROTEINA DEGRADABILE)")
                print("RUP => Rumen Undegradable Protein (Apporto di PROTEINA INDEGRADABILE)")
                print("FG => FIBRA GREZZA (apporto di FIBRA GREZZA)")
                print("NDF => NDF (apporto di Fibra resistente al Detergente Neutro)")
                print("ADF => ADF (apporto di Fibra resistente al Detergente Acido)")
                print("FAT => Fat (apporto di GRASSO)")
                print("AM => AMIDO (apporto di AMIDO)")
                print("ZUC => ZUCCHERI (apporto di ZUCCHERI)")
                print("Ca => Calcio (apporto di Calcio)")
                print("P => Fosforo (apporto di Fosforo)")
                print("UFL => Unità Foraggere Latte (apporto di Energia Netta)")
                print('')
                print('')
                print('DMI','   CP','  RDP', '   RUP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL')


                if len(PREZZI) == len(S):

                    print('')
                    for i in list(range(len(PREZZI))):
                        print("Prezzo dell'alimento <%s> => %f EURO/ton" % (S[i], PREZZI[i]))
                    print('')
                    print('********************************************************************')
                    print('')
                else:
                    print('Impossibile creare la TABELLA DEI PREZZI: ci sono uno o più alimenti non quotati!')


            
                if len(PREZZI) == len(S):

            
                    costo_alimento_1 = quantità_alimento_1[0] * PREZZI[0] / 1000
                    costo_alimento_2 = quantità_alimento_2[0] * PREZZI[1] / 1000
                    costo_alimento_3 = quantità_alimento_3[0] * PREZZI[2] / 1000
                    costo_alimento_4 = quantità_alimento_4[0] * PREZZI[3] / 1000
                    costo_alimento_5 = quantità_alimento_5[0] * PREZZI[4] / 1000
                    costo_alimento_6 = quantità_alimento_6[0] * PREZZI[5] / 1000
            
                    COSTO_RAZIONE = []            
                    COSTO_RAZIONE.append(costo_alimento_1)
                    COSTO_RAZIONE.append(costo_alimento_2)
                    COSTO_RAZIONE.append(costo_alimento_3)
                    COSTO_RAZIONE.append(costo_alimento_4)
                    COSTO_RAZIONE.append(costo_alimento_5)
                    COSTO_RAZIONE.append(costo_alimento_6)

            
                    if Q and not QM and not QFP:
                            
                        if type(costo_FORAGGIO_quantità) is float: 
                            COSTO_RAZIONE.append(costo_FORAGGIO_quantità)
                            print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[3], costo_alimento_4))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[4], costo_alimento_5))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[5], costo_alimento_6))
                            print("Costo dell'alimento <%s>: %f EURO" % (M, costo_FORAGGIO_quantità))

                        else:
                            print("Il prezzo dell'alimento <%s> non è disponibile!" % M) 

                
                    elif QM and not Q and not QFP:                
                
                        if type(costo_CEREALE_quantità) is float:
                            COSTO_RAZIONE.append(costo_CEREALE_quantità)  
                            print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[3], costo_alimento_4))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[4], costo_alimento_5))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[5], costo_alimento_6))
                            print("Costo dell'alimento <%s>: %f EURO" % (MG, costo_CEREALE_quantità))

                        else:
                            print("Il prezzo dell'alimento <%s> non è disponibile!" % MG) 

            
                    elif QFP and not Q and not QM:
                
                        if type(costo_FONTE_PROTEICA_quantità) is float:
                            COSTO_RAZIONE.append(costo_FONTE_PROTEICA_quantità)
                            print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[3], costo_alimento_4))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[4], costo_alimento_5))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[5], costo_alimento_6))
                            print("Costo dell'alimento <%s>: %f EURO" % (FE, costo_FONTE_PROTEICA_quantità))
                        else:
                            print("Il prezzo dell'alimento <%s> non è disponibile!" % FE)

            
                    elif Q and QM and not QFP:
                
                        if type(costo_FORAGGIO_quantità) is float and type(costo_CEREALE_quantità) is float: 
                            COSTO_RAZIONE.append(costo_FORAGGIO_quantità)
                            COSTO_RAZIONE.append(costo_CEREALE_quantità)  
                            print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[3], costo_alimento_4))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[4], costo_alimento_5))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[5], costo_alimento_6))                     
                            print("Costo dell'alimento <%s>: %f EURO" % (M, costo_FORAGGIO_quantità))
                            print("Costo dell'alimento <%s>: %f EURO" % (MG, costo_CEREALE_quantità))                        
                    
                        else:
                            print("Il prezzo dell'alimento <%s> e/o dell'alimento <%s> non è disponibile!" % (M, MG))

            
                    elif Q and QFP:
                    
                        if type(costo_FORAGGIO_quantità) is float and type(costo_FONTE_PROTEICA_quantità) is float:  
                            COSTO_RAZIONE.append(costo_FORAGGIO_quantità)
                            COSTO_RAZIONE.append(costo_FONTE_PROTEICA_quantità)
                            print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[3], costo_alimento_4))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[4], costo_alimento_5))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[5], costo_alimento_6))                     
                            print("Costo dell'alimento <%s>: %f EURO" % (M, costo_FORAGGIO_quantità))
                            print("Costo dell'alimento <%s>: %f EURO" % (FE, costo_FONTE_PROTEICA_quantità))

                        else:
                            print("Il prezzo dell'alimento <%s> e/o dell'alimento <%s> non è disponibile!" % (M, FE))

                
                    elif QM and QFP and not Q:
                
                        if type(costo_CEREALE_quantità) is float and type(costo_FONTE_PROTEICA_quantità) is float:
                            COSTO_RAZIONE.append(costo_CEREALE_quantità) 
                            COSTO_RAZIONE.append(costo_FONTE_PROTEICA_quantità)
                            print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[3], costo_alimento_4))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[4], costo_alimento_5))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[5], costo_alimento_6))                     
                            print("Costo dell'alimento <%s>: %f EURO" % (MG, costo_CEREALE_quantità))
                            print("Costo dell'alimento <%s>: %f EURO" % (FE, costo_FONTE_PROTEICA_quantità)) 
                        else:
                            print("Il prezzo dell'alimento <%s> e/o dell'alimento <%s> non è disponibile!" % (MG, FE))
                                           
                   
                    elif Q and QM and QFP:
                        if type(costo_FORAGGIO_quantità) is float and type(costo_CEREALE_quantità) is float and type(costo_FONTE_PROTEICA_quantità) is float:
                            COSTO_RAZIONE.append(costo_FORAGGIO_quantità)
                            COSTO_RAZIONE.append(costo_CEREALE_quantità)                                   
                            COSTO_RAZIONE.append(costo_FONTE_PROTEICA_quantità)

                            print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[3], costo_alimento_4))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[4], costo_alimento_5))
                            print("Costo dell'alimento <%s>: %f EURO" % (S[5], costo_alimento_6))
                            print("Costo dell'alimento <%s>: %f EURO" % (M, costo_FORAGGIO_quantità))                     
                            print("Costo dell'alimento <%s>: %f EURO" % (MG, costo_CEREALE_quantità))
                            print("Costo dell'alimento <%s>: %f EURO" % (FE, costo_FONTE_PROTEICA_quantità)) 
                        else:
                            print("Il prezzo dell'alimento <%s> e/o dell'alimento <%s> e/o dell'alimento <%s> non è disponibile!" % (M, MG, FE))
                                           
                    COSTO_TOTALE = sum(COSTO_RAZIONE)
                    print('')
                    print('Il costo della razione è %f EURO' % COSTO_TOTALE)
                    if COSTO_TOTALE > PREZZO_MAX:
                        print('Il COSTO TOTALE della razione è > del PREZZO MASSIMO che hai impostato!')
                        print('Prova a scegliere altri alimenti e ricalcola la RAZIONE')
            
            
                else:
                    print('Non posso calcolare il COSTO DELLA RAZIONE: ci sono uno o più alimenti non quotati!') 
            
            
                print('')                
                print('La razione fornisce %f kg di alimento tal quale' % quantità_TOTALE_TAL_QUALE)
                print('La razione fornisce %f kg di Sostanza Secca' % APPORTO_DEFINITIVO_SOSTANZA_SECCA)
                print('')
                print('')
                print('_______________________________________________________________________________________________')
                print('|                         |                    |                         |                    |')
                print('|                         |                    |                         |                    |')
                print('|   PRINCIPIO NUTRITIVO   |      APPORTO       |       Fabbisogno        |     DIFFERENZA     |')
                print('|                         |                    |                         |                    |')
                print('|_________________________|____________________|_________________________|____________________|')
                print('|      Sostanza Secca     |     %f kg   |  %f kg           |  %f kg       |' % (APPORTO_DEFINITIVO_SOSTANZA_SECCA, F[0], DELTA_SOSTANZA_SECCA))
                print('|      PROTEINA GREZZA    |   %f g    |%f g            |%f g        |' % (APPORTO_PROTEINA_GREZZA, F[1], DELTA_PROTEINA_GREZZA))
                print('|   PROTEINA DEGRADABILE  |   %f g    |%f g            |%f g        |' % (APPORTO_PROTEINA_DEGRADABILE, F[2], DELTA_PROTEINA_DEGRADABILE))
                print('| PROTEINA INDEGRADABILE  |   %f g    |%f g            |%f g        |' % (APPORTO_PROTEINA_INDEGRADABILE, F[3], DELTA_PROTEINA_INDEGRADABILE))
                print('|      FIBRA GREZZA       |   %f g    |%f g            |%f g        |' % (APPORTO_FIBRA_GREZZA, F[4], DELTA_FIBRA_GREZZA))
                print('|           NDF           |   %f g    |%f g            |%f g        |' % (APPORTO_NDF, F[5], DELTA_NDF))
                print('|           ADF           |   %f g    |%f g            |%f g        |' % (APPORTO_ADF, F[6], DELTA_ADF))
                print('|         GRASSO          |   %f g    |%f g            |%f g        |' % (APPORTO_GRASSO, F[7], DELTA_GRASSO)) 
                print('|          AMIDO          |   %f g    |%f g            |%f g        |' % (APPORTO_AMIDO, F[8], DELTA_AMIDO))
                print('|        ZUCCHERI         |    %f g    |%f g            |%f g       |' % (APPORTO_ZUCCHERI, F[9], DELTA_ZUCCHERI))
                print('|           Ca            |   %f g      |  %f g           |  %f g     |' % (APPORTO_Ca, F[10], DELTA_Ca))        
                print('|            P            |   %f g      |  %f g            |  %f g      |' % (APPORTO_P, F[11], DELTA_P))        
                print('|           UFL           |     %f      | %f               | %f           |' % (APPORTO_UFL, F[12], DELTA_UFL))        
                print('_______________________________________________________________________________________________')
                print('')
                print('                                               *     *     *                                   ')
                print('')
                print('')
                print('')
                print('******************************************** SOSTANZA SECCA ********************************************')
                print('')
                print('La razione fornisce %f kg di alimento tal quale' % quantità_TOTALE_TAL_QUALE)
                print('')
                print('La razione fornisce %f kg di Sostanza Secca' % APPORTO_DEFINITIVO_SOSTANZA_SECCA)                
                print('')
                DMI_AS_FED_ratio = (APPORTO_DEFINITIVO_SOSTANZA_SECCA/quantità_TOTALE_TAL_QUALE)*100
                print('La tua RAZIONE contiene il %fx100 di SOSTANZA SECCA' % DMI_AS_FED_ratio)
                print('')
                if DMI_AS_FED_ratio < 0.6:
                    print('')
                    print('In estate, in caso di COMPETIZIONE ALIMENTARE x un N° INSUFFICIENTE DI AUTOCATTURANTI (= BOVINE IN PIEDI),')
                    print('se prepari un CARRO MISCELATORE con, per es., un 10x100 in più di razioni (per es., con 100')
                    print('BOVINE IN LATTAZIONE metto nel carro 110 RAZIONI), dal momento che la miscelata rimarrà per più tempo in')
                    print('mangiatoia, potrebbe scaldarsi!')
                    print("Prova a RIDURRE UN PO' L'APPORTO COMPLESSIVO DI FORAGGIO, insilato, per aumentare la SS della razione,")
                    print("o fieno (dipende da che tipo di FORAGGIo hai inserito manualmente), per forzare il programma ad")
                    print("AUMENTARE L'APPORTO DELLA FONTE DI FIBRA DIGERIBILE")
                    print("In questo modo, si dovrebbe attenuare la riduzione dell'ingestione volontaria di fibra scarsamente")
                    print("digeribile (poiché più o meno lignificata), nonché il conseguente CALO DEL TENORE IN GRASSO del latte")
                    print("Tieni anche conto del fatto che, riducendo l'apporto della cosiddetta <FIBRA FISICAMENTE EFFICACE>")
                    print("(quella dei FORAGGI, che fa ruminare), LE BOVINE PRODURRANNO MENO SALIVA (che è il tampone naturale")
                    print("del rumine) e, quindi, dovrai valutare l'inserimento di un TAMPONE ARTIFICIALE, come il bicarbonato")
                    print("di calcio o di sodio, nella razione")    
                print('')
                print('')
                print('******************************************** PROTEINA GREZZA ********************************************')
                print('')
                APPORTO_DEFINITIVO_SOSTANZA_SECCA_g = APPORTO_DEFINITIVO_SOSTANZA_SECCA * 1000
                CP_DMI_ratio = APPORTO_PROTEINA_GREZZA/APPORTO_DEFINITIVO_SOSTANZA_SECCA_g
                print('Rapporto (PROTEINA GREZZA : Sostanza Secca) => %f' % CP_DMI_ratio)
                print('')
                print("Secondo Dell'Orto e Savoini, ad inizio lattazione dovrebbe essere ~ 0.18 (18%)")
                print('')
                if CP_DMI_ratio <= 0.17:
                    print("L'apporto di PROTEINA GREZZA è insufficiente")
                    print("Se avevi scelto una fonte proteica diversa dalla <F.E. DI SOIA>, sostituiscila con quest'ultima!")
                    print("Se non basta, prova a sostituire il fieno di prato stabile o l'insilato di loietto con il <FIENO DI ERBA MEDICA e/o a ridurre l'apporto di insilato (o di pastone) di mais>")         
                print('')
                print('')
                print('********************************************** FIBRA GREZZA **********************************************')
                print('')                       
                FG_DMI_ratio = APPORTO_FIBRA_GREZZA/APPORTO_DEFINITIVO_SOSTANZA_SECCA_g
                print('')                     
                FG_DMI_ratio = APPORTO_FIBRA_GREZZA/APPORTO_DEFINITIVO_SOSTANZA_SECCA_g
                print('')
                print('Rapporto (FIBRA GREZZA : Sostanza Secca) => %f' % FG_DMI_ratio)
                print('')
                print('Dovrebbe essere ~ 0.17 (17%)')
                print('')
                # print('********************************************** NDF **********************************************')  
                APPORTO_NDF_FORAGGI = app_FOR_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3]
                NDF_FORAGGI_NDF_tot_ratio = APPORTO_NDF_FORAGGI/APPORTO_NDF
#           print('Rapporto (NDF da FORAGGI : NDF totale) => %f' % NDF_FORAGGI_NDF_tot_ratio)
#           print('')
#           print('Dovrebbe essere ~ 0.75 (75%)')
                print('')
                print('')           
                print('')
                print('***********************************************************************************************************')
                print('********************************************* FINE DEL REPORT *********************************************')
                print('***********************************************************************************************************')
                
                sys.stdout = original


############################################################################################################################
###################### 6 alimenti auto - metodo => <LYS_MET> INIZIO DEL REDIREZIONAMENTO DELLA STAMPA ######################
############################################################################################################################

                                                    ### 6 ALIMENTI AUTO ###


            elif metodo == 'LYS_MET':



                original = sys.stdout
                sys.stdout = open('%s.txt' % nome_file_razione, 'w')

                
                print('PARAMETRI inseriti da %s, %s %s alle ore %s' % (user, giorno_di_inserimento, data_di_inserimento, ora_di_inserimento))
                print('') 
                print('METODO DI CALCOLO della razione => <%s>' % metodo)
                print('PESO MEDIO ALLA NASCITA => %f kg' % calf_weight)
                print('PESO VIVO MEDIO BOVINE IN LATTAZIONE => %f kg' % LW)
                print('ETÀ MEDIA BOVINE IN LATTAZIONE => %d mesi' % cow_age)
                print('SETTIMANA DI LATTAZIONE media => %d^' % WOL)
                print('SETTIMANA DI GRAVIDANZA media => %d^' % WOP)
                print('LIVELLO PRODUTTIVO medio => %f kg di latte al giorno' % MY)
                print('TENORE DI GRASSO del latte => %fx100' % FAT_milk)
                print('TENORE DI PROTEINA del latte => %fx100' % CP_milk)
                print('TENORE DI LATTOSIO del latte => %fx100' % LAC_milk)
                print('N° DI REPLICHE => %d' % N_repl)
        

                F = []
                F.append(DMI)
                F.append(CP)
                F.append(FG)
                F.append(NDF)
                F.append(ADF)
                F.append(FAT)
                F.append(AM)
                F.append(ZUC)
                F.append(Ca_tot)
                F.append(P_tot)
                F.append(UFL_tot)
                F.append(PDI)


# STAMPA FABBISOGNI LYS_MET

                print('')
                print('')
                print('FABBISOGNI calcolati secondo il METODO <INRA %s>' % metodo)
                print('')
                print('CAPACITÀ DI INGESTIONE => %f kg di Sostanza Secca' % F[0])
                print('Fabbisogno di PROTEINA GREZZA => %f g' % F[1])
                print('Fabbisogno di FIBRA GREZZA => %f g' % F[2])
                print('Fabbisogno di NDF => %f g' % F[3])
                print('Fabbisogno di ADF => %f g' % F[4]) 
                print('Fabbisogno di GRASSO => %f g' % F[5])
                print('Fabbisogno di AMIDO => %f g' % F[6])
                print('Fabbisogno di ZUCCHERI => %f g' % F[7])
                print('Fabbisogno di CALCIO => %f g' % F[8])
                print('Fabbisogno di FOSFORO => %f g' % F[9])
                print('Fabbisogno di ENERGIA NETTA => %f Unità Foraggere Latte' % F[10])
                print('Fabbisogno di PROTEINA  DIGERIBILE INTESTINALE => %f g' % F[11])
                print('')
                


############################################################################################################################
################################### SINGOLI CASI MANTENUTI PER EVENTUALI SVILUPPI FUTURI ###################################
############################################################################################################################



############################################################################################################################            
# METODO <LYS_MET>
# 6 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 1)
# FORAGGIO + MAIS GRANELLA + FONTE PROTEICA inseriti manualmente
# 3 alimenti inseriti manualmente + 6 alimenti inseriti in automatico => TOT 9

                if Q and QM and QFP:
                                           
                    F_arr = F_arr_ricalcolato_QM_FE
                
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI>, <CEREALI> e <FONTI PROTEICHE>')
                    print('')
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DM in kg, ENERGIA NETTA in UFL, tutti gli altri PARAMETRI (CP, FG, NDF, ADF, FAT, AM, ZUC, Ca, P e PDI) in grammi') 
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                              
                    print(F_arr)



############################################################################################################################            
# METODO <LYS_MET>
# 5 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 2)
# FORAGGIO + FONTE PROTEICA inseriti manualmente
# 2 alimenti inseriti manualmente + 5 alimenti inseriti in automatico => TOT 7

                elif Q and QFP:

                    
                    F_arr = F_arr_ricalcolato_FE
                    
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI> e <FONTI PROTEICHE>')      
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(F_arr)
                        
                

############################################################################################################################            
# METODO <LYS_MET>
# 5 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 3)
# FORAGGIO + CEREALE inseriti manualmente
# 2 alimenti inseriti manualmente + 5 alimenti inseriti in automatico => TOT 7

                elif Q and QM and not QFP:

                    F_arr = F_arr_ricalcolato
        
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI> e <CEREALI>')
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')                    
                    print(F_arr)
                                     
            

############################################################################################################################            
# METODO <LYS_MET>
# 5 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 4)
# FORAGGIO inserito manualmente
# 1 alimento inserito manualmente + 5 alimenti inseriti in automatico => TOT 6

                elif Q and not QM and not QFP:
        

                    F_arr = F_arr_FORAGGIo
        
                    print('Hai inserito manualmente solo un alimento della categoria <FORAGGI>')
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(F_arr)



############################################################################################################################            
# METODO <LYS_MET>
# 5 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 5)
# CEREALE inserito manualmente
# 1 alimento inserito manualmente + 5 alimenti inseriti in automatico => TOT 6

                elif QM and not Q and not QFP:                                
            
                    F_arr = F_arr_cereale
                     
                    print('Hai inserito manualmente solo un alimento della categoria <CEREALI>')
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(F_arr)



############################################################################################################################            
# METODO <LYS_MET>
# 5 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 6)
# FONTE PROTEICA inserita manualmente
# 1 alimento inserito manualmente + 5 alimenti inseriti in automatico => TOT 6

                elif QFP and not Q and not QM:
                        
            
                    F_arr = F_arr_FE
                     
                    print('Hai inserito manualmente solo un alimento della categoria <FONTI PROTEICHE>')
                    print('Fabbisogni che dovranno essere soddisfatti dagli alimenti aggiunti')
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(F_arr)


############################################################################################################################            
# METODO <LYS_MET>
# 5 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 7)
# NESSUN ALIMENTO inserito manualmente
# 0 alimenti inseriti manualmente + 5 alimenti inseriti in automatico => TOT 5

                else:

                    F_arr = F_arr
        
                    print('Nessun alimento inserito manualmente')


                print('')
                print("L'apporto di Sostanza Secca degli alimenti selezionati è %f" % APPORTO_SOSTANZA_SECCA)
                print('')
                


############################################################################################################################            
# METODO <LYS_MET>
# 6 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 1)
# FORAGGIO + MAIS GRANELLA + FONTE PROTEICA inseriti manualmente
# 3 alimenti inseriti manualmente + 6 alimenti inseriti in automatico => TOT 9


                if Q and QM and QFP:
                
                
                
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI>, <CEREALI> e <FONTI PROTEICHE>')
                

                    quantità_TOTALE_TAL_QUALE = Q + QM + QFP + quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0] + quantità_alimento_4[0] + quantità_alimento_5[0] + quantità_alimento_6[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_FP_man[0] + app_FOR_man[0] + app_CER_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0] + random_ARR_3_new[0] + random_ARR_4_new[0] + random_ARR_5_new[0] 
                    APPORTO_PROTEINA_GREZZA = app_FP_man[1] + app_FOR_man[1] + app_CER_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1] + random_ARR_3_new[1] + random_ARR_4_new[1] + random_ARR_5_new[1]
                    APPORTO_FIBRA_GREZZA = app_FP_man[2] + app_FOR_man[2] + app_CER_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2] + random_ARR_3_new[2] + random_ARR_4_new[2] + random_ARR_5_new[2]
                    APPORTO_NDF = app_FP_man[3] + app_FOR_man[3] + app_CER_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3] + random_ARR_3_new[3] + random_ARR_4_new[3] + random_ARR_5_new[3]
                    APPORTO_ADF = app_FP_man[4] + app_FOR_man[4] + app_CER_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4] + random_ARR_3_new[4] + random_ARR_4_new[4] + random_ARR_5_new[4]
                    APPORTO_GRASSO = app_FP_man[5] + app_FOR_man[5] + app_CER_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5] + random_ARR_3_new[5] + random_ARR_4_new[5] + random_ARR_5_new[5]
                    APPORTO_AMIDO = app_FP_man[6] + app_FOR_man[6] + app_CER_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6] + random_ARR_3_new[6] + random_ARR_4_new[6] + random_ARR_5_new[6]
                    APPORTO_ZUCCHERI = app_FP_man[7] + app_FOR_man[7] + app_CER_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7] + random_ARR_3_new[7] + random_ARR_4_new[7] + random_ARR_5_new[7]
                    APPORTO_Ca = app_FP_man[8] + app_FOR_man[8] + app_CER_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8] + random_ARR_3_new[8] + random_ARR_4_new[8] + random_ARR_5_new[8]
                    APPORTO_P = app_FP_man[9] + app_FOR_man[9] + app_CER_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9] + random_ARR_3_new[9] + random_ARR_4_new[9] + random_ARR_5_new[9]
                    APPORTO_UFL = app_FP_man[10] + app_FOR_man[10] + app_CER_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10] + random_ARR_3_new[10] + random_ARR_4_new[10] + random_ARR_5_new[10]
                    APPORTO_PDI = app_FP_man[11] + app_FOR_man[11] + app_CER_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11] + random_ARR_3_new[11] + random_ARR_4_new[11] + random_ARR_5_new[11]
                

                   
                    print('')
                    print('apporti di %s:' % M)
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(app_FOR_man)
                    print('')

                    print('')
                    print('apporti di %s:' % MG)
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(app_CER_man)
                    print('')
                    
                    print('apporti di %s:' % FE)
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(app_FP_man)
                    print('')

                    print('apporti di %s:' % S[0])
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(random_ARR_2_new)
                    print('')
                    print('apporti di %s:' % S[3])
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(random_ARR_3_new)
                    print('')
                    print('apporti di %s:' % S[4])
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(random_ARR_4_new)
                    print('')                                                
                    print('apporti di %s:' % S[5])
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(random_ARR_5_new)
                    print('')
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')
                                                                     
                    print('%f kg %s' % (Q, M))
                    print('%f kg %s' % (QM, MG))
                    print('%f kg %s' % (QFP, FE))
                                                
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))
                    print('%f kg %s' % (quantità_alimento_4[0], S[3]))
                    print('%f kg %s' % (quantità_alimento_5[0], S[4]))
                    print('%f kg %s' % (quantità_alimento_6[0], S[5]))

                                
                    app_PDIE_man = Q_PDIE + QM_PDIE + QFP_PDIE
                    app_PDIN_man = Q_PDIN + QM_PDIN + QFP_PDIN
                    app_LysDI_man = Q_LysDI + QM_LysDI + QFP_LysDI
                    app_MetDI_man = Q_MetDI + QM_MetDI + QFP_MetDI


                    quantità.append(Q)
                    quantità.append(QM)
                    quantità.append(QFP)
                    quantità.append(quantità_alimento_1[0])
                    quantità.append(quantità_alimento_2[0])
                    quantità.append(quantità_alimento_3[0])
                    quantità.append(quantità_alimento_4[0])
                    quantità.append(quantità_alimento_5[0])
                    quantità.append(quantità_alimento_6[0]) 
                    
                    quantità = np.array(quantità)
                    print(quantità)
                    
                    LISINA_TOT = np.sum(LISINA*quantità)
                    METIONINA_TOT = np.sum(METIONINA*quantità)
                    PDIE_TOT = np.sum(PDIE*quantità)
                    PDIN_TOT = np.sum(PDIN*quantità)
                    
                    LYS_MET_ratio = LISINA_TOT/METIONINA_TOT
                    LysDI_ratio = LISINA_TOT/PDIN_TOT
                    MetDI_ratio = METIONINA_TOT/PDIN_TOT
                    
                    
                    print('')
                    print('Apporto TOTALE PDIE => %f g' % PDIE_TOT)
                    print('')
                    print('Apporto TOTALE PDIN => %f g' % PDIN_TOT)
                    print('')
                    print('Rapporto LISINA / METIONINA => %f' % LYS_MET_ratio)
                    print('')
                    print('Rapporto LISINA / PROTEINA DIGERIBILE => %f' % LysDI_ratio)
                    print('')
                    print('Rapporto METIONINA / PROTEINA DIGERIBILE => %f' % MetDI_ratio)
                    print('')

                    

############################################################################################################################            
# METODO <LYS_MET>
# 6 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 2)
# FORAGGIO + FONTE PROTEICA inseriti manualmente
# 2 alimenti inseriti manualmente + 6 alimenti inseriti in automatico => TOT 8
  
                elif Q and QFP:
                
                
                
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI> e <FONTI PROTEICHE>')


                    quantità_TOTALE_TAL_QUALE = Q + QFP + quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0] + quantità_alimento_4[0] + quantità_alimento_5[0] + quantità_alimento_6[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_FP_man[0] + app_FOR_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0] + random_ARR_3_new[0] + random_ARR_4_new[0] + random_ARR_5_new[0] 
                    APPORTO_PROTEINA_GREZZA = app_FP_man[1] + app_FOR_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1] + random_ARR_3_new[1] + random_ARR_4_new[1] + random_ARR_5_new[1]
                    APPORTO_FIBRA_GREZZA = app_FP_man[2] + app_FOR_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2] + random_ARR_3_new[2] + random_ARR_4_new[2] + random_ARR_5_new[2]
                    APPORTO_NDF = app_FP_man[3] + app_FOR_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3] + random_ARR_3_new[3] + random_ARR_4_new[3] + random_ARR_5_new[3]
                    APPORTO_ADF = app_FP_man[4] + app_FOR_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4] + random_ARR_3_new[4] + random_ARR_4_new[4] + random_ARR_5_new[4]
                    APPORTO_GRASSO = app_FP_man[5] + app_FOR_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5] + random_ARR_3_new[5] + random_ARR_4_new[5] + random_ARR_5_new[5]
                    APPORTO_AMIDO = app_FP_man[6] + app_FOR_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6] + random_ARR_3_new[6] + random_ARR_4_new[6] + random_ARR_5_new[6]
                    APPORTO_ZUCCHERI = app_FP_man[7] + app_FOR_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7] + random_ARR_3_new[7] + random_ARR_4_new[7] + random_ARR_5_new[7]
                    APPORTO_Ca = app_FP_man[8] + app_FOR_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8] + random_ARR_3_new[8] + random_ARR_4_new[8] + random_ARR_5_new[8]
                    APPORTO_P = app_FP_man[9] + app_FOR_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9] + random_ARR_3_new[9] + random_ARR_4_new[9] + random_ARR_5_new[9]
                    APPORTO_UFL = app_FP_man[10] + app_FOR_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10] + random_ARR_3_new[10] + random_ARR_4_new[10] + random_ARR_5_new[10]
                    APPORTO_PDI = app_FP_man[11] + app_FOR_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11] + random_ARR_3_new[11] + random_ARR_4_new[11] + random_ARR_5_new[11]

                    
                    print('')
                    print('apporti di %s:' % M)
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(app_FOR_man)
                    print('')
                    
                    print('apporti di %s:' % FE)
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(app_FP_man)
                    print('')

                    print('apporti di %s:' % S[0])
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(random_ARR_2_new)
                    print('')
                    print('apporti di %s:' % S[3])
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(random_ARR_3_new)
                    print('')
                    print('apporti di %s:' % S[4])
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(random_ARR_4_new)
                    print('')                                                
                    print('apporti di %s:' % S[5])
                    print('')
                    print('DM','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PDI')
                    print(random_ARR_5_new)                
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')                                            
                    print('%f kg %s' % (Q, M))
                    print('%f kg %s' % (QFP, FE))
                                                
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))
                    print('%f kg %s' % (quantità_alimento_4[0], S[3]))
                    print('%f kg %s' % (quantità_alimento_5[0], S[4]))
                    print('%f kg %s' % (quantità_alimento_6[0], S[5]))
            
                    
                    print('')
                    print('Rapporto (LISINA / PROTEINA DIGERIBILE) => %f' % LysDI_ratio)
                    print('')
                    print('Rapporto (METIONINA / PROTEINA DIGERIBILE) => %f' % MetDI_ratio)
                    print('')
                    print('Rapporto (LISINA / METIONINA) => %f' % Lys_Met_ratio)
                    print('')
                    if Lys_Met_ratio >= 3.0:
                        print('La razione è carente di METIONINA!')
                        print('')
                        print("Prova a sostituire l'alimento <%s> (CARENTE DI METIONINA) con <girasole farina estrazione>" % FE) 
                                           
                    BFR = (APPORTO_PDI - app_tot_PDIE)/APPORTO_UFL
                    print('')
                    print('La RAZIONE fornisce %f g di PDIN' % APPORTO_PDI)
                    print('')
                    print('La RAZIONE fornisce %f g di PDIE' % app_tot_PDIE)
                    print('')
                    print('Rmic = (PDIN – PDIE)/UFL')
                    print('')
                    print('Rmic = %f' % BFR)
                    print('')
                    if BFR >= -17:
                        
                        print('La RAZIONE è accettabile')
                    else:
                        print('La RAZIONE non è accettabile')
                        print('Prova ad aumentare la quantità di %s' % FE) 



############################################################################################################################            
# METODO <LYS_MET>
# 6 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 3)
# FORAGGIO + CEREALE inseriti manualmente
# 2 alimenti inseriti manualmente + 5 alimenti inseriti in automatico => TOT 7
            
                elif Q and QM and not QFP:
                
                
                
                    print('Hai inserito manualmente un alimento per ciascuna delle categorie <FORAGGI> e <CEREALI>')

                                        
                
                    quantità_TOTALE_TAL_QUALE = Q + QM + quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0] + quantità_alimento_4[0] + quantità_alimento_5[0] + quantità_alimento_6[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_FOR_man[0] + app_CER_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0] + random_ARR_3_new[0] + random_ARR_4_new[0] + random_ARR_5_new[0] 
                    APPORTO_PROTEINA_GREZZA = app_FOR_man[1] + app_CER_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1] + random_ARR_3_new[1] + random_ARR_4_new[1] + random_ARR_5_new[1]
                    APPORTO_FIBRA_GREZZA = app_FOR_man[2] + app_CER_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2] + random_ARR_3_new[2] + random_ARR_4_new[2] + random_ARR_5_new[2]
                    APPORTO_NDF = app_FOR_man[3] + app_CER_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3] + random_ARR_3_new[3] + random_ARR_4_new[3] + random_ARR_5_new[3]
                    APPORTO_ADF = app_FOR_man[4] + app_CER_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4] + random_ARR_3_new[4] + random_ARR_4_new[4] + random_ARR_5_new[4]
                    APPORTO_GRASSO = app_FOR_man[5] + app_CER_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5] + random_ARR_3_new[5] + random_ARR_4_new[5] + random_ARR_5_new[5]
                    APPORTO_AMIDO = app_FOR_man[6] + app_CER_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6] + random_ARR_3_new[6] + random_ARR_4_new[6] + random_ARR_5_new[6]
                    APPORTO_ZUCCHERI = app_FOR_man[7] + app_CER_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7] + random_ARR_3_new[7] + random_ARR_4_new[7] + random_ARR_5_new[7]
                    APPORTO_Ca = app_FOR_man[8] + app_CER_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8] + random_ARR_3_new[8] + random_ARR_4_new[8] + random_ARR_5_new[8]
                    APPORTO_P = app_FOR_man[9] + app_CER_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9] + random_ARR_3_new[9] + random_ARR_4_new[9] + random_ARR_5_new[9]
                    APPORTO_UFL = app_FOR_man[10] + app_CER_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10] + random_ARR_3_new[10] + random_ARR_4_new[10] + random_ARR_5_new[10]
                    APPORTO_PDI = app_FOR_man[11] + app_CER_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11] + random_ARR_3_new[11] + random_ARR_4_new[11] + random_ARR_5_new[11]



                    print('')
                    print('apporti di %s:' % M)
                    print('')
                    print(app_FOR_man)
                    print('')
                    print('apporti di %s:' % MG)
                    print('')
                    print(app_CER_man)
                    print('')        
                                                                          
                    print('apporti di %s:' % S[0])
                    print('')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print(random_ARR_2_new)
                    print('')
                    print('apporti di %s:' % S[3])
                    print('')
                    print(random_ARR_3_new)
                    print('')
                    print('apporti di %s:' % S[4])
                    print('')
                    print(random_ARR_4_new)
                    print('')
                    print('apporti di %s:' % S[5])
                    print('')
                    print(random_ARR_5_new)
                    print('')                
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')
                    print('%f kg %s' % (QM, MG))                                                 
                    print('%f kg %s' % (Q, M))
                                                
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))
                    print('%f kg %s' % (quantità_alimento_4[0], S[3]))
                    print('%f kg %s' % (quantità_alimento_5[0], S[4]))
                    print('%f kg %s' % (quantità_alimento_6[0], S[5]))                        

                    
                    print('')
                    print('Rapporto (LISINA / PROTEINA DIGERIBILE) => %f' % LysDI_ratio)
                    print('')
                    print('Rapporto (METIONINA / PROTEINA DIGERIBILE) => %f' % MetDI_ratio)
                    print('')
                    print('Rapporto (LISINA / METIONINA) => %f' % Lys_Met_ratio)
                    print('')
                    if Lys_Met_ratio >= 3.0:
                        print('La razione è carente di METIONINA!')
                        print('')
                        print("Prova a sostituire l'alimento <%s> (CARENTE DI METIONINA) con <girasole farina estrazione>" % FE) 
                                           
                    BFR = (APPORTO_PDI - app_tot_PDIE)/APPORTO_UFL
                    print('')
                    print('La RAZIONE fornisce %f g di PDIN' % APPORTO_PDI)
                    print('')
                    print('La RAZIONE fornisce %f g di PDIE' % app_tot_PDIE)
                    print('')
                    print('Rmic = (PDIN – PDIE)/UFL')
                    print('')
                    print('Rmic = %f' % BFR)
                    print('')
                    if BFR >= -17:
                        
                        print('La RAZIONE è accettabile')
                    else:
                        print('La RAZIONE non è accettabile')
                        print('Prova ad aumentare la quantità di %s' % FE) 
                    


############################################################################################################################            
# METODO <LYS_MET>
# 6 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 4)
# FORAGGIO inserito manualmente
# 1 alimento inserito manualmente + 6 alimenti inseriti in automatico => TOT 7

                elif Q and not QM and not QFP:
                
                
                
                    print('Hai inserito manualmente un alimento per la categoria <FORAGGI>') 



                    quantità_TOTALE_TAL_QUALE = Q + quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0] + quantità_alimento_4[0] + quantità_alimento_5[0] + quantità_alimento_6[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_FOR_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0] + random_ARR_3_new[0] + random_ARR_4_new[0] + random_ARR_5_new[0] 
                    APPORTO_PROTEINA_GREZZA = app_FOR_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1] + random_ARR_3_new[1] + random_ARR_4_new[1] + random_ARR_5_new[1]
                    APPORTO_FIBRA_GREZZA = app_FOR_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2] + random_ARR_3_new[2] + random_ARR_4_new[2] + random_ARR_5_new[2]
                    APPORTO_NDF = app_FOR_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3] + random_ARR_3_new[3] + random_ARR_4_new[3] + random_ARR_5_new[3]
                    APPORTO_ADF = app_FOR_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4] + random_ARR_3_new[4] + random_ARR_4_new[4] + random_ARR_5_new[4]
                    APPORTO_GRASSO = app_FOR_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5] + random_ARR_3_new[5] + random_ARR_4_new[5] + random_ARR_5_new[5]
                    APPORTO_AMIDO = app_FOR_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6] + random_ARR_3_new[6] + random_ARR_4_new[6] + random_ARR_5_new[6]
                    APPORTO_ZUCCHERI = app_FOR_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7] + random_ARR_3_new[7] + random_ARR_4_new[7] + random_ARR_5_new[7]
                    APPORTO_Ca = app_FOR_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8] + random_ARR_3_new[8] + random_ARR_4_new[8] + random_ARR_5_new[8]
                    APPORTO_P = app_FOR_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9] + random_ARR_3_new[9] + random_ARR_4_new[9] + random_ARR_5_new[9]
                    APPORTO_UFL = app_FOR_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10] + random_ARR_3_new[10] + random_ARR_4_new[10] + random_ARR_5_new[10]
                    APPORTO_PDI = app_FOR_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11] + random_ARR_3_new[11] + random_ARR_4_new[11] + random_ARR_5_new[11]



                    print('')
                    print('apporti di %s:' % M)
                    print('')
                    print(app_FOR_man)
                    print('')  
                                        
                    print('apporti di %s:' % S[0])
                    print('')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print(random_ARR_2_new)
                    print('')
                    print('apporti di %s:' % S[3])
                    print('')
                    print(random_ARR_3_new)
                    print('')
                    print('apporti di %s:' % S[4])
                    print('')
                    print(random_ARR_4_new)
                    print('')
                    print('apporti di %s:' % S[5])
                    print('')
                    print(random_ARR_5_new)
                    print('')                  
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')                       
                    print('%f kg %s' % (Q, M))
                                                
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))
                    print('%f kg %s' % (quantità_alimento_4[0], S[3]))
                    print('%f kg %s' % (quantità_alimento_5[0], S[4]))
                    print('%f kg %s' % (quantità_alimento_6[0], S[5]))
                                
                    print('')
                    print('Rapporto (LISINA / PROTEINA DIGERIBILE) => %f' % LysDI_ratio)
                    print('')
                    print('Rapporto (METIONINA / PROTEINA DIGERIBILE) => %f' % MetDI_ratio)
                    print('')
                    print('Rapporto (LISINA / METIONINA) => %f' % Lys_Met_ratio)
                    print('')
                    if Lys_Met_ratio >= 3.0:
                        print('La razione è carente di METIONINA!')
                        print('')
                        print("Prova a sostituire l'alimento <%s> (CARENTE DI METIONINA) con <girasole farina estrazione>" % FE) 
                                           
                    BFR = (APPORTO_PDI - app_tot_PDIE)/APPORTO_UFL
                    print('')
                    print('La RAZIONE fornisce %f g di PDIN' % APPORTO_PDI)
                    print('')
                    print('La RAZIONE fornisce %f g di PDIE' % app_tot_PDIE)
                    print('')
                    print('Rmic = (PDIN – PDIE)/UFL')
                    print('')
                    print('Rmic = %f' % BFR)
                    print('')
                    if BFR >= -17:
                        
                        print('La RAZIONE è accettabile')
                    else:
                        print('La RAZIONE non è accettabile')
                        print('Prova ad aumentare la quantità di %s' % FE) 
                    


############################################################################################################################            
# METODO <LYS_MET>
# 6 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 5)
# CEREALE inserito manualmente
# 1 alimento inserito manualmente + 6 alimenti inseriti in automatico => TOT 7

                elif QM and not Q and not QFP:
                
                
                
                    print('Hai inserito manualmente un alimento per la categoria <CEREALI>') 


                    quantità_TOTALE_TAL_QUALE = QM + quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0] + quantità_alimento_4[0] + quantità_alimento_5[0] + quantità_alimento_6[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = app_CER_man[0] + random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0] + random_ARR_3_new[0] + random_ARR_4_new[0] + random_ARR_5_new[0] 
                    APPORTO_PROTEINA_GREZZA = app_CER_man[1] + random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1] + random_ARR_3_new[1] + random_ARR_4_new[1] + random_ARR_5_new[1]
                    APPORTO_FIBRA_GREZZA = app_CER_man[2] + random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2] + random_ARR_3_new[2] + random_ARR_4_new[2] + random_ARR_5_new[2]
                    APPORTO_NDF = app_CER_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3] + random_ARR_3_new[3] + random_ARR_4_new[3] + random_ARR_5_new[3]
                    APPORTO_ADF = app_CER_man[4] + random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4] + random_ARR_3_new[4] + random_ARR_4_new[4] + random_ARR_5_new[4]
                    APPORTO_GRASSO = app_CER_man[5] + random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5] + random_ARR_3_new[5] + random_ARR_4_new[5] + random_ARR_5_new[5]
                    APPORTO_AMIDO = app_CER_man[6] + random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6] + random_ARR_3_new[6] + random_ARR_4_new[6] + random_ARR_5_new[6]
                    APPORTO_ZUCCHERI = app_CER_man[7] + random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7] + random_ARR_3_new[7] + random_ARR_4_new[7] + random_ARR_5_new[7]
                    APPORTO_Ca = app_CER_man[8] + random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8] + random_ARR_3_new[8] + random_ARR_4_new[8] + random_ARR_5_new[8]
                    APPORTO_P = app_CER_man[9] + random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9] + random_ARR_3_new[9] + random_ARR_4_new[9] + random_ARR_5_new[9]
                    APPORTO_UFL = app_CER_man[10] + random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10] + random_ARR_3_new[10] + random_ARR_4_new[10] + random_ARR_5_new[10]
                    APPORTO_PDI = app_CER_man[11] + random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11] + random_ARR_3_new[11] + random_ARR_4_new[11] + random_ARR_5_new[11]



                    print('')
                    print('apporti di %s:' % MG)
                    print('')
                    print(app_CER_man)
                    print('')  
                                        
                    print('apporti di %s:' % S[0])
                    print('')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print(random_ARR_2_new)
                    print('')
                    print('apporti di %s:' % S[3])
                    print('')
                    print(random_ARR_3_new)
                    print('')
                    print('apporti di %s:' % S[4])
                    print('')
                    print(random_ARR_4_new)
                    print('')
                    print('apporti di %s:' % S[5])
                    print('')
                    print(random_ARR_5_new)
                    print('')
                
                    print('')
                    print('COMPOSIZIONE DELLA RAZIONE:')
                    print('')
                    print('%f kg %s' % (QM, MG))                                                 
                                                
                    print('%f kg %s' % (quantità_alimento_1[0], S[0]))
                    print('%f kg %s' % (quantità_alimento_2[0], S[1]))
                    print('%f kg %s' % (quantità_alimento_3[0], S[2]))
                    print('%f kg %s' % (quantità_alimento_4[0], S[3]))
                    print('%f kg %s' % (quantità_alimento_5[0], S[4]))
                    print('%f kg %s' % (quantità_alimento_6[0], S[5]))
                    
                    print('')
                    print('Rapporto (LISINA / PROTEINA DIGERIBILE) => %f' % LysDI_ratio)
                    print('')
                    print('Rapporto (METIONINA / PROTEINA DIGERIBILE) => %f' % MetDI_ratio)
                    print('')
                    print('Rapporto (LISINA / METIONINA) => %f' % Lys_Met_ratio)
                    print('')
                    if Lys_Met_ratio >= 3.0:
                        print('La razione è carente di METIONINA!')
                        print('')
                        print("Prova a sostituire l'alimento <%s> (CARENTE DI METIONINA) con <girasole farina estrazione>" % FE) 
                                          
                    BFR = (APPORTO_PDI - app_tot_PDIE)/APPORTO_UFL
                    print('')
                    print('La RAZIONE fornisce %f g di PDIN' % APPORTO_PDI)
                    print('')
                    print('La RAZIONE fornisce %f g di PDIE' % app_tot_PDIE)
                    print('')
                    print('Rmic = (PDIN – PDIE)/UFL')
                    print('')
                    print('Rmic = %f' % BFR)
                    print('')
                    if BFR >= -17:
                        
                        print('La RAZIONE è accettabile')
                    else:
                        print('La RAZIONE non è accettabile')
                        print('Prova ad aumentare la quantità di %s' % FE) 
                    


############################################################################################################################            
# METODO <LYS_MET>
# 6 ALIMENTI INSERITI AUTOMATICAMENTE
############################################################################################################################
# CASO 7)
# NESSUN ALIMENTO inserito manualmente
# 0 alimenti inseriti manualmente + 6 alimenti inseriti in automatico => TOT 6

                else:
                
                
                
                    print('Non hai inserito manualmente alcun alimento')


                    quantità_TOTALE_TAL_QUALE = quantità_alimento_1[0] + quantità_alimento_2[0] + quantità_alimento_3[0] + quantità_alimento_4[0] + quantità_alimento_5[0] + quantità_alimento_6[0]
                    APPORTO_DEFINITIVO_SOSTANZA_SECCA = random_ARR_0_new[0] + random_ARR_1_new[0] + random_ARR_2_new[0] + random_ARR_3_new[0] + random_ARR_4_new[0] + random_ARR_5_new[0] 
                    APPORTO_PROTEINA_GREZZA = random_ARR_0_new[1] + random_ARR_1_new[1] + random_ARR_2_new[1] + random_ARR_3_new[1] + random_ARR_4_new[1] + random_ARR_5_new[1]
                    APPORTO_FIBRA_GREZZA = random_ARR_0_new[2] + random_ARR_1_new[2] + random_ARR_2_new[2] + random_ARR_3_new[2] + random_ARR_4_new[2] + random_ARR_5_new[2]
                    APPORTO_NDF = random_ARR_0_new[3] + random_ARR_1_new[3] + random_ARR_2_new[3] + random_ARR_3_new[3] + random_ARR_4_new[3] + random_ARR_5_new[3]
                    APPORTO_ADF = random_ARR_0_new[4] + random_ARR_1_new[4] + random_ARR_2_new[4] + random_ARR_3_new[4] + random_ARR_4_new[4] + random_ARR_5_new[4]
                    APPORTO_GRASSO = random_ARR_0_new[5] + random_ARR_1_new[5] + random_ARR_2_new[5] + random_ARR_3_new[5] + random_ARR_4_new[5] + random_ARR_5_new[5]
                    APPORTO_AMIDO = random_ARR_0_new[6] + random_ARR_1_new[6] + random_ARR_2_new[6] + random_ARR_3_new[6] + random_ARR_4_new[6] + random_ARR_5_new[6]
                    APPORTO_ZUCCHERI = random_ARR_0_new[7] + random_ARR_1_new[7] + random_ARR_2_new[7] + random_ARR_3_new[7] + random_ARR_4_new[7] + random_ARR_5_new[7]
                    APPORTO_Ca = random_ARR_0_new[8] + random_ARR_1_new[8] + random_ARR_2_new[8] + random_ARR_3_new[8] + random_ARR_4_new[8] + random_ARR_5_new[8]
                    APPORTO_P = random_ARR_0_new[9] + random_ARR_1_new[9] + random_ARR_2_new[9] + random_ARR_3_new[9] + random_ARR_4_new[9] + random_ARR_5_new[9]
                    APPORTO_UFL = random_ARR_0_new[10] + random_ARR_1_new[10] + random_ARR_2_new[10] + random_ARR_3_new[10] + random_ARR_4_new[10] + random_ARR_5_new[10]
                    APPORTO_PDI = random_ARR_0_new[11] + random_ARR_1_new[11] + random_ARR_2_new[11] + random_ARR_3_new[11] + random_ARR_4_new[11] + random_ARR_5_new[11]


                    print('apporti di %s:' % S[0])
                    print('')
                    print(random_ARR_0_new)
                    print('')
                    print('apporti di %s:' % S[1])
                    print('')
                    print(random_ARR_1_new)
                    print('')
                    print('apporti di %s:' % S[2])
                    print('')
                    print(random_ARR_2_new)
                    print('')
                    print('apporti di %s:' % S[3])
                    print('')
                    print(random_ARR_3_new)
                    print('')
                    print('apporti di %s:' % S[4])
                    print('')
                    print(random_ARR_4_new)
                    print('')
                    print('apporti di %s:' % S[5])
                    print('')
                    print(random_ARR_5_new)
                    print('')
                   
                    print('')
                    print('Rapporto (LISINA / PROTEINA DIGERIBILE) => %f' % LysDI_ratio)
                    print('')
                    print('Rapporto (METIONINA / PROTEINA DIGERIBILE) => %f' % MetDI_ratio)
                    print('')
                    print('Rapporto (LISINA / METIONINA) => %f' % Lys_Met_ratio)
                    print('')
                    if Lys_Met_ratio >= 3.0:
                        print('La razione è carente di METIONINA!')
                        print('')
                        print("Prova a sostituire l'alimento <%s> (CARENTE DI METIONINA) con <girasole farina estrazione>" % FE) 
                                           
                    BFR = (APPORTO_PDI - app_tot_PDIE)/APPORTO_UFL
                    print('')
                    print('La RAZIONE fornisce %f g di PDIN' % APPORTO_PDI)
                    print('')
                    print('La RAZIONE fornisce %f g di PDIE' % app_tot_PDIE)
                    print('')
                    print('Rmic = (PDIN – PDIE)/UFL')
                    print('')
                    print('Rmic = %f' % BFR)
                    print('')
                    if BFR >= -17:
                        
                        print('La RAZIONE è accettabile')
                    else:
                        print('La RAZIONE non è accettabile')
                        print('Prova ad aumentare la quantità di %s' % FE) 
                    

          
############################################################################################################################

        except NameError:
            print('ERRORE!')
            


        if metodo == 'LYS_MET':
            
                
      
            A = []
            A.append(APPORTO_DEFINITIVO_SOSTANZA_SECCA)
            A.append(APPORTO_PROTEINA_GREZZA)
            A.append(APPORTO_FIBRA_GREZZA)
            A.append(APPORTO_NDF)
            A.append(APPORTO_ADF)
            A.append(APPORTO_GRASSO)
            A.append(APPORTO_AMIDO)
            A.append(APPORTO_ZUCCHERI)
            A.append(APPORTO_Ca)
            A.append(APPORTO_P)
            A.append(APPORTO_UFL)
            A.append(APPORTO_PDI)
            
        
            try:
                with open('%s.txt' % nome_file_apporti, 'w') as external_file:
                    print(A, file=external_file)
                external_file.close()
            except NameError:
                with open('nuovi_apporti.txt', 'w') as external_file:
                    print(A, file=external_file)
                external_file.close()
            

            try:
                with open('%s.txt' % nome_file_fabbisogni, 'w') as external_file:
                    print(F, file=external_file)
                external_file.close()
            except NameError:
                with open('nuovi_fabbisogni.txt', 'w') as external_file:
                    print(A, file=external_file)
                external_file.close()

            
            print('')
            print('Ho salvato i PARAMETRI nel FILE DI TESTO <%s.txt>' % nome_file_parametri)
            print('')
            print('Ho salvato i FABBISOGNI nel FILE DI TESTO <%s.txt>' % nome_file_fabbisogni)
            print('')
            print('Ho salvato gli APPORTI nel FILE DI TESTO <%s.txt>' % nome_file_apporti)
            print('')
            print('Ho salvato i DATI nel FILE DI TESTO <%s.py>' % nome_file_dati)
            print('')
            print('Ho salvato le quantità nel FILE DI TESTO <%s.py>' % nome_file_quantità)
            print('')
            print('Ho salvato la RAZIONE nel FILE DI TESTO <%s.txt>' % nome_file_razione)
            print('')

        
            DELTA_SOSTANZA_SECCA = APPORTO_DEFINITIVO_SOSTANZA_SECCA - F[0]
            DELTA_PROTEINA_GREZZA = APPORTO_PROTEINA_GREZZA - F[1]
            DELTA_FIBRA_GREZZA = APPORTO_FIBRA_GREZZA - F[2]
            DELTA_NDF = APPORTO_NDF - F[3]
            DELTA_ADF = APPORTO_ADF - F[4]
            DELTA_GRASSO = APPORTO_GRASSO - F[5]
            DELTA_AMIDO = APPORTO_AMIDO - F[6]
            DELTA_ZUCCHERI = APPORTO_ZUCCHERI - F[7]
            DELTA_Ca = APPORTO_Ca - F[8]
            DELTA_P = APPORTO_P - F[9]
            DELTA_UFL = APPORTO_UFL - F[10]
            DELTA_PDI = APPORTO_PDI - F[11]
        
                              
            print('')
            print('')
            if i == N_repl-1:
                print('Il calcolo della razione non ha avuto SUCCESSO; per favore cancella gli alimenti inseriti e riprova.')
            elif i < N_repl-1:
                print('Il CALCOLO DELLA RAZIONE è stato effettuato con SUCCESSO alla %d^ replica!' % i)        
            print('')
        
                        
            print("Il FABBISOGNO DI SOSTANZA SECCA (che dev'essere soddisfatto dagli alimenti aggiunti) delle bovine del gruppo <%s> è di %f kg" %  (gruppo, F_arr[0]))
            print('')
            print("L'APPORTO DI SOSTANZA SECCA degli alimenti selezionati è di %f kg" % APPORTO_SOSTANZA_SECCA)
            print('')

            print('')        
            print('LEGENDA')
            print('')
            print("DM => Dry Matter (Apporto di Sostanza Secca)")
            print("CP => Crude Protein (Apporto di PROTEINA GREZZA)")
            print("FG => FIBRA GREZZA (apporto di FIBRA GREZZA)")
            print("NDF => NDF (apporto di Fibra resistente al Detergente Neutro)")
            print("ADF => ADF (apporto di Fibra resistente al Detergente Acido)")
            print("FAT => Fat (apporto di GRASSO)")
            print("AM => AMIDO (apporto di AMIDO)")
            print("ZUC => ZUCCHERI (apporto di ZUCCHERI)")
            print("Ca => Calcio (apporto di Calcio)")
            print("P => Fosforo (apporto di Fosforo)")
            print("UFL => Unità Foraggere Latte (apporto di Energia Netta)")
            print("PDI => Proteina Digeribile Intestinale (apporto di PDI)")
            print('')
            print('')
            print('DMI','   CP', '   FG', '    NDF', '    ADF', '    FAT', '    AM', '    ZUC', '    Ca', '    P', '    UFL', '    PFI')
            
            
            if len(PREZZI) == len(S):

                print('')
                for i in list(range(len(PREZZI))):
                    print("Prezzo dell'alimento <%s> => %f EURO/ton" % (S[i], PREZZI[i]))
                print('')
                print('********************************************************************')
                print('')
            else:
                print('Impossibile creare la TABELLA DEI PREZZI: ci sono uno o più alimenti non quotati!')


            
            if len(PREZZI) == len(S):

            
                costo_alimento_1 = quantità_alimento_1[0] * PREZZI[0] / 1000
                costo_alimento_2 = quantità_alimento_2[0] * PREZZI[1] / 1000
                costo_alimento_3 = quantità_alimento_3[0] * PREZZI[2] / 1000
                costo_alimento_4 = quantità_alimento_4[0] * PREZZI[3] / 1000
                costo_alimento_5 = quantità_alimento_5[0] * PREZZI[4] / 1000
                costo_alimento_6 = quantità_alimento_6[0] * PREZZI[5] / 1000
                
            
                COSTO_RAZIONE = []            
                COSTO_RAZIONE.append(costo_alimento_1)
                COSTO_RAZIONE.append(costo_alimento_2)
                COSTO_RAZIONE.append(costo_alimento_3)
                COSTO_RAZIONE.append(costo_alimento_4)
                COSTO_RAZIONE.append(costo_alimento_5)
                COSTO_RAZIONE.append(costo_alimento_6)
                

            
                if Q and not QM and not QFP:
                            
                    if type(costo_FORAGGIO_quantità) is float: 
                        COSTO_RAZIONE.append(costo_FORAGGIO_quantità)
                        print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[3], costo_alimento_4))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[4], costo_alimento_5))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[5], costo_alimento_6))
                        print("Costo dell'alimento <%s>: %f EURO" % (M, costo_FORAGGIO_quantità))

                    else:
                        print("Il prezzo dell'alimento <%s> non è disponibile!" % M) 

                
                elif QM and not Q and not QFP:                
                
                    if type(costo_CEREALE_quantità) is float:
                        COSTO_RAZIONE.append(costo_CEREALE_quantità)  
                        print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[3], costo_alimento_4))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[4], costo_alimento_5))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[5], costo_alimento_6))
                        print("Costo dell'alimento <%s>: %f EURO" % (MG, costo_CEREALE_quantità))

                    else:
                        print("Il prezzo dell'alimento <%s> non è disponibile!" % MG) 

            
                elif QFP and not Q and not QM:
                
                    if type(costo_FONTE_PROTEICA_quantità) is float:
                        COSTO_RAZIONE.append(costo_FONTE_PROTEICA_quantità)
                        print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[3], costo_alimento_4))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[4], costo_alimento_5))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[5], costo_alimento_6))
                        print("Costo dell'alimento <%s>: %f EURO" % (FE, costo_FONTE_PROTEICA_quantità))
                    else:
                        print("Il prezzo dell'alimento <%s> non è disponibile!" % FE)

            
                elif Q and QM and not QFP:
                
                    if type(costo_FORAGGIO_quantità) is float and type(costo_CEREALE_quantità) is float: 
                        COSTO_RAZIONE.append(costo_FORAGGIO_quantità)
                        COSTO_RAZIONE.append(costo_CEREALE_quantità)  
                        print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[3], costo_alimento_4))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[4], costo_alimento_5))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[5], costo_alimento_6))                     
                        print("Costo dell'alimento <%s>: %f EURO" % (M, costo_FORAGGIO_quantità))
                        print("Costo dell'alimento <%s>: %f EURO" % (MG, costo_CEREALE_quantità))                        
                    
                    else:
                        print("Il prezzo dell'alimento <%s> e/o dell'alimento <%s> non è disponibile!" % (M, MG))

            
                elif Q and QFP:
                
                    if type(costo_FORAGGIO_quantità) is float and type(costo_FONTE_PROTEICA_quantità) is float:  
                        COSTO_RAZIONE.append(costo_FORAGGIO_quantità)
                        COSTO_RAZIONE.append(costo_FONTE_PROTEICA_quantità)
                        print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[3], costo_alimento_4))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[4], costo_alimento_5))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[5], costo_alimento_6))                     
                        print("Costo dell'alimento <%s>: %f EURO" % (M, costo_FORAGGIO_quantità))
                        print("Costo dell'alimento <%s>: %f EURO" % (FE, costo_FONTE_PROTEICA_quantità))

                    else:
                        print("Il prezzo dell'alimento <%s> e/o dell'alimento <%s> non è disponibile!" % (M, FE))

                
                elif QM and QFP and not Q:
                
                    if type(costo_CEREALE_quantità) is float and type(costo_FONTE_PROTEICA_quantità) is float:
                        COSTO_RAZIONE.append(costo_CEREALE_quantità) 
                        COSTO_RAZIONE.append(costo_FONTE_PROTEICA_quantità)
                        print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[3], costo_alimento_4))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[5], costo_alimento_6))                   
                        print("Costo dell'alimento <%s>: %f EURO" % (MG, costo_CEREALE_quantità))
                        print("Costo dell'alimento <%s>: %f EURO" % (FE, costo_FONTE_PROTEICA_quantità)) 
                    else:
                        print("Il prezzo dell'alimento <%s> e/o dell'alimento <%s> non è disponibile!" % (MG, FE))
                                           
                   
                elif Q and QM and QFP:
                    if type(prezzo_FORAGGIO_quantità) is float and type(prezzo_CEREALE_quantità) is float and type(prezzo_FONTE_PROTEICA_quantità) is float:
                        COSTO_RAZIONE.append(costo_FORAGGIO_quantità)
                        COSTO_RAZIONE.append(costo_CEREALE_quantità)                                   
                        COSTO_RAZIONE.append(costo_FONTE_PROTEICA_quantità)

                        print("Costo dell'alimento <%s>: %f EURO" % (S[0], costo_alimento_1))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[1], costo_alimento_2))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[2], costo_alimento_3))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[3], costo_alimento_4))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[4], costo_alimento_5))
                        print("Costo dell'alimento <%s>: %f EURO" % (S[5], costo_alimento_6))
                        print("Costo dell'alimento <%s>: %f EURO" % (M, costo_FORAGGIO_quantità))                     
                        print("Costo dell'alimento <%s>: %f EURO" % (MG, costo_CEREALE_quantità))
                        print("Costo dell'alimento <%s>: %f EURO" % (FE, costo_FONTE_PROTEICA_quantità)) 
                    else:
                        print("Il prezzo dell'alimento <%s> e/o dell'alimento <%s> e/o dell'alimento <%s> non è disponibile!" % (M, MG, FE))
                                           
                COSTO_TOTALE = sum(COSTO_RAZIONE)
                print('')
                print('Il costo della razione è %f EURO' % COSTO_TOTALE)
                if COSTO_TOTALE > PREZZO_MAX:
                    print('Il COSTO TOTALE della razione è > del PREZZO MASSIMO che hai impostato!')
                    print('Prova a scegliere altri alimenti e ricalcola la RAZIONE')
            
            
            else:
                print('Non posso calcolare il COSTO DELLA RAZIONE: ci sono uno o più alimenti non quotati!') 
            
            
            print('')                
            print('')
            print('')
            print('_______________________________________________________________________________________________')
            print('|                         |                    |                         |                    |')
            print('|                         |                    |                         |                    |')
            print('|   PRINCIPIO NUTRITIVO   |      APPORTO       |       Fabbisogno        |     DIFFERENZA     |')
            print('|                         |                    |                         |                    |')
            print('|_________________________|____________________|_________________________|____________________|')
            print('|      Sostanza Secca     |     %f kg   |  %f kg           |  %f kg       |' % (APPORTO_DEFINITIVO_SOSTANZA_SECCA, F[0], DELTA_SOSTANZA_SECCA))
            print('|      PROTEINA GREZZA    |   %f g    |%f g            |%f g        |' % (APPORTO_PROTEINA_GREZZA, F[1], DELTA_PROTEINA_GREZZA))
            print('|      FIBRA GREZZA       |   %f g    |%f g            |%f g        |' % (APPORTO_FIBRA_GREZZA, F[2], DELTA_FIBRA_GREZZA))
            print('|           NDF           |   %f g    |%f g            |%f g        |' % (APPORTO_NDF, F[3], DELTA_NDF))
            print('|           ADF           |   %f g    |%f g            |%f g        |' % (APPORTO_ADF, F[4], DELTA_ADF))
            print('|         GRASSO          |   %f g    |%f g            |%f g        |' % (APPORTO_GRASSO, F[5], DELTA_GRASSO)) 
            print('|          AMIDO          |   %f g    |%f g            |%f g        |' % (APPORTO_AMIDO, F[6], DELTA_AMIDO))
            print('|        ZUCCHERI         |    %f g    |%f g            |%f g       |' % (APPORTO_ZUCCHERI, F[7], DELTA_ZUCCHERI))
            print('|           Ca            |   %f g      |  %f g           |  %f g     |' % (APPORTO_Ca, F[8], DELTA_Ca))        
            print('|            P            |   %f g      |  %f g            |  %f g      |' % (APPORTO_P, F[9], DELTA_P))        
            print('|           UFL           |     %f      | %f               | %f           |' % (APPORTO_UFL, F[10], DELTA_UFL))
            print('|           PDI           |     %f      | %f               | %f           |' % (APPORTO_PDI, F[11], DELTA_PDI))        
            print('_______________________________________________________________________________________________')
            print('')
            print('')
            print('')
            print('******************************************** SOSTANZA SECCA ********************************************')
            print('')
            print('La razione fornisce %f kg di alimento tal quale' % quantità_TOTALE_TAL_QUALE)
            print('')
            print('La razione fornisce %f kg di Sostanza Secca' % APPORTO_DEFINITIVO_SOSTANZA_SECCA)            
            print('')
            DMI_AS_FED_ratio = (APPORTO_DEFINITIVO_SOSTANZA_SECCA/quantità_TOTALE_TAL_QUALE)*100
            print('La tua RAZIONE contiene il %fx100 di SOSTANZA SECCA' % DMI_AS_FED_ratio)
            print('')
            if DMI_AS_FED_ratio < 0.6:
                print('')
                print('In estate, in caso di COMPETIZIONE ALIMENTARE x un N° INSUFFICIENTE DI AUTOCATTURANTI (= BOVINE IN PIEDI),')
                print('se prepari un CARRO MISCELATORE con, per es., un 10x100 in più di razioni (per es., con 100')
                print('BOVINE IN LATTAZIONE metto nel carro 110 RAZIONI), dal momento che la miscelata rimarrà per più tempo in')
                print('mangiatoia, potrebbe scaldarsi!')
                print("Prova a RIDURRE UN PO' L'APPORTO COMPLESSIVO DI FORAGGIO, insilato, per aumentare la SS della razione,")
                print("o fieno (dipende da che tipo di FORAGGIo hai inserito manualmente), per forzare il programma ad")
                print("AUMENTARE L'APPORTO DELLA FONTE DI FIBRA DIGERIBILE")
                print("In questo modo, si dovrebbe attenuare la riduzione dell'ingestione volontaria di fibra scarsamente")
                print("digeribile (poiché più o meno lignificata), nonché il conseguente CALO DEL TENORE IN GRASSO del latte")
                print("Tieni anche conto del fatto che, riducendo l'apporto della cosiddetta <FIBRA FISICAMENTE EFFICACE>")
                print("(quella dei FORAGGI, che fa ruminare), LE BOVINE PRODURRANNO MENO SALIVA (che è il tampone naturale")
                print("del rumine) e, quindi, dovrai valutare l'inserimento di un TAMPONE ARTIFICIALE, come il bicarbonato")
                print("di calcio o di sodio, nella razione")    
            print('')
            print('')
            print('******************************************** PROTEINA GREZZA ********************************************')
            print('')
            APPORTO_DEFINITIVO_SOSTANZA_SECCA_g = APPORTO_DEFINITIVO_SOSTANZA_SECCA * 1000
            CP_DMI_ratio = APPORTO_PROTEINA_GREZZA/APPORTO_DEFINITIVO_SOSTANZA_SECCA_g
            print('Rapporto (PROTEINA GREZZA : Sostanza Secca) => %f' % CP_DMI_ratio)
            print('')
            print("Secondo Dell'Orto e Savoini, ad inizio lattazione dovrebbe essere ~ 0.18 (18%)")
            print('')
            if CP_DMI_ratio <= 0.17:
                print("L'apporto di PROTEINA GREZZA è insufficiente")
                print("Se avevi scelto una fonte proteica diversa dalla <F.E. DI SOIA>, sostituiscila con quest'ultima!")
                print("Se non basta, prova a sostituire il fieno di prato stabile o l'insilato di loietto con il <FIENO DI ERBA MEDICA e/o a ridurre l'apporto di insilato (o di pastone) di mais>")         
            print('')
            print('')


            print('******************************************* LISINA & METIONINA *******************************************')
            print('')
            print('Rapporto (LISINA / PROTEINA DIGERIBILE) => %f' % LysDI_ratio)
            print('')
            print('Rapporto (METIONINA / PROTEINA DIGERIBILE) => %f' % MetDI_ratio)
            print('')
            
            rapporto_Lys_Met = LysDI_ratio/MetDI_ratio

            print('Rapporto (LISINA / METIONINA) => %f' % rapporto_Lys_Met)
            print('')
            if rapporto_Lys_Met >= 3.0:
                print('La razione contiene un eccesso di LISINA!')
                print('')
                print('Dovrebbe essere > 2.7 e < 3.0')
                print('')
                print("Se hai scelto come FONTE DI PROTEINA un alimento CARENTE DI METIONINA, prova a sostituirlo con la <farina estrazione di girasole>")

            print('')
            print('')      
            print('')
            print('')           
            print('*********************************************** PDIN & PDIE ***********************************************')        
            
            BFR = (APPORTO_PDI - PDIE_TOT)/APPORTO_UFL
            print('')
            print('La RAZIONE fornisce %f g di PDIN' % PDIN_TOT)
            print('')
            print('La RAZIONE fornisce %f g di PDIE' % PDIE_TOT)
            print('')
            print('Rmic = (PDIN – PDIE)/UFL')
            print('')
            print('Rmic = %f' % BFR)
            print('')
            if BFR >= -17:                       
                print('La RAZIONE è accettabile')
                print('')
            else:
                print('La RAZIONE non è accettabile')
                print('Prova ad aumentare la quantità di %s' % FE)
            print('')
            print('')


            print('********************************************** FIBRA GREZZA **********************************************')                   
            FG_DMI_ratio = APPORTO_FIBRA_GREZZA/APPORTO_DEFINITIVO_SOSTANZA_SECCA_g
            print('')                 
            FG_DMI_ratio = APPORTO_FIBRA_GREZZA/APPORTO_DEFINITIVO_SOSTANZA_SECCA_g
            print('')
            print('Rapporto (FIBRA GREZZA : Sostanza Secca) => %f' % FG_DMI_ratio)
            print('')
            print('Dovrebbe essere ~ 0.17 (17%)')
            print('')
            # print('********************************************** NDF **********************************************')  
            APPORTO_NDF_FORAGGI = app_FOR_man[3] + random_ARR_0_new[3] + random_ARR_1_new[3]
            NDF_FORAGGI_NDF_tot_ratio = APPORTO_NDF_FORAGGI/APPORTO_NDF
#           print('Rapporto (NDF da FORAGGI : NDF totale) => %f' % NDF_FORAGGI_NDF_tot_ratio)
#           print('')
#           print('Dovrebbe essere ~ 0.75 (75%)')
            print('')
            print('')           
            print('')
            print('***********************************************************************************************************')
            print('********************************************* FINE DEL REPORT *********************************************')
            print('***********************************************************************************************************')
            
            sys.stdout = original

        

###############################################################################################################################
###############################################################################################################################        
###############################################################################################################################


def stampa_razione():

    os.system('gedit %s.txt' % nome_file_razione)


    
##############################################################################################################################
##################################################### FUNZIONI <IMPORTA> #####################################################
##############################################################################################################################



def importa_erba_loietto():
    try:
        global ERLO_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_erba_loietto import ERLO, ERLO_arr
            ARRAYS.append(ERLO)
        else:
            from importa_MySQLdb_erba_loietto_LYS_MET import ERLO_mod, ERLO_arr, PDIE_ERLO, LysDI_ERLO, MetDI_ERLO
            ARRAYS.append(ERLO_mod)
            PDIE.append(PDIE_ERLO)
            PDIN.append(ERLO_arr[11])
            LISINA.append(LysDI_ERLO)
            METIONINA.append(MetDI_ERLO) 
        ITEM = 'erba lo.'
        ITEMS.append(ITEM)
        prezzo_ERBA_LOIETTO = 50.0
        S.append('erba loietto')
        ARR.append(ERLO_arr)
        PREZZI.append(prezzo_ERBA_LOIETTO)
        print('Alimento <%s> inserito con SUCCESSO!' % ITEM)
        print("Costo di produzione stimato dell'alimento <%s => 50 EURO/ton" % ITEM)
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_erba_medica_II_taglio():
    try:
        global ERME2TA_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_erba_medica_II_taglio import ERME2TA, ERME2TA_arr
            ARRAYS.append(ERME2TA)
        else:
            from importa_MySQLdb_erba_medica_II_taglio_LYS_MET import ERME2TA_mod, ERME2TA_arr, PDIE_ERME2TA, LysDI_ERME2TA, MetDI_ERME2TA
            ARRAYS.append(ERME2TA_mod)
            PDIE.append(PDIE_ERME2TA)
            PDIN.append(ERME2TA_arr[11])
            LISINA.append(LysDI_ERME2TA)
            METIONINA.append(MetDI_ERME2TA) 
        prezzo_ERBA_MEDICA_II_TA = 50.0
        S.append('erba medica di II taglio')
        ITEM = 'erba med. II'
        ITEMS.append(ITEM)
        ARR.append(ERME2TA_arr)
        PREZZI.append(prezzo_ERBA_MEDICA_II_TA)
        print('Alimento <ERBA MEDICA DI II TAGLIO> inserito con SUCCESSO!')
        print("Costo di produzione stimato dell'ERBA MEDICA DI II TAGLIO => 50 EURO/ton")
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_erba_medica_disidratata_15x100():
    try:
        global ERMEDIS15_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_erba_medica_disidratata_15x100 import ERMEDIS15, ERMEDIS15_arr
            ARRAYS.append(ERMEDIS15)
        else:
            from importa_MySQLdb_erba_medica_disidratata_15x100_LYS_MET import ERMEDIS15_mod, ERMEDIS15_arr, PDIE_ERMEDIS15, LysDI_ERMEDIS15, MetDI_ERMEDIS15
            ARRAYS.append(ERMEDIS15_mod)
            PDIE.append(PDIE_ERMEDIS15)
            PDIN.append(ERMEDIS15_arr[11])
            LISINA.append(LysDI_ERMEDIS15)
            METIONINA.append(MetDI_ERMEDIS15)             
        from crea_db_PREZZI_Milano_L import prezzo_ERBA_MEDICA_DIS_1_QUAL
        S.append('erba medica disidratata 15x100')
        ITEM = 'medis 15'
        ITEMS.append(ITEM)
        ARR.append(ERMEDIS15_arr)
        print('Alimento <ERBA MEDICA DISIDRATATA 15x100> inserito con SUCCESSO!')
        if type(prezzo_ERBA_MEDICA_DIS_1_QUAL) == float:
            PREZZI.append(prezzo_ERBA_MEDICA_DIS_1_QUAL)
            print("Prezzo dell'ERBA MEDICA DISIDRATATA 15x100 => %f EURO/ton" % prezzo_ERBA_MEDICA_DIS_1_QUAL)
        else:
            print('%s' % prezzo_ERBA_MEDICA_DIS_1_QUAL)
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_erba_medica_disidratata_17x100():
    try:
        global ERMEDIS17_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_erba_medica_disidratata_17x100 import ERMEDIS17, ERMEDIS17_arr
            ARRAYS.append(ERMEDIS17)
        else:
            from importa_MySQLdb_erba_medica_disidratata_17x100_LYS_MET import ERMEDIS17_mod, ERMEDIS17_arr, PDIE_ERMEDIS17, LysDI_ERMEDIS17, MetDI_ERMEDIS17
            ARRAYS.append(ERMEDIS17_mod)
            PDIE.append(PDIE_ERMEDIS17)
            PDIN.append(ERMEDIS17_arr[11])
            LISINA.append(LysDI_ERMEDIS17)
            METIONINA.append(MetDI_ERMEDIS17)   
        from crea_db_PREZZI_Milano_L import prezzo_ERBA_MEDICA_DIS_EXTRA
        S.append('erba medica disidratata 17x100')
        ITEM = 'medis 17' 
        ITEMS.append(ITEM)
        ARR.append(ERMEDIS17_arr)
        print('Alimento <ERBA MEDICA DISIDRATATA 17x100> inserito con SUCCESSO!')
        if type(prezzo_ERBA_MEDICA_DIS_EXTRA) == float:
            PREZZI.append(prezzo_ERBA_MEDICA_DIS_EXTRA)
            print("Prezzo dell'ERBA MEDICA DISIDRATATA 17x100 => %f EURO/ton" % prezzo_ERBA_MEDICA_DIS_EXTRA)
        else:
            print('%s' % prezzo_ERBA_MEDICA_DIS_EXTRA)
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_erba_prato_stabile():
    try:
        global ERPRASTA_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_erba_prato_stabile import ERPRASTA, ERPRASTA_arr
            ARRAYS.append(ERPRASTA)
        else:
            from importa_MySQLdb_erba_prato_stabile_LYS_MET import ERPRASTA_mod, ERPRASTA_arr, PDIE_ERPRASTA, LysDI_ERPRASTA, MetDI_ERPRASTA
            ARRAYS.append(ERPRASTA_mod)
            PDIE.append(PDIE_ERPRASTA)
            PDIN.append(ERPRASTA_arr[11])
            LISINA.append(LysDI_ERPRASTA)
            METIONINA.append(MetDI_ERPRASTA)   
        prezzo_ERBA_PRATO_STABILE = 50.0
        S.append('erba prato stabile')
        ITEM = 'erba prasta'
        ITEMS.append(ITEM)
        ARR.append(ERPRASTA_arr)
        PREZZI.append(prezzo_ERBA_PRATO_STABILE)
        print('Alimento <ERBA PRATO STABILE> inserito con SUCCESSO!')
        print("Costo di produzione stimato dell'ERBA DI PRATO STABILE => 50 EURO/ton")
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_insilato_loietto():
    try:
        global INSILO_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_insilato_loietto import INSILO, INSILO_arr
            ARRAYS.append(INSILO)
        else:
            from importa_MySQLdb_insilato_loietto_LYS_MET import INSILO_mod, INSILO_arr, PDIE_INSILO, LysDI_INSILO, MetDI_INSILO
            ARRAYS.append(INSILO_mod)
            PDIE.append(PDIE_INSILO)
            PDIN.append(INSILO_arr[11])
            LISINA.append(LysDI_INSILO)
            METIONINA.append(MetDI_INSILO)   
        from crea_db_PREZZI_Alessandria_L import prezzo_LOIETTO_INSILATO
        S.append('insilato di loietto')
        ITEM = 'siloietto'
        ITEMS.append(ITEM)
        ARR.append(INSILO_arr)
        print('Alimento <INSILATO DI LOIETTO> inserito con SUCCESSO!')
        if type(prezzo_LOIETTO_INSILATO) == float:
            PREZZI.append(prezzo_LOIETTO_INSILATO)
            print("Prezzo dell'INSILATO DI LOIETTO => %f EURO/ton" % prezzo_LOIETTO_INSILATO)
        else:
            print('%s' % prezzo_LOIETTO_INSILATO)
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_insilato_mais():
    try:
        global INSIMA_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_insilato_mais import INSIMA, INSIMA_arr
            ARRAYS.append(INSIMA)
        else:
            from importa_MySQLdb_insilato_mais_LYS_MET import INSIMA_mod, INSIMA_arr, PDIE_INSIMA, LysDI_INSIMA, MetDI_INSIMA
            ARRAYS.append(INSIMA_mod)
            PDIE.append(PDIE_INSIMA)
            PDIN.append(INSIMA_arr[11])
            LISINA.append(LysDI_INSIMA)
            METIONINA.append(MetDI_INSIMA)   
        from crea_db_PREZZI_Alessandria_L import prezzo_MAIS_INSILATO
        S.append('insilato di mais')
        ITEM = 'silomais'
        ITEMS.append(ITEM)
        ARR.append(INSIMA_arr)
        print('Alimento <INSILATO DI MAIS> inserito con SUCCESSO!')
        if type(prezzo_MAIS_INSILATO) == float:
            PREZZI.append(prezzo_MAIS_INSILATO)
            print("Prezzo dell'INSILATO DI MAIS => %f EURO/ton" % prezzo_MAIS_INSILATO)
        else:
            print('%s' % prezzo_MAIS_INSILATO)
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_pastone_mais_granella():
    try:
        global PASTOMAISGRA_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_pastone_mais_granella import PASTOMAISGRA_arr
            from crea_db_PREZZI_clal_L import prezzo_MAIS_PASTONE_INTEGRALE_COSTO_PR
            S.append('pastone di mais granella')
            ITEM = 'mais pastgra'
            ITEMS.append(ITEM)
            ARRAYS.append(PASTOMAISGRA_arr)
            ARR.append(PASTOMAISGRA_arr)
            print('Alimento <PASTONE DI MAIS GRANELLA> inserito con SUCCESSO!')
            if type(prezzo_MAIS_PASTONE_INTEGRALE_COSTO_PR) == float:
                PREZZI.append(prezzo_MAIS_PASTONE_INTEGRALE_COSTO_PR)
                print("Prezzo del PASTONE DI MAIS GRANELLA => %f EURO/ton" % prezzo_MAIS_PASTONE_INTEGRALE_COSTO_PR)
            else:
                print('%s' % prezzo_MAIS_PASTONE_INTEGRALE_COSTO_PR)
        else:
            print('Alimento non disponibile con il METODO <LYS_MET>')
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')



def importa_pastone_mais_integrale():
    try:
        global PASTOMAISINT_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_pastone_mais_integrale import PASTOMAISINT_arr
            from crea_db_PREZZI_clal_L import prezzo_MAIS_PASTONE_INTEGRALE_COSTO_PR
            S.append('pastone di mais integrale')
            ITEM = 'mais pastint'
            ITEMS.append(ITEM)
            ARRAYS.append(PASTOMAISINT_arr)
            ARR.append(PASTOMAISINT_arr)
            print('Alimento <PASTONE DI MAIS INTEGRALE> inserito con SUCCESSO!')
            if type(prezzo_MAIS_PASTONE_INTEGRALE_COSTO_PR) == float:
                PREZZI.append(prezzo_MAIS_PASTONE_INTEGRALE_COSTO_PR)
                print("Prezzo del PASTONE DI MAIS INTEGRALE => %f EURO/ton" % prezzo_MAIS_PASTONE_INTEGRALE_COSTO_PR)
            else:
                print('%s' % prezzo_MAIS_PASTONE_INTEGRALE_COSTO_PR)
        else:
            print('Alimento non disponibile con il METODO <LYS_MET>')
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_fieno_loietto():
    try:
        global FIELO_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_fieno_loietto import FIELO, FIELO_arr
            ARRAYS.append(FIELO)
        else:
            from importa_MySQLdb_fieno_loietto_LYS_MET import FIELO_mod, FIELO_arr, PDIE_FIELO, LysDI_FIELO, MetDI_FIELO
            ARRAYS.append(FIELO_mod)
            PDIE.append(PDIE_FIELO)
            PDIN.append(FIELO_arr[11])
            LISINA.append(LysDI_FIELO)
            METIONINA.append(MetDI_FIELO)   
        from crea_db_PREZZI_Milano_L import prezzo_FIENO_MAGGENGO
        S.append('fieno di loietto')
        ITEM = 'fienoloiet.'
        ITEMS.append(ITEM)
        ARR.append(FIELO_arr)
        print('Alimento <FIENO DI LOIETTO> inserito con SUCCESSO!')
        if type(prezzo_FIENO_MAGGENGO) == float:
            PREZZI.append(prezzo_FIENO_MAGGENGO)
            print("Prezzo del FIENO DI LOIETTO => %f EURO/ton" % prezzo_FIENO_MAGGENGO)
        else:
            print('%s' % prezzo_FIENO_MAGGENGO)
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_fieno_medica_I_taglio():
    try:
        global FIEME1TA_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_fieno_medica_I_taglio import FIEME1TA, FIEME1TA_arr
            ARRAYS.append(FIEME1TA)
        else:
            from importa_MySQLdb_fieno_medica_I_taglio_LYS_MET import FIEME1TA_mod, FIEME1TA_arr, PDIE_FIEME1TA, LysDI_FIEME1TA, MetDI_FIEME1TA
            ARRAYS.append(FIEME1TA_mod)
            PDIE.append(PDIE_FIEME1TA)
            PDIN.append(FIEME1TA_arr[11])
            LISINA.append(LysDI_FIEME1TA)
            METIONINA.append(MetDI_FIEME1TA)               
        from crea_db_PREZZI_Bologna_L import prezzo_FIENO_MEDICA_17_1_TAGLIO_ROTBAL_B
        S.append('fieno di medica di I taglio')
        ITEM = 'fiemed I'
        ITEMS.append(ITEM)
        ARR.append(FIEME1TA_arr)
        print('Alimento <FIENO DI MEDICA DI I TAGLIO IN ROTOBALLE> inserito con SUCCESSO!')
        if type(prezzo_FIENO_MEDICA_17_1_TAGLIO_ROTBAL_B) == float:
            PREZZI.append(prezzo_FIENO_MEDICA_17_1_TAGLIO_ROTBAL_B)
            print("Prezzo del FIENO DI MEDICA DI I TAGLIO IN ROTOBALLE => %f EURO/ton" % prezzo_FIENO_MEDICA_17_1_TAGLIO_ROTBAL_B)
        else:
            print('%s' % prezzo_FIENO_MEDICA_17_1_TAGLIO_ROTBAL_B)
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_fieno_medica_II_taglio():
    try:
        global FIEME2TA_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_fieno_medica_II_taglio import FIEME2TA, FIEME2TA_arr
            ARRAYS.append(FIEME2TA)
        else:
            from importa_MySQLdb_fieno_medica_II_taglio_LYS_MET import FIEME2TA_mod, FIEME2TA_arr, PDIE_FIEME2TA, LysDI_FIEME2TA, MetDI_FIEME2TA
            ARRAYS.append(FIEME2TA_mod)
            PDIE.append(PDIE_FIEME2TA)
            PDIN.append(FIEME2TA_arr[11])
            LISINA.append(LysDI_FIEME2TA)
            METIONINA.append(MetDI_FIEME2TA)   
        from crea_db_PREZZI_Bologna_L import prezzo_FIENO_MEDICA_17_2_TAGLIO_ROTBAL_B
        S.append('fieno di medica di II taglio')
        ITEM = 'fiemed II'
        ITEMS.append(ITEM)
        ARR.append(FIEME2TA_arr)
        print('Alimento <FIENO DI MEDICA DI II TAGLIO IN ROTOBALLE> inserito con SUCCESSO!')
        if type(prezzo_FIENO_MEDICA_17_2_TAGLIO_ROTBAL_B) == float:
            PREZZI.append(prezzo_FIENO_MEDICA_17_2_TAGLIO_ROTBAL_B)
            print("Prezzo del FIENO DI MEDICA DI II TAGLIO IN ROTOBALLE => %f EURO/ton" % prezzo_FIENO_MEDICA_17_2_TAGLIO_ROTBAL_B)
        else:
            print('%s' % prezzo_FIENO_MEDICA_17_2_TAGLIO_ROTBAL_B)
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_fieno_silos_medica():
    try:
        global FIESIME_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_fieno_silos_medica import FIESIME_arr
            prezzo_FIENO_SILOS_MEDICA = 50.0
            S.append('fieno silos di erba medica')
            ITEM = 'fiesilomed'
            ITEMS.append(ITEM)
            ARRAYS.append(FIESIME_arr)
            ARR.append(FIESIME_arr)
            PREZZI.append(prezzo_FIENO_SILOS_MEDICA)
            print('Alimento <FIENO SILOS DI ERBA MEDICA inserito con SUCCESSO!')
            print("Costo di produzione stimato del FIENO SILOS DI ERBA MEDICA => 50 EURO/ton")
        else:
            print('Alimento non disponibile con il METODO <LYS_MET>')
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')

        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_fieno_prato_stabile_I_taglio():
    try:
        global FIEPRASTA1TA_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_fieno_prato_stabile_I_taglio import FIEPRASTA1TA, FIEPRASTA1TA_arr
            ARRAYS.append(FIEPRASTA1TA)
        else:
            from importa_MySQLdb_fieno_prato_stabile_I_taglio_LYS_MET import FIEPRASTA1TA_mod, FIEPRASTA1TA_arr, PDIE_FIEPRASTA1TA, LysDI_FIEPRASTA1TA, MetDI_FIEPRASTA1TA
            ARRAYS.append(FIEPRASTA1TA_mod)
            PDIE.append(PDIE_FIEPRASTA1TA)
            PDIN.append(FIEPRASTA1TA_arr[11])
            LISINA.append(LysDI_FIEPRASTA1TA)
            METIONINA.append(MetDI_FIEPRASTA1TA)   
        from crea_db_PREZZI_Milano_L import prezzo_FIENO_MAGGENGO
        S.append('fieno prato stabile di I taglio')
        ITEM = 'fieprasta I'
        ITEMS.append(ITEM)
        ARR.append(FIEPRASTA1TA_arr)
        print('Alimento <FIENO DI PRATO STABILE DI I TAGLIO> inserito con SUCCESSO!')
        if type(prezzo_FIENO_MAGGENGO) == float:
            PREZZI.append(prezzo_FIENO_MAGGENGO)
            print("Prezzo del FIENO DI PRATO STABILE DI I TAGLIO => %f EURO/ton" % prezzo_FIENO_MAGGENGO)
        else:
            print('%s' % prezzo_FIENO_MAGGENGO)
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_fieno_prato_stabile_II_taglio():
    try:
        global FIEPRASTA2TA_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_fieno_prato_stabile_II_taglio import FIEPRASTA2TA, FIEPRASTA2TA_arr
            ARRAYS.append(FIEPRASTA2TA)
        else:
            from importa_MySQLdb_fieno_prato_stabile_II_taglio_LYS_MET import FIEPRASTA2TA_mod, FIEPRASTA2TA_arr, PDIE_FIEPRASTA2TA, LysDI_FIEPRASTA2TA, MetDI_FIEPRASTA2TA
            ARRAYS.append(FIEPRASTA2TA_mod)
            PDIE.append(PDIE_FIEPRASTA2TA)
            PDIN.append(FIEPRASTA2TA_arr[11])
            LISINA.append(LysDI_FIEPRASTA2TA)
            METIONINA.append(MetDI_FIEPRASTA2TA)   
        from crea_db_PREZZI_Milano_L import prezzo_FIENO_AGOSTANO
        S.append('fieno prato stabile di II taglio')
        ITEM = 'fieprasta II'
        ITEMS.append(ITEM)
        ARR.append(FIEPRASTA2TA_arr)
        print('Alimento <FIENO DI PRATO STABILE DI II TAGLIO> inserito con SUCCESSO!')
        if type(prezzo_FIENO_AGOSTANO) == float:
            PREZZI.append(prezzo_FIENO_AGOSTANO)
            print("Prezzo del FIENO DI PRATO STABILE DI II TAGLIO => %f EURO/ton" % prezzo_FIENO_AGOSTANO)
        else:
            print('%s' % prezzo_FIENO_AGOSTANO)
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_paglia_frumento():
    try:
        global PAFRU_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_paglia_frumento import PAFRU, PAFRU_arr
            ARRAYS.append(PAFRU)
        else:
            from importa_MySQLdb_paglia_frumento_LYS_MET import PAFRU_mod, PAFRU_arr, PDIE_PAFRU, LysDI_PAFRU, MetDI_PAFRU
            ARRAYS.append(PAFRU_mod)
            PDIE.append(PDIE_PAFRU)
            PDIN.append(PAFRU_arr[11])
            LISINA.append(LysDI_PAFRU)
            METIONINA.append(MetDI_PAFRU)   
        from crea_db_PREZZI_Milano_L import prezzo_PAGLIA
        S.append('paglia di frumento')
        ITEM = 'paglia'
        ITEMS.append(ITEM)
        ARR.append(PAFRU_arr)
        print('Alimento <PAGLIA DI FRUMENTO> inserito con SUCCESSO!')
        if type(prezzo_PAGLIA) == float:
            PREZZI.append(prezzo_PAGLIA)
            print("Prezzo della PAGLIA DI FRUMENTO => %f EURO/ton" % prezzo_PAGLIA)
        else:
            print('%s' % prezzo_PAGLIA)
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_avena():
    try:
        global AV_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_avena import AV, AV_arr
            ARRAYS.append(AV)
        else:
            from importa_MySQLdb_avena_LYS_MET import AV_mod, AV_arr, PDIE_AV, LysDI_AV, MetDI_AV
            PDIE.append(PDIE_AV)
            PDIN.append(AV_arr[11])
            LISINA.append(LysDI_AV)
            METIONINA.append(MetDI_AV)   
        from crea_db_PREZZI_Milano_L import prezzo_AVENA
        S.append('avena')
        ITEM = 'avena'
        ITEMS.append(ITEM)
        ARRAYS.append(AV_mod)
        ARR.append(AV_arr)
        print('Alimento <AVENA> inserito con SUCCESSO!')
        if type(prezzo_AVENA) == float:
            PREZZI.append(prezzo_AVENA)
            print("Prezzo dell'AVENA => %f EURO/ton" % prezzo_AVENA)
        else:
            print('%s' % prezzo_AVENA)
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_frumento_tenero():
    try:
        global FRUTE_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_frumento_tenero import FRUTE, FRUTE_arr
            ARRAYS.append(FRUTE)
        else:
            from importa_MySQLdb_frumento_tenero_LYS_MET import FRUTE_mod, FRUTE_arr, PDIE_FRUTE, LysDI_FRUTE, MetDI_FRUTE
            ARRAYS.append(FRUTE_mod)
            PDIE.append(PDIE_FRUTE)
            PDIN.append(FRUTE_arr[11])
            LISINA.append(LysDI_FRUTE)
            METIONINA.append(MetDI_FRUTE)   
        from crea_db_PREZZI_Bologna_L import prezzo_FRUMENTO_B
        S.append('frumento tenero')
        ITEM = 'fru. tenero'
        ITEMS.append(ITEM)
        ARR.append(FRUTE_arr)
        print('Alimento <FRUMENTO TENERO> inserito con SUCCESSO!')
        if type(prezzo_FRUMENTO_B) == float:
            PREZZI.append(prezzo_FRUMENTO_B)
            print("Prezzo del FRUMENTO TENERO => %f EURO/ton" % prezzo_FRUMENTO_B)
        else:
            print('%s' % prezzo_FRUMENTO_B)
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_mais_granella():
#   try:
    global MAISGRA_arr
    if metodo == '_CNCPS_':
        from importa_MySQLdb_mais_granella import MAISGRA, MAISGRA_arr
        ARRAYS.append(MAISGRA)
    else:
        from importa_MySQLdb_mais_granella_LYS_MET import MAISGRA_mod, MAISGRA_arr, PDIE_MAISGRA, LysDI_MAISGRA, MetDI_MAISGRA
        ARRAYS.append(MAISGRA_mod)
        PDIE.append(PDIE_MAISGRA)
        PDIN.append(MAISGRA_arr[11])
        LISINA.append(LysDI_MAISGRA)
        METIONINA.append(MetDI_MAISGRA)   
    from crea_db_PREZZI_Milano_L import prezzo_MAIS
    S.append('mais granella')
    ITEM = 'mais'
    ITEMS.append(ITEM)
    ARR.append(MAISGRA_arr)
    print('Alimento <MAIS GRANELLA> inserito con SUCCESSO!')
    if type(prezzo_MAIS) == float:
        PREZZI.append(prezzo_MAIS)
        print("Prezzo del MAIS GRANELLA => %f EURO/ton" % prezzo_MAIS)
    else:
        print('%s' % prezzo_MAIS)
#   except NameError:
#       print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
#       print('')
#       print('Hai a disposizione i seguenti metodi:')
#       print('')
#       print('1) <cornell _CNCPS_>')
#       print('')
#       print('2) <INRA LYS_MET>')
#       print('')
#       print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_sorgo():
    try:
        global SORGO_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_sorgo import SORGO, SORGO_arr
            ARRAYS.append(SORGO)
        else:
            from importa_MySQLdb_sorgo_LYS_MET import SORGO_mod, SORGO_arr, PDIE_SORGO, LysDI_SORGO, MetDI_SORGO
            ARRAYS.append(SORGO_mod)
            PDIE.append(PDIE_SORGO)
            PDIN.append(SORGO_arr[11])
            LISINA.append(LysDI_SORGO)
            METIONINA.append(MetDI_SORGO)   
        from crea_db_PREZZI_Milano_L import prezzo_SORGO
        S.append('sorgo')
        ITEM = 'sorgo'
        ITEMS.append(ITEM)
        ARR.append(SORGO_arr)
        print('Alimento <SORGO> inserito con SUCCESSO!')
        if type(prezzo_SORGO) == float:
            PREZZI.append(prezzo_SORGO)
            print("Prezzo del SORGO => %f EURO/ton" % prezzo_SORGO)
        else:
            print('%s' % prezzo_SORGO)
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')

    
def importa_orzo():
    try:
        global ORZO_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_orzo import ORZO, ORZO_arr
            ARRAYS.append(ORZO)
        else:
            from importa_MySQLdb_orzo_LYS_MET import ORZO_mod, ORZO_arr, PDIE_ORZO, LysDI_ORZO, MetDI_ORZO
            ARRAYS.append(ORZO_mod)
            PDIE.append(PDIE_ORZO)
            PDIN.append(ORZO_arr[11])
            LISINA.append(LysDI_ORZO)
            METIONINA.append(MetDI_ORZO)   
        from crea_db_PREZZI_Milano_L import prezzo_ORZO
        S.append('orzo')
        ITEM = 'orzo'
        ITEMS.append(ITEM)
        ARR.append(ORZO_arr)
        print('Alimento <ORZO> inserito con SUCCESSO!')
        if type(prezzo_ORZO) == float:
            PREZZI.append(prezzo_ORZO)
            print("Prezzo dell'ORZO => %f EURO/ton" % prezzo_ORZO)
        else:
            print('%s' % prezzo_ORZO)
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_triticale():
    try:
        global TRIT_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_triticale import TRIT, TRIT_arr
            ARRAYS.append(TRIT)
        else:
            from importa_MySQLdb_triticale_LYS_MET import TRIT_mod, TRIT_arr, PDIE_TRIT, LysDI_TRIT, MetDI_TRIT
            ARRAYS.append(TRIT_mod)
            PDIE.append(PDIE_TRIT)
            PDIN.append(TRIT_arr[11])
            LISINA.append(LysDI_TRIT)
            METIONINA.append(MetDI_TRIT)   
        from crea_db_PREZZI_Milano_L import prezzo_TRITICALE
        S.append('triticale')
        ITEM = 'triticale'
        ITEMS.append(ITEM)
        ARR.append(TRIT_arr)
        print('Alimento <TRITICALE> inserito con SUCCESSO!')
        if type(prezzo_TRITICALE) == float:
            PREZZI.append(prezzo_TRITICALE)
            print("Prezzo del TRITICALE => %f EURO/ton" % prezzo_TRITICALE)
        else:
            print('%s' % prezzo_TRITICALE)
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_soia_integrale():
    try:
        global SOIAIN_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_soia_integrale import SOIAIN, SOIAIN_arr
            ARRAYS.append(SOIAIN)
        else:
            from importa_MySQLdb_soia_integrale_LYS_MET import SOIAIN_mod, SOIAIN_arr, PDIE_SOIAIN, LysDI_SOIAIN, MetDI_SOIAIN
            ARRAYS.append(SOIAIN_mod)
            PDIE.append(PDIE_SOIAIN)
            PDIN.append(SOIAIN_arr[11])
            LISINA.append(LysDI_SOIAIN)
            METIONINA.append(MetDI_SOIAIN)   
        from crea_db_PREZZI_Milano_L import prezzo_SOIA
        S.append('soia integrale')
        ITEM = 'soia int.'
        ITEMS.append(ITEM)
        ARR.append(SOIAIN_arr)
        print('Alimento <SOIA INTEGRALE> inserito con SUCCESSO!')
        if type(prezzo_SOIA) == float:
            PREZZI.append(prezzo_SOIA)
            print("Prezzo della SOIA INTEGRALE => %f EURO/ton" % prezzo_SOIA)
        else:
            print('%s' % prezzo_SOIA)
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_pisello():
    try:
        global PISELLO_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_pisello import PISELLO, PISELLO_arr
            ARRAYS.append(PISELLO)
        else:
            from importa_MySQLdb_pisello_LYS_MET import PISELLO_mod, PISELLO_arr, PDIE_PISELLO, LysDI_PISELLO, MetDI_PISELLO
            ARRAYS.append(PISELLO_mod)
            PDIE.append(PDIE_PISELLO)
            PDIN.append(PISELLO_arr[11])
            LISINA.append(LysDI_PISELLO)
            METIONINA.append(MetDI_PISELLO)   
        from crea_db_PREZZI_Milano_L import prezzo_PISELLO
        S.append('pisello')
        ITEM = 'pisello'
        ITEMS.append(ITEM)
        ARR.append(PISELLO_arr)
        print('Alimento <PISELLO> inserito con SUCCESSO!')
        if type(prezzo_PISELLO) == float:
            PREZZI.append(prezzo_PISELLO)
            print("Prezzo del PISELLO => %f EURO/ton" % prezzo_PISELLO)
        else:
            print('%s' % prezzo_PISELLO)
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_favino():
    try:
        global FAVINO_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_favino import FAVINO, FAVINO_arr
            ARRAYS.append(FAVINO)
        else:
            from importa_MySQLdb_favino_LYS_MET import FAVINO_mod, FAVINO_arr, PDIE_FAVINO, LysDI_FAVINO, MetDI_FAVINO
            ARRAYS.append(FAVINO_mod)
            PDIE.append(PDIE_FAVINO)
            PDIN.append(FAVINO_arr[11])
            LISINA.append(LysDI_FAVINO)
            METIONINA.append(MetDI_FAVINO)   
        from crea_db_PREZZI_Bologna_L import prezzo_FAVINO_B
        S.append('favino')
        ITEM = 'favino'
        ITEMS.append(ITEM)
        ARR.append(FAVINO_arr)
        print('Alimento <FAVINO> inserito con SUCCESSO!')
        if type(prezzo_FAVINO_B) == float:
            PREZZI.append(prezzo_FAVINO_B)
            print("Prezzo del FAVINO => %f EURO/ton" % prezzo_FAVINO_B)
        else:
            print('%s' % prezzo_FAVINO_B) 
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_lupino():
    try:
        global LU_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_lupino import LU, LU_arr
            ARRAYS.append(LU)
        else:
            from importa_MySQLdb_lupino_LYS_MET import LU_mod, LU_arr, PDIE_LU, LysDI_LU, MetDI_LU
            ARRAYS.append(LU_mod)
            PDIE.append(PDIE_LU)
            PDIN.append(LU_arr[11])
            LISINA.append(LysDI_LU)
            METIONINA.append(MetDI_LU)   
        from crea_db_PREZZI_Alessandria_L import prezzo_LUPINO
        prezzo_LUPINO = float(prezzo_LUPINO)
        S.append('lupino')
        ITEM = 'lupino'
        ITEMS.append(ITEM)
        ARR.append(LU_arr)
        print('Alimento <LUPINO> inserito con SUCCESSO!')
        if type(prezzo_LUPINO) == float:
            PREZZI.append(prezzo_LUPINO)
            print("Prezzo del LUPINO => %f EURO/ton" % prezzo_LUPINO)
        else:
            print('%s' % prezzo_LUPINO)
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_frumento_tritello():
    try:
        global FRUTRI_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_frumento_tritello import FRUTRI_arr
            from crea_db_PREZZI_Milano_L import prezzo_FRUMENTO_TENERO_TRITELLO
            S.append('tritello di frumento')
            ITEM = 'fru. trit.'
            ITEMS.append(ITEM)
            ARRAYS.append(FRUTRI_arr)
            ARR.append(FRUTRI_arr)
            print('Alimento <FRUMENTO TRITELLO> inserito con SUCCESSO!')
            if type(prezzo_FRUMENTO_TENERO_TRITELLO) == float:
                PREZZI.append(prezzo_FRUMENTO_TENERO_TRITELLO)
                print("Prezzo del FRUMENTO TRITELLO => %f EURO/ton" % prezzo_FRUMENTO_TENERO_TRITELLO)
            else:
                print('%s' % prezzo_FRUMENTO_TENERO_TRITELLO)
        else:
            print('Alimento non disponibile con il METODO <LYS_MET>')
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_frumento_tenero_farinaccio():
    try:
        global FRUTEFA_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_frumento_tenero_farinaccio import FRUTEFA, FRUTEFA_arr
            ARRAYS.append(FRUTEFA)
        else:
            from importa_MySQLdb_frumento_tenero_farinaccio_LYS_MET import FRUTEFA_mod, FRUTEFA_arr, PDIE_FRUTEFA, LysDI_FRUTEFA, MetDI_FRUTEFA
            ARRAYS.append(FRUTEFA_mod)
            PDIE.append(PDIE_FRUTEFA)
            PDIN.append(FRUTEFA_arr[11])
            LISINA.append(LysDI_FRUTEFA)
            METIONINA.append(MetDI_FRUTEFA)   
        from crea_db_PREZZI_Milano_L import prezzo_FRUMENTO_TENERO_FARINACCIO
        S.append('farinaccio di frumento tenero')
        ITEM = 'farinac. frute'
        ITEMS.append(ITEM)
        ARR.append(FRUTEFA_arr)
        print('Alimento <FRUMENTO TENERO FARINACCIO> inserito con SUCCESSO!')
        if type(prezzo_FRUMENTO_TENERO_FARINACCIO) == float:
            PREZZI.append(prezzo_FRUMENTO_TENERO_FARINACCIO)
            print("Prezzo del FRUMENTO FARINACCIO => %f EURO/ton" % prezzo_FRUMENTO_TENERO_FARINACCIO)
        else:
            print('%s' % prezzo_FRUMENTO_TENERO_FARINACCIO)
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_frumento_duro_farinaccio():
    try:
        global FRUDUFA_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_frumento_duro_farinaccio import FRUDUFA_arr
            from crea_db_PREZZI_Milano_L import prezzo_FRUMENTO_DURO_FARINACCIO
            S.append('farinaccio di frumento duro')
            ITEM = 'farinac. frudu'
            ITEMS.append(ITEM)
            ARRAYS.append(FRUDUFA_arr)
            ARR.append(FRUDUFA_arr)
            print('Alimento <FRUMENTO DURO FARINACCIO> inserito con SUCCESSO!')
            if type(prezzo_FRUMENTO_DURO_FARINACCIO) == float:
                PREZZI.append(prezzo_FRUMENTO_DURO_FARINACCIO)
                print("Prezzo del FRUMENTO FARINACCIO => %f EURO/ton" % prezzo_FRUMENTO_DURO_FARINACCIO)
            else:
                print('%s' % prezzo_FRUMENTO_DURO_FARINACCIO)
        else:
            print('Alimento non disponibile con il METODO <LYS_MET>')
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')

        
def importa_frumento_tenero_germe():
    try:
        global FRUTEGE_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_frumento_tenero_germe import FRUTEGE_arr
            from crea_db_PREZZI_Milano_L import prezzo_FRUMENTO_TENERO_GERME
            S.append('germe di frumento tenero')
            ITEM = 'germe frute'
            ITEMS.append(ITEM)
            ARRAYS.append(FRUTEGE_arr)
            ARR.append(FRUTEGE_arr)
            print('Alimento <FRUMENTO TENERO GERME> inserito con SUCCESSO!')
            if type(prezzo_FRUMENTO_TENERO_GERME) == float:
                PREZZI.append(prezzo_FRUMENTO_TENERO_GERME)
                print("Prezzo del FRUMENTO TENERO GERME => %f EURO/ton" % prezzo_FRUMENTO_TENERO_GERME)
            else:
                print('%s' % prezzo_FRUMENTO_TENERO_GERME)
        else:
            print('Alimento non disponibile con il METODO <LYS_MET>')
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')

        
def importa_mais_glutine():
    try:
        global MAISGLU_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_mais_glutine import MAISGLU_arr
            from crea_db_PREZZI_Milano_L import prezzo_GLUTINE
            S.append('glutine di mais')
            ITEM = 'glut. mais'
            ITEMS.append(ITEM)
            ARRAYS.append(MAISGLU_arr)
            ARR.append(MAISGLU_arr)
            print('Alimento <GLUTINE DI MAIS> inserito con SUCCESSO!')
            if type(prezzo_GLUTINE) == float:
                PREZZI.append(prezzo_GLUTINE)
                print("Prezzo del GLUTINE DI MAIS => %f EURO/ton" % prezzo_GLUTINE)
            else:
                print('%s' % prezzo_GLUTINE)
        else:
            print('Alimento non disponibile con il METODO <LYS_MET>')
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')

        
def importa_mais_semola_glutinata():
    try:
        global MAISSEGLU_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_mais_semola_glutinata import MAISSEGLU, MAISSEGLU_arr
            ARRAYS.append(MAISSEGLU)
        else:
            from importa_MySQLdb_mais_semola_glutinata_LYS_MET import MAISSEGLU_mod, MAISSEGLU_arr, PDIE_MAISSEGLU, LysDI_MAISSEGLU, MetDI_MAISSEGLU
            ARRAYS.append(MAISSEGLU_mod)
            PDIE.append(PDIE_MAISSEGLU)
            PDIN.append(MAISSEGLU_arr[11])
            LISINA.append(LysDI_MAISSEGLU)
            METIONINA.append(MetDI_MAISSEGLU)   
        from crea_db_PREZZI_Milano_L import prezzo_MAIS_SEMOLA_GLUTINATA
        S.append('semola glutinata di mais')
        ITEM = 'sem.glut.mais'
        ITEMS.append(ITEM)
        ARR.append(MAISSEGLU_arr)
        print('Alimento <SEMOLA GLUTINATA DI MAIS> inserito con SUCCESSO!')
        if type(prezzo_MAIS_SEMOLA_GLUTINATA) == float:
            PREZZI.append(prezzo_MAIS_SEMOLA_GLUTINATA)
            print("Prezzo della SEMOLA GLUTINATA DI MAIS => %f EURO/ton" % prezzo_MAIS_SEMOLA_GLUTINATA)
        else:
            print('%s' % prezzo_MAIS_SEMOLA_GLUTINATA)
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_riso_farinaccio():
    try:
        global RIFARINACCIO_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_riso_farinaccio import RIFARINACCIO_arr
            from crea_db_PREZZI_Milano_L import prezzo_RISO_FARINACCIO
            S.append('farinaccio di riso')
            ITEM = 'farinac. ris'
            ITEMS.append(ITEM)
            ARRAYS.append(RIFARINACCIO_arr)
            ARR.append(RIFARINACCIO_arr)
            print('Alimento <FARINACCIO DI RISO> inserito con SUCCESSO!')
            if type(prezzo_RISO_FARINACCIO) == float:
                PREZZI.append(prezzo_RISO_FARINACCIO)
                print("Prezzo del FARINACCIO DI RISO => %f EURO/ton" % prezzo_RISO_FARINACCIO)
            else:
                print('%s' % prezzo_RISO_FARINACCIO)
        else:
            print('Alimento non disponibile con il METODO <LYS_MET>')
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_riso_gemma():
    try:
        global RIGEMMA_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_riso_gemma import RIGEMMA_arr
            S.append('gemma di riso')
            ITEM = 'gemma riso'
            ITEMS.append(ITEM)
            ARRAYS.append(RIGEMMA_arr)
            prezzo_RISO_GEMMA = 400.0
            ARR.append(RIGEMMA_arr)
            PREZZI.append(prezzo_RISO_GEMMA)
            print('Alimento <GEMMA DI RISO> inserito con SUCCESSO!')
            print('Prezzo stimato della GEMMA DI RISO => 400 EURO/ton')
        else:
            print('Alimento non disponibile con il METODO <LYS_MET>')
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')

        
def importa_riso_grana_verde():
    try:
        global RIGRVER_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_riso_grana_verde import RIGRVER_arr
            from crea_db_PREZZI_Milano_L import prezzo_RISO_GRANA_VERDE
            S.append('grana verde di riso')
            ITEM = 'graver.riso'
            ITEMS.append(ITEM)
            ARRAYS.append(RIGRVER_arr)
            ARR.append(RIGRVER_arr)
            print('Alimento <GRANA VERDE DI RISO> inserito con SUCCESSO!')
            if type(prezzo_RISO_GRANA_VERDE) == float:
                PREZZI.append(prezzo_RISO_GRANA_VERDE)
                print("Prezzo della GRANA VERDE DI RISO => %f EURO/ton" % prezzo_RISO_GRANA_VERDE)
            else:
                print('%s' % prezzo_RISO_GRANA_VERDE)
        else:
            print('Alimento non disponibile con il METODO <LYS_MET>')
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_riso_rottura():
    try:
        global RIROTTU_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_riso_rottura import RIROTTU, RIROTTU_arr
            ARRAYS.append(RIROTTU)
        else:
            from importa_MySQLdb_riso_rottura_LYS_MET import RIROTTU_mod, RIROTTU_arr, PDIE_RIROTTU, LysDI_RIROTTU, MetDI_RIROTTU
            ARRAYS.append(RIROTTU_mod)
            PDIE.append(PDIE_RIROTTU)
            PDIN.append(RIROTTU_arr[11])
            LISINA.append(LysDI_RIROTTU)
            METIONINA.append(MetDI_RIROTTU)   
        from crea_db_PREZZI_Milano_L import prezzo_RISO_GRANA_VERDE
        S.append('rottura di riso')
        ITEM = 'rott.riso'
        ITEMS.append(ITEM)
        ARR.append(RIROTTU_arr)
        print('Alimento <ROTTURA DI RISO> inserito con SUCCESSO!')
        if type(prezzo_RISO_GRANA_VERDE) == float:
            PREZZI.append(prezzo_RISO_GRANA_VERDE)
            print("Prezzo della ROTTURA DI RISO => %f EURO/ton" % prezzo_RISO_GRANA_VERDE)
        else:
            print('%s' % prezzo_RISO_GRANA_VERDE)
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')

    
def importa_bietola_polpe_surpressate():
    try:
        global BIEPOLSURPR_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_bietola_polpe_surpressate import BIEPOLSURPR, BIEPOLSURPR_arr
            ARRAYS.append(BIEPOLSURPR)
        else:
            from importa_MySQLdb_bietola_polpe_surpressate_LYS_MET import BIEPOLSURPR_mod, BIEPOLSURPR_arr, PDIE_BIEPOLSURPR, LysDI_BIEPOLSURPR, MetDI_BIEPOLSURPR
            ARRAYS.append(BIEPOLSURPR_mod)
            PDIE.append(PDIE_BIEPOLSURPR)
            PDIN.append(BIEPOLSURPR_arr[11])
            LISINA.append(LysDI_BIEPOLSURPR)
            METIONINA.append(MetDI_BIEPOLSURPR)   
        from crea_db_PREZZI_Milano_L import prezzo_BIETOLA_POLPE_SECCHE
        S.append('polpe surpressate di bietola')
        ITEM = 'pl.sur.bie'
        ITEMS.append(ITEM)
        ARR.append(BIEPOLSURPR_arr)
        print('Alimento <POLPE SURPRESSATE DI BIETOLA> inserito con SUCCESSO!')
        if type(prezzo_BIETOLA_POLPE_SECCHE) == float:
            PREZZI.append(prezzo_BIETOLA_POLPE_SECCHE)
            print("Prezzo delle POLPE SURPRESSATE DI BIETOLA => %f EURO/ton" % prezzo_BIETOLA_POLPE_SECCHE)
        else:
            print('%s' % prezzo_BIETOLA_POLPE_SECCHE)
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_bietola_polpe_secche():
    try:
        global BIEPOLPSE_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_bietola_polpe_secche import BIEPOLPSE, BIEPOLPSE_arr
            ARRAYS.append(BIEPOLPSE)
        else:
            from importa_MySQLdb_bietola_polpe_secche_LYS_MET import BIEPOLPSE_mod, BIEPOLPSE_arr, PDIE_BIEPOLPSE, LysDI_BIEPOLPSE, MetDI_BIEPOLPSE
            ARRAYS.append(BIEPOLPSE_mod)
            PDIE.append(PDIE_BIEPOLPSE)
            PDIN.append(BIEPOLPSE_arr[11])
            LISINA.append(LysDI_BIEPOLPSE)
            METIONINA.append(MetDI_BIEPOLPSE)   
        from crea_db_PREZZI_Milano_L import prezzo_BIETOLA_POLPE_SECCHE
        S.append('polpe secche di bietola')
        ITEM = 'pl.sec.bie'
        ITEMS.append(ITEM)
        ARR.append(BIEPOLPSE_arr)
        print('Alimento <POLPE SECCHE DI BIETOLA> inserito con SUCCESSO!')
        if type(prezzo_BIETOLA_POLPE_SECCHE) == float:
            PREZZI.append(prezzo_BIETOLA_POLPE_SECCHE)
            print("Prezzo delle POLPE SECCHE DI BIETOLA => %f EURO/ton" % prezzo_BIETOLA_POLPE_SECCHE)
        else:
            print('%s' % prezzo_BIETOLA_POLPE_SECCHE)
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_manioca():
    try:
        global MANIO_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_manioca import MANIO, MANIO_arr
            ARRAYS.append(MANIO)
        else:
            from importa_MySQLdb_manioca_LYS_MET import MANIO_mod, MANIO_arr, PDIE_MANIO, LysDI_MANIO, MetDI_MANIO
            ARRAYS.append(MANIO_mod)
            PDIE.append(PDIE_MANIO)
            PDIN.append(MANIO_arr[11])
            LISINA.append(LysDI_MANIO)
            METIONINA.append(MetDI_MANIO)   
        S.append('manioca')
        ITEM = 'manioca'
        ITEMS.append(ITEM)
        ARR.append(MANIO_arr)
        print('Alimento <MANIOCA> inserito con SUCCESSO!')
        prezzo_MANIOCA = 350.0
        if type(prezzo_MANIOCA) == float:
            PREZZI.append(prezzo_MANIOCA)
            print("Prezzo stimato della MANIOCA => %f EURO/ton" % prezzo_MANIOCA)
        else:
            print('Prezzo della MANIOCA non disponibile')
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')

    
def importa_melasso_barbabietola():
#   try:
    global MEBARBA_arr
    from crea_db_PREZZI_Milano_L import prezzo_MELASSO
    if metodo == '_CNCPS_':
        from importa_MySQLdb_melasso_barbabietola import MEBARBA, MEBARBA_arr
        ARRAYS.append(MEBARBA)
    else:
        from importa_MySQLdb_melasso_barbabietola_LYS_MET import MEBARBA_mod, MEBARBA_arr, PDIE_MEBARBA, LysDI_MEBARBA, MetDI_MEBARBA
        ARRAYS.append(MEBARBA_mod)
        PDIE.append(PDIE_MEBARBA)
        PDIN.append(MEBARBA_arr[11])
        LISINA.append(LysDI_MEBARBA)
        METIONINA.append(MetDI_MEBARBA)     
    S.append('melasso di barbabietola')
    ITEM = 'mel.biet.'
    ITEMS.append(ITEM)
    ARR.append(MEBARBA_arr)
    print('Alimento <MELASSO DI BARBABIETOLA> inserito con SUCCESSO!')
    if type(prezzo_MELASSO) == float:
        PREZZI.append(prezzo_MELASSO)
        print("Prezzo del MELASSO DI BARBABIETOLA => %f EURO/ton" % prezzo_MELASSO)
    else:
        print('%s' % prezzo_MELASSO) 
#   except NameError:
#       print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
#       print('')
#       print('Hai a disposizione i seguenti metodi:')
#       print('')
#       print('1) <cornell _CNCPS_>')
#       print('')
#       print('2) <INRA LYS_MET>')
#       print('')
#       print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_melasso_canna():
    try:
        global MECANNA_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_melasso_canna import MECANNA, MECANNA_arr
            ARRAYS.append(MECANNA)
        else:
            from importa_MySQLdb_melasso_canna_LYS_MET import MECANNA_mod, MECANNA_arr, PDIE_MECANNA, LysDI_MECANNA, MetDI_MECANNA
            ARRAYS.append(MECANNA_mod)
            PDIE.append(PDIE_MECANNA)
            PDIN.append(MECANNA_arr[11])
            LISINA.append(LysDI_MECANNA)
            METIONINA.append(MetDI_MECANNA)   
        from crea_db_PREZZI_Milano_L import prezzo_MELASSO
        S.append('melasso di canna')
        ITEM = 'mel.canna'
        ITEMS.append(ITEM)
        ARR.append(MECANNA_arr)
        print('Alimento <MELASSO DI CANNA> inserito con SUCCESSO!')
        if type(prezzo_MELASSO) == float:
            PREZZI.append(prezzo_MELASSO)
            print("Prezzo del MELASSO DI CANNA => %f EURO/ton" % prezzo_MELASSO)
        else:
            print('%s' % prezzo_MELASSO)    
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_patate_essiccate():
    try:
        global PAESSI_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_patate_essiccate import PAESSI, PAESSI_arr
            ARRAYS.append(PAESSI)
        else:
            from importa_MySQLdb_patate_essiccate_LYS_MET import PAESSI_mod, PAESSI_arr, PDIE_PAESSI, LysDI_PAESSI, MetDI_PAESSI
            ARRAYS.append(PAESSI_mod)
            PDIE.append(PDIE_PAESSI)
            PDIN.append(PAESSI_arr[11])
            LISINA.append(LysDI_PAESSI)
            METIONINA.append(MetDI_PAESSI)   
        S.append('patate essiccate')
        ITEM = 'pat.ess.'
        ITEMS.append(ITEM)
        ARR.append(PAESSI_arr)
        print('Alimento <PATATE ESSICCATE> inserito con SUCCESSO!')
        prezzo_PATATE_ESSICCATE = 350.0
        if type(prezzo_PATATE_ESSICCATE) == float:
            PREZZI.append(prezzo_PATATE_ESSICCATE)
            print("Prezzo stimato delle PATATE ESSICCATE => %f EURO/ton" % prezzo_PATATE_ESSICCATE)
        else:
            print('Prezzo delle PATATE ESSICCATE non disponibile')
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')

        
def importa_proteina_patata():
    try:
        global PROPA_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_proteina_patata import PROPA, PROPA_arr
            ARRAYS.append(PROPA)
        else:
            from importa_MySQLdb_proteina_patata_LYS_MET import PROPA_mod, PROPA_arr, PDIE_PROPA, LysDI_PROPA, MetDI_PROPA
            ARRAYS.append(PROPA_mod)
            PDIE.append(PDIE_PROPA)
            PDIN.append(PROPA_arr[11])
            LISINA.append(LysDI_PROPA)
            METIONINA.append(MetDI_PROPA)   
        S.append('proteina di patata')
        ITEM = 'prot.pat.'
        ITEMS.append(ITEM)
        ARR.append(PROPA_arr) 
        print('Alimento <PROTEINA DI PATATA> inserito con SUCCESSO!')
        prezzo_PROTEINA_PATATA = 350.0
        if type(prezzo_PROTEINA_PATATA) == float:
            PREZZI.append(prezzo_PROTEINA_PATATA)
            print("Prezzo stimato della PROTEINA DI PATATA => %f EURO/ton" % prezzo_PROTEINA_PATATA)
        else:
            print('Prezzo della PROTEINA DI PATATA non disponibile')
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')

               
def importa_carruba_polpa_denocciolata():
    try:
        global CARRPOLDEN_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_carruba_polpa_denocciolata import CARRPOLDEN, CARRPOLDEN_arr
        else:
            from importa_MySQLdb_carruba_polpa_denocciolata_LYS_MET import CARRPOLDEN_mod, CARRPOLDEN_arr, PDIE_CARRPOLDEN, LysDI_CARRPOLDEN, MetDI_CARRPOLDEN
            PDIE.append(PDIE_CARRPOLDEN)
            PDIN.append(CARRPOLDEN_arr[11])
            LISINA.append(LysDI_CARRPOLDEN)
            METIONINA.append(MetDI_CARRPOLDEN)   
        from crea_db_PREZZI_Milano_L import prezzo_CARRUBE_FRANTUMATE
        S.append('polpa denocciolata di carruba')
        ITEM = 'pl.carruba'
        ITEMS.append(ITEM)
        ARRAYS.append(CARRPOLDEN_mod)
        ARR.append(CARRPOLDEN_arr)
        print('Alimento <POLPA DENOCCIOLATA DI CARRUBA> inserito con SUCCESSO!')
        if type(prezzo_CARRUBE_FRANTUMATE) == float:
            PREZZI.append(prezzo_CARRUBE_FRANTUMATE)
            print("Prezzo della POLPA DENOCCIOLATA DI CARRUBA => %f EURO/ton" % prezzo_CARRUBE_FRANTUMATE)
        else:
            print('%s' % prezzo_CARRUBE_FRANTUMATE)  
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_birra_lievito():
    try:
        global BILIE_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_birra_lievito import BILIE_arr
            S.append('lievito di birra')
            ITEM = 'lievito'
            ITEMS.append(ITEM)
            ARRAYS.append(BILIE_arr)
            ARR.append(BILIE_arr)
            print('Alimento <LIEVITO DI BIRRA> inserito con SUCCESSO!')
            prezzo_LIEVITO_BIRRA = 350.0
            if type(prezzo_LIEVITO_BIRRA) == float:
                PREZZI.append(prezzo_LIEVITO_BIRRA)
                print("Prezzo stimato del LIEVITO DI BIRRA => %f EURO/ton" % prezzo_LIEVITO_BIRRA)
            else:
                print('Prezzo del LIEVITO DI BIRRA non disponibile')
        else:
            print('Alimento non disponibile con il METODO <LYS_MET>')
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')

            
def importa_agrumi_pastazzo_secco():
#   try:
    global AGRPASE_arr
    if metodo == '_CNCPS_':
        from importa_MySQLdb_agrumi_pastazzo_secco import AGRPASE, AGRPASE_arr
        ARRAYS.append(AGRPASE)
    else:
        from importa_MySQLdb_agrumi_pastazzo_secco_LYS_MET import AGRPASE_mod, AGRPASE_arr, PDIE_AGRPASE, LysDI_AGRPASE, MetDI_AGRPASE
        PDIE.append(PDIE_AGRPASE)
        PDIN.append(AGRPASE_arr[11])
        LISINA.append(LysDI_AGRPASE)
        METIONINA.append(MetDI_AGRPASE)
        ARRAYS.append(AGRPASE_mod)   
    S.append('pastazzo secco di agrumi')
    ITEM = 'pastagrumi'
    ITEMS.append(ITEM)
    ARR.append(AGRPASE_arr)
    print('Alimento <PASTAZZO SECCO DI AGRUMI> inserito con SUCCESSO!')
    prezzo_PASTAZZO_AGRUMI = 350.0
    if type(prezzo_PASTAZZO_AGRUMI) == float:
        PREZZI.append(prezzo_PASTAZZO_AGRUMI)
        print("Prezzo stimato del PASTAZZO SECCO DI AGRUMI => %f EURO/ton" % prezzo_PASTAZZO_AGRUMI)
    else:
        print('Prezzo del PASTAZZO SECCO DI AGRUMI non disponibile')
#   except NameError:
#       print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
#       print('')
#       print('Hai a disposizione i seguenti metodi:')
#       print('')
#       print('1) <cornell _CNCPS_>')
#       print('')
#       print('2) <INRA LYS_MET>')
#       print('')
#       print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_calcio_saponi():
    try:
        global CASAP_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_calcio_saponi import CASAP_arr
            S.append('saponi di calcio')
            ITEM = 'saponi.Ca'
            ITEMS.append(ITEM)
            ARRAYS.append(CASAP_arr)
            ARR.append(CASAP_arr)  
            print('Alimento <SAPONI DI CALCIO> inserito con SUCCESSO!')
            prezzo_SAPONI_CALCIO = 350.0
            if type(prezzo_SAPONI_CALCIO) == float:
                PREZZI.append(prezzo_SAPONI_CALCIO)
                print("Prezzo stimato dei SAPONI DI CALCIO => %f EURO/ton" % prezzo_SAPONI_CALCIO)
            else:
                print('Prezzo dei SAPONI DI CALCIO non disponibile')
        else:
            print('Alimento non disponibile con il METODO <LYS_MET>')
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')

        
def importa_latte_magro_polvere():
    try:
        global LATMAPOL_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_latte_magro_polvere import LATMAPOL, LATMAPOL_arr
            ARRAYS.append(LATMAPOL_mod)
        else:
            from importa_MySQLdb_latte_magro_polvere_LYS_MET import LATMAPOL_mod, LATMAPOL_arr, PDIE_LATMAPOL, LysDI_LATMAPOL, MetDI_LATMAPOL
            ARRAYS.append(LATMAPOL_mod)
            PDIE.append(PDIE_LATMAPOL)
            PDIN.append(LATMAPOL_arr[11])
            LISINA.append(LysDI_LATMAPOL)
            METIONINA.append(MetDI_LATMAPOL)   
        S.append('latte magro in polvere')
        ITEM = 'latt.magr.pol'
        ITEMS.append(ITEM)
        ARR.append(LATMAPOL_arr)
        print('Alimento <LATTE MAGRO IN POLVERE> inserito con SUCCESSO!')
        prezzo_LATTE_MAGRO_POLVERE = 350.0
        if type(prezzo_LATTE_MAGRO_POLVERE) == float:
            PREZZI.append(prezzo_LATTE_MAGRO_POLVERE)
            print("Prezzo stimato del LATTE MAGRO IN POLVERE => %f EURO/ton" % prezzo_LATTE_MAGRO_POLVERE)
        else:
            print('Prezzo del LATTE MAGRO IN POLVERE non disponibile')     
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_latte_siero():
    try:
        global LATSIE_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_latte_siero import LATSIE_arr
            S.append('siero di latte')
            ITEM = 'siero.lat'
            ITEMS.append(ITEM)
            ARRAYS.append(LATSIE_arr)
            ARR.append(LATSIE_arr)
            print('Alimento <SIERO DI LATTE> inserito con SUCCESSO!')
            prezzo_LATTE_SIERO = 350.0
            if type(prezzo_LATTE_SIERO) == float:
                PREZZI.append(prezzo_LATTE_MAGRO_POLVERE)
                print("Prezzo stimato del SIERO DI latte => %fx100 EURO/ton" % prezzo_LATTE_SIERO)
            else:
                print('Prezzo del SIERO DI LATTE non disponibile')    
        else:
            print('Alimento non disponibile con il METODO <LYS_MET>')
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')

        
def importa_crusca_frumento_tenero():
    try:
        global CRUFRUTE_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_crusca_frumento_tenero import CRUFRUTE, CRUFRUTE_arr
            ARRAYS.append(CRUFRUTE)
        else:
            from importa_MySQLdb_crusca_frumento_tenero_LYS_MET import CRUFRUTE_mod, CRUFRUTE_arr, PDIE_CRUFRUTE, LysDI_CRUFRUTE, MetDI_CRUFRUTE
            ARRAYS.append(CRUFRUTE_mod)
            PDIE.append(PDIE_CRUFRUTE)
            PDIN.append(CRUFRUTE_arr[11])
            LISINA.append(LysDI_CRUFRUTE)
            METIONINA.append(MetDI_CRUFRUTE)   
        from crea_db_PREZZI_Milano_L import prezzo_FRUMENTO_TENERO_CRUSCA
        S.append('crusca frumento tenero')
        ITEM = 'crusca.fru.ten'
        ITEMS.append(ITEM)
        ARR.append(CRUFRUTE_arr)
        print('Alimento <CRUSCA DI FRUMENTO TENERO> inserito con SUCCESSO!')
        if type(prezzo_FRUMENTO_TENERO_CRUSCA) == float:
            PREZZI.append(prezzo_FRUMENTO_TENERO_CRUSCA)
            print("Prezzo della CRUSCA DI FRUMENTO TENERO => %f EURO/ton" % prezzo_FRUMENTO_TENERO_CRUSCA)
        else:
            print('%s' % prezzo_FRUMENTO_TENERO_CRUSCA)    
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_crusca_frumento_duro():
    try:
        global CRUFRUDU_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_crusca_frumento_duro import CRUFRUDU, CRUFRUDU_arr
            ARRAYS.append(CRUFRUDU_mod)
        else:
            from importa_MySQLdb_crusca_frumento_duro_LYS_MET import CRUFRUDU_mod, CRUFRUDU_arr, PDIE_CRUFRUDU, LysDI_CRUFRUDU, MetDI_CRUFRUDU
            ARRAYS.append(CRUFRUDU_mod)
            PDIE.append(PDIE_CRUFRUDU)
            PDIN.append(CRUFRUDU_arr[11])
            LISINA.append(LysDI_CRUFRUDU)
            METIONINA.append(MetDI_CRUFRUDU)   
        from crea_db_PREZZI_Bologna_L import prezzo_FRUMENTO_DURO_CRUSCA_CRUSCHELLO_TRITELLO_B
        prezzo_FRUMENTO_DURO_CRUSCA_CRUSCHELLO_TRITELLO_B = float(prezzo_FRUMENTO_DURO_CRUSCA_CRUSCHELLO_TRITELLO_B)
        S.append('crusca frumento duro')
        ITEM = 'crusca.fru.du'
        ITEMS.append(ITEM)
        ARR.append(CRUFRUDU_arr)
        PREZZI.append(prezzo_FRUMENTO_DURO_CRUSCA_CRUSCHELLO_TRITELLO_B)
        print('Alimento <CRUSCA DI FRUMENTO DURO> inserito con SUCCESSO!')
        if type(prezzo_FRUMENTO_DURO_CRUSCA_CRUSCHELLO_TRITELLO_B) == float:
            PREZZI.append(prezzo_FRUMENTO_DURO_CRUSCA_CRUSCHELLO_TRITELLO_B)
            print("Prezzo della CRUSCA DI FRUMENTO DURO => %f EURO/ton" % prezzo_FRUMENTO_DURO_CRUSCA_CRUSCHELLO_TRITELLO_B)
        else:
            print('%s' % prezzo_FRUMENTO_DURO_CRUSCA_CRUSCHELLO_TRITELLO_B)    
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_cruschello_frumento_tenero():
    try:
        global CRUSCHFRUTE_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_cruschello_frumento_tenero import CRUSCHFRUTE_arr
            from crea_db_PREZZI_Milano_L import prezzo_FRUMENTO_TENERO_CRUSCHELLO
            S.append('cruschello di frumento tenero')
            ITEM = 'cruschello.ten.'
            ITEMS.append(ITEM)
            ARRAYS.append(CRUSCHFRUTE_arr)
            ARR.append(CRUSCHFRUTE_arr)
            print('Alimento <CRUSCHELLO DI FRUMENTO TENERO> inserito con SUCCESSO!')
            if type(prezzo_FRUMENTO_TENERO_CRUSCHELLO) == float:
                PREZZI.append(prezzo_FRUMENTO_TENERO_CRUSCHELLO)
                print("Prezzo della CRUSCHELLO DI FRUMENTO TENERO => %f EURO/ton" % prezzo_FRUMENTO_TENERO_CRUSCHELLO)
            else:
                print('%s' % prezzo_FRUMENTO_TENERO_CRUSCHELLO)  
        else:
            print('Alimento non disponibile con il METODO <LYS_MET>')
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')

        
def importa_cruschello_frumento_duro():
    try:
        global CRUSCHFRUDU_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_cruschello_frumento_duro import CRUSCHFRUDU_arr
            from crea_db_PREZZI_Bologna_L import prezzo_FRUMENTO_DURO_CRUSCA_CRUSCHELLO_TRITELLO_B
            prezzo_FRUMENTO_DURO_CRUSCA_CRUSCHELLO_TRITELLO_B = float(prezzo_FRUMENTO_DURO_CRUSCA_CRUSCHELLO_TRITELLO_B)
            S.append('cruschello di frumento duro')
            ITEM = 'cruschello.dur'
            ITEMS.append(ITEM)
            ARRAYS.append(CRUSCHFRUDU_arr)
            ARR.append(CRUSCHFRUDU_arr)
            print('Alimento <CRUSCHELLO DI FRUMENTO DURO> inserito con SUCCESSO!')
            if type(prezzo_FRUMENTO_DURO_CRUSCA_CRUSCHELLO_TRITELLO_B) == float:
                PREZZI.append(prezzo_FRUMENTO_DURO_CRUSCA_CRUSCHELLO_TRITELLO_B)
                print("Prezzo della CRUSCHELLO DI FRUMENTO DURO => %f EURO/ton" % prezzo_FRUMENTO_DURO_CRUSCA_CRUSCHELLO_TRITELLO_B)
            else:
                print('%s' % prezzo_FRUMENTO_DURO_CRUSCA_CRUSCHELLO_TRITELLO_B)
        else:
            print('Alimento non disponibile con il METODO <LYS_MET>')
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')
        
                
def importa_pula_commerciale():
    try:
        global RISPUCOM_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_riso_pula_commerciale import RISPUCOM, RISPUCOM_arr
            ARRAYS.append(RISPUCOM)
        else:
            from importa_MySQLdb_riso_pula_commerciale_LYS_MET import RISPUCOM_mod, RISPUCOM_arr, PDIE_RISPUCOM, LysDI_RISPUCOM, MetDI_RISPUCOM
            ARRAYS.append(RISPUCOM_mod)
            PDIE.append(PDIE_RISPUCOM)
            PDIN.append(RISPUCOM_arr[11])
            LISINA.append(LysDI_RISPUCOM)
            METIONINA.append(MetDI_RISPUCOM)   
        S.append('pula commerciale')
        ITEM = 'pula.comm.'
        ITEMS.append(ITEM)
        ARR.append(RISPUCOM_arr)
        print('Alimento <PULA COMMERCIALE> inserito con SUCCESSO!')
        prezzo_PULA_COMMERCIALE = 350.0
        if type(prezzo_PULA_COMMERCIALE) == float:
            PREZZI.append(prezzo_PULA_COMMERCIALE)
            print("Prezzo stimato della PULA COMMERCIALE => %f EURO/ton" % prezzo_PULA_COMMERCIALE)
        else:
            print('Prezzo della PULA COMMERCIALE non disponibile')     
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_pula_vergine():
    try:
        global RISPUVER_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_riso_pula_vergine import RISPUVER, RISPUVER_arr
            ARRAYS.append(RISPUVER)
        else:
            from importa_MySQLdb_riso_pula_vergine_LYS_MET import RISPUVER_mod, RISPUVER_arr, PDIE_RISPUVER, LysDI_RISPUVER, MetDI_RISPUVER
            ARRAYS.append(RISPUVER_mod)
            PDIE.append(PDIE_RISPUVER)
            PDIN.append(RISPUVER_arr[11])
            LISINA.append(LysDI_RISPUVER)
            METIONINA.append(MetDI_RISPUVER)   
        from crea_db_PREZZI_Milano_L import prezzo_RISO_PULA_VERGINE
        S.append('pula vergine')
        ITEM = 'pula.ver.'
        ITEMS.append(ITEM)
        ARR.append(RISPUVER_arr)
        print('Alimento <PULA VERGINE> inserito con SUCCESSO!')
        prezzo_PULA_VERGINE = 350.0
        if type(prezzo_PULA_VERGINE) == float:
            PREZZI.append(prezzo_PULA_VERGINE)
            print("Prezzo stimato della PULA VERGINE => %f EURO/ton" % prezzo_PULA_VERGINE)
        else:
            print('Prezzo della PULA VERGINE non disponibile')  
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_soia_buccette():
    try:
        global SOIABUCC_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_soia_buccette import SOIABUCC, SOIABUCC_arr
            ARRAYS.append(SOIABUCC)
        else:
            from importa_MySQLdb_soia_buccette_LYS_MET import SOIABUCC_mod, SOIABUCC_arr, PDIE_SOIABUCC, LysDI_SOIABUCC, MetDI_SOIABUCC
            ARRAYS.append(SOIABUCC_mod)
            PDIE.append(PDIE_SOIABUCC)
            PDIN.append(SOIABUCC_arr[11])
            LISINA.append(LysDI_SOIABUCC)
            METIONINA.append(MetDI_SOIABUCC)   
        from crea_db_PREZZI_Milano_L import prezzo_SOIA_BUCCETTE
        S.append('buccette di soia')
        ITEM = 'bucc.soia'
        ITEMS.append(ITEM)
        ARR.append(SOIABUCC_arr)
        print('Alimento <BUCCETTE DI SOIA> inserito con SUCCESSO!')
        prezzo_BUCCETTE_SOIA = 350.0
        if type(prezzo_BUCCETTE_SOIA) == float:
            PREZZI.append(prezzo_BUCCETTE_SOIA)
            print("Prezzo stimato delle BUCCETTE DI SOIA => %f EURO/ton" % prezzo_BUCCETTE_SOIA)
        else:
            print('Prezzo delle BUCCETTE DI SOIA non disponibile') 
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_residui_distilleria():
    try:
        global MAISDIST_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_mais_residui_distilleria import MAISDIST, MAISDIST_arr
            ARRAYS.append(MAISDIST)
        else:
            from importa_MySQLdb_mais_residui_distilleria_LYS_MET import MAISDIST_mod, MAISDIST_arr, PDIE_MAISDIST, LysDI_MAISDIST, MetDI_MAISDIST
            ARRAYS.append(MAISDIST_mod)
            PDIE.append(PDIE_MAISDIST)
            PDIN.append(MAISDIST_arr[11])
            LISINA.append(LysDI_MAISDIST)
            METIONINA.append(MetDI_MAISDIST)   
        S.append('mais residui di distilleria')
        ITEM = 'mais.dist.'
        ITEMS.append(ITEM)
        ARR.append(MAISDIST_arr)
        print('Alimento <RESIDUI DI DISTILLERIA> inserito con SUCCESSO!')
        prezzo_RESIDUI_DISTILLERIA = 350.0
        if type(prezzo_RESIDUI_DISTILLERIA) == float:
            PREZZI.append(prezzo_RESIDUI_DISTILLERIA)
            print("Prezzo stimato dei RESIDUI DI DISTILLERIA => %f EURO/ton" % prezzo_RESIDUI_DISTILLERIA)
        else:
            print('Prezzo dei RESIDUI DI DISTILLERIA non disponibile')    
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_orzo_radichette_malto():
    try:
        global ORRADMAL_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_orzo_radichette_malto import ORRADMAL, ORRADMAL_arr
            ARRAYS.append(ORRADMAL)
        else:
            from importa_MySQLdb_orzo_radichette_malto_LYS_MET import ORRADMAL_mod, ORRADMAL_arr, PDIE_ORRADMAL, LysDI_ORRADMAL, MetDI_ORRADMAL
            ARRAYS.append(ORRADMAL_mod)
            PDIE.append(PDIE_ORRADMAL)
            PDIN.append(ORRADMAL_arr[11])
            LISINA.append(LysDI_ORRADMAL)
            METIONINA.append(MetDI_ORRADMAL)   
        S.append("radichette di malto d'orzo")
        ITEM = "rad.malto"
        ITEMS.append(ITEM)
        ARR.append(ORRADMAL_arr) 
        print('Alimento <RADICHETTE DI MALTO> inserito con SUCCESSO!')
        prezzo_RADICHETTE_MALTO = 350.0
        if type(prezzo_RADICHETTE_MALTO) == float:
            PREZZI.append(prezzo_RADICHETTE_MALTO)
            print("Prezzo stimato delle RADICHETTE DI MALTO => %f EURO/ton" % prezzo_RADICHETTE_MALTO)
        else:
            print('Prezzo delle RADICHETTE DI MALTO non disponibile')
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_orzo_trebbie_birra():
    try:
        global ORTREBIR_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_orzo_trebbie_birra import ORTREBIR, ORTREBIR_arr
            ARRAYS.append(ORTREBIR)
        else:
            from importa_MySQLdb_orzo_trebbie_birra_LYS_MET import ORTREBIR_mod, ORTREBIR_arr, PDIE_ORTREBIR, LysDI_ORTREBIR, MetDI_ORTREBIR
            ARRAYS.append(ORTREBIR_mod)
            PDIE.append(PDIE_ORTREBIR)
            PDIN.append(ORTREBIR_arr[11])
            LISINA.append(LysDI_ORTREBIR)
            METIONINA.append(MetDI_ORTREBIR)   
        S.append("trebbie di birra d'orzo")
        ITEM = "trebb.birra"
        ITEMS.append(ITEM)
        ARR.append(ORTREBIR_arr)
        print("Alimento <TREBBIE DI BIRRA D'ORZO> inserito con SUCCESSO!")
        prezzo_TREBBIE_BIRRA = 350.0
        if type(prezzo_TREBBIE_BIRRA) == float:
            PREZZI.append(prezzo_TREBBIE_BIRRA)
            print("Prezzo stimato delle TREBBIE DI BIRRA D'ORZO => %f EURO/ton" % prezzo_TREBBIE_BIRRA)
        else:
            print("Prezzo delle TREBBIE DI BIRRA D'ORZO non disponibile")    
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_cocco_pannello():
    try:
        global COCPANN_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_cocco_pannello import COCPANN_arr
            S.append('pannello di cocco')
            ITEM = 'pann.cocco'
            ITEMS.append(ITEM)
            ARRAYS.append(COCPANN_arr)
            ARR.append(COCPANN_arr)
            print("Alimento <PANNELLO DI COCCO> inserito con SUCCESSO!")
            prezzo_PANNELLO_COCCO = 350.0
            if type(prezzo_PANNELLO_COCCO) == float:
                PREZZI.append(prezzo_PANNELLO_COCCO)
                print("Prezzo stimato del PANNELLO DI COCCO => %f EURO/ton" % prezzo_PANNELLO_COCCO)
            else:
                print('Prezzo del PANNELLO DI COCCO non disponibile')        
        else:
            print('Alimento non disponibile con il METODO <LYS_MET>')
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')

        
def importa_arachide_farina_estrazione():
    try:
        global ARAFAESTR_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_arachide_farina_estrazione import ARAFAESTR, ARAFAESTR_arr
            ARRAYS.append(ARAFAESTR)
        else:
            from importa_MySQLdb_arachide_farina_estrazione_LYS_MET import ARAFAESTR_mod, ARAFAESTR_arr, PDIE_ARAFAESTR, LysDI_ARAFAESTR, MetDI_ARAFAESTR
            ARRAYS.append(ARAFAESTR_mod)
            PDIE.append(PDIE_ARAFAESTR)
            PDIN.append(ARAFAESTR_arr[11])
            LISINA.append(LysDI_ARAFAESTR)
            METIONINA.append(MetDI_ARAFAESTR)   
        from crea_db_PREZZI_Milano_L import prezzo_SOIA_FE
        S.append('F.E. di arachide')
        ITEM = 'ara.F.E.'
        ITEMS.append(ITEM)       
        ARR.append(ARAFAESTR_arr)
        print("Alimento <F.E. DI ARACHIDE> inserito con SUCCESSO!")
        PREZZI.append(prezzo_SOIA_FE)
        print("Prezzo stimato della F.E. DI ARACHIDE => %f EURO/ton" % prezzo_SOIA_FE)
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')

        
def importa_lino_farina_estrazione():
    try:
        global LIFAESTR_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_lino_farina_estrazione import LIFAESTR, LIFAESTR_arr
            ARRAYS.append(LIFAESTR)
        else:
            from importa_MySQLdb_lino_farina_estrazione_LYS_MET import LIFAESTR_mod, LIFAESTR_arr, PDIE_LIFAESTR, LysDI_LIFAESTR, MetDI_LIFAESTR
            ARRAYS.append(LIFAESTR_mod)
            PDIE.append(PDIE_LIFAESTR)
            PDIN.append(LIFAESTR_arr[11])
            LISINA.append(LysDI_LIFAESTR)
            METIONINA.append(MetDI_LIFAESTR)   
        from crea_db_PREZZI_Milano_L import prezzo_GIRASOLE_DECORTICATO_FE
        S.append('F.E. di lino')
        ITEM = 'lino F.E.'
        ITEMS.append(ITEM)
        ARR.append(LIFAESTR_arr)
        print("Alimento <F.E. DI LINO> inserito con SUCCESSO!")
        PREZZI.append(prezzo_GIRASOLE_DECORTICATO_FE)
        print("Prezzo stimato della F.E. DI LINO => %f EURO/ton" % prezzo_GIRASOLE_DECORTICATO_FE)
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_soia_farina_estrazione_45x100():
    try:
        global SOFAESTR45_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_soia_farina_estrazione_45x100 import SOFAESTR45, SOFAESTR45_arr
            ARRAYS.append(SOFAESTR45)
        else:
            from importa_MySQLdb_soia_farina_estrazione_45x100_LYS_MET import SOFAESTR45_mod, SOFAESTR45_arr, PDIE_SOFAESTR45, LysDI_SOFAESTR45, MetDI_SOFAESTR45
            ARRAYS.append(SOFAESTR45_mod)
            PDIE.append(PDIE_SOFAESTR45)
            PDIN.append(SOFAESTR45_arr[11])
            LISINA.append(LysDI_SOFAESTR45)
            METIONINA.append(MetDI_SOFAESTR45)   
        from crea_db_PREZZI_Milano_L import prezzo_SOIA_FE 
        S.append('F.E. di soia 45%')
        ITEM = 'soia F.E.45'
        ITEMS.append(ITEM)
        ARR.append(SOFAESTR45_arr)
        print('Alimento <F.E. DI SOIA 45x100> inserito con SUCCESSO!')
        if type(prezzo_SOIA_FE) == float:
            PREZZI.append(prezzo_SOIA_FE)
            print("Prezzo della F.E. DI SOIA 45x100 => %f EURO/ton" % prezzo_SOIA_FE)
        else:
            print('%s' % prezzo_SOIA_FE)
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_soia_farina_estrazione_50x100():
    try:
        global SOFAESTR50_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_soia_farina_estrazione_50x100 import SOFAESTR50, SOFAESTR50_arr
            ARRAYS.append(SOFAESTR50)
        else:
            from importa_MySQLdb_soia_farina_estrazione_50x100_LYS_MET import SOFAESTR50_mod, SOFAESTR50_arr, PDIE_SOFAESTR50, LysDI_SOFAESTR50, MetDI_SOFAESTR50
            ARRAYS.append(SOFAESTR50_mod)
            PDIE.append(PDIE_SOFAESTR50)
            PDIN.append(SOFAESTR50_arr[11])
            LISINA.append(LysDI_SOFAESTR50)
            METIONINA.append(MetDI_SOFAESTR50)   
        from crea_db_PREZZI_Milano_L import prezzo_SOIA_FE
        S.append('SOIA F.E. 50x100')
        ITEM = 'soia F.E.50'
        ITEMS.append(ITEM)
        ARR.append(SOFAESTR50_arr)
        print('Alimento <F.E. DI SOIA 50x100> inserito con SUCCESSO!')
        if type(prezzo_SOIA_FE) == float:
            PREZZI.append(prezzo_SOIA_FE)
            print("Prezzo della F.E. DI SOIA 50x100 => %f EURO/ton" % prezzo_SOIA_FE)
        else:
            print('%s' % prezzo_SOIA_FE)
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_colza_farina_estrazione():
    try:
        global COLFAESTR_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_colza_farina_estrazione import COLFAESTR, COLFAESTR_arr
            ARRAYS.append(COLFAESTR)
        else:
            from importa_MySQLdb_colza_farina_estrazione_LYS_MET import COLFAESTR_mod, COLFAESTR_arr, PDIE_COLFAESTR, LysDI_COLFAESTR, MetDI_COLFAESTR
            ARRAYS.append(COLFAESTR_mod)
            PDIE.append(PDIE_COLFAESTR)
            PDIN.append(COLFAESTR_arr[11])
            LISINA.append(LysDI_COLFAESTR)
            METIONINA.append(MetDI_COLFAESTR)   
        from crea_db_PREZZI_Milano_L import prezzo_COLZA_FE
        S.append('F.E. di colza')
        ITEM = 'colza F.E.'
        ITEMS.append(ITEM)
        ARR.append(COLFAESTR_arr)
        print('Alimento <F.E. DI COLZA> inserito con SUCCESSO!')
        if type(prezzo_COLZA_FE) == float:
            PREZZI.append(prezzo_COLZA_FE)
            print("Prezzo della F.E. DI COLZA => %f EURO/ton" % prezzo_COLZA_FE)
        else:
            print('%s' % prezzo_COLZA_FE) 
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_cotone_farina_estrazione():
    try:
        global COTFAESTR_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_cotone_farina_estrazione import COTFAESTR, COTFAESTR_arr
            ARRAYS.append(COTFAESTR)
        else:
            from importa_MySQLdb_cotone_farina_estrazione_LYS_MET import COTFAESTR_mod, COTFAESTR_arr, PDIE_COTFAESTR, LysDI_COTFAESTR, MetDI_COTFAESTR
            ARRAYS.append(COTFAESTR_mod)
            PDIE.append(PDIE_COTFAESTR)
            PDIN.append(COTFAESTR_arr[11])
            LISINA.append(LysDI_COTFAESTR)
            METIONINA.append(MetDI_COTFAESTR)   
        from crea_db_PREZZI_Milano_L import prezzo_SOIA_FE
        S.append('F.E. di cotone')
        ITEM = 'cotone F.E.'
        ITEMS.append(ITEM)
        ARR.append(COTFAESTR_arr)
        print('Alimento <F.E. DI COTONE> inserito con SUCCESSO!')
        PREZZI.append(prezzo_SOIA_FE)
        print("Prezzo stimato della F.E. DI COTONE => %f EURO/ton" % prezzo_FARINA_ESTRAZIONE_COTONE)
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')

    
def importa_cotone_semi():
    try:
        global COTSEMI_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_cotone_semi import COTSEMI, COTSEMI_arr
            ARRAYS.append(COTSEMI)
        else:
            from importa_MySQLdb_cotone_semi_LYS_MET import COTSEMI_mod, COTSEMI_arr, PDIE_COTSEMI, LysDI_COTSEMI, MetDI_COTSEMI
            ARRAYS.append(COTSEMI_mod)
            PDIE.append(PDIE_COTSEMI)
            PDIN.append(COTSEMI_arr[11])
            LISINA.append(LysDI_COTSEMI)
            METIONINA.append(MetDI_COTSEMI)   
        from crea_db_PREZZI_Bologna_L import prezzo_COTONE_B
        prezzo_COTONE_B = float(prezzo_COTONE_B)
        S.append('semi di cotone')
        ITEM = 'cotone'
        ITEMS.append(ITEM)
        ARR.append(COTSEMI_arr)
        print('Alimento <SEMI DI COTONE> inserito con SUCCESSO!')
        if type(prezzo_COTONE_B) == float:
            PREZZI.append(prezzo_COTONE_B)
            print("Prezzo dei SEMI DI COTONE => %f EURO/ton" % prezzo_COTONE_B)
        else:
            print('%s' % prezzo_COTONE_B) 
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_girasole_farina_estrazione_24x100():
    try:
        global GIRFAESTR24_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_girasole_farina_estrazione_24x100 import GIRFAESTR24_arr
            from crea_db_PREZZI_Milano_L import prezzo_GIRASOLE_DECORTICATO_FE
            S.append('F.E. di girasole 24%')
            ITEM = 'gir.F.E.24'
            ITEMS.append(ITEM)
            ARRAYS.append(GIRFAESTR24_arr)
            ARR.append(GIRFAESTR24_arr)
            print('Alimento <F.E. DI GIRASOLE 24x100> inserito con SUCCESSO!')
            if type(prezzo_GIRASOLE_DECORTICATO_FE) == float:
                PREZZI.append(prezzo_GIRASOLE_DECORTICATO_FE)
                print("Prezzo della F.E. DI GIRASOLE 24x100 => %f EURO/ton" % prezzo_GIRASOLE_DECORTICATO_FE)
            else:
                print('%s' % prezzo_GIRASOLE_DECORTICATO_FE)
        else:
            print('Alimento non disponibile con il METODO <LYS_MET>')
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def importa_girasole_farina_estrazione_34x100():
    try:
        global GIRFAESTR34_arr
        if metodo == '_CNCPS_':
            from importa_MySQLdb_girasole_farina_estrazione_34x100 import GIRFAESTR34_mod, GIRFAESTR34_arr
        else:
            from importa_MySQLdb_girasole_farina_estrazione_34x100_LYS_MET import GIRFAESTR34_mod, GIRFAESTR34_arr, PDIE_GIRFAESTR34, LysDI_GIRFAESTR34, MetDI_GIRFAESTR34
            PDIE.append(PDIE_GIRFAESTR34)
            PDIN.append(GIRFAESTR34_arr[11])
            LISINA.append(LysDI_GIRFAESTR34)
            METIONINA.append(MetDI_GIRFAESTR34)   
        from crea_db_PREZZI_Milano_L import prezzo_GIRASOLE_DECORTICATO_FE
        S.append('F.E. di girasole 34%')
        ITEM = 'gir.F.E.34'
        ITEMS.append(ITEM)
        ARRAYS.append(GIRFAESTR34_mod)
        ARR.append(GIRFAESTR34_arr)
        print('Alimento <F.E. DI GIRASOLE 34x100> inserito con SUCCESSO!')
        if type(prezzo_GIRASOLE_DECORTICATO_FE) == float:
            PREZZI.append(prezzo_GIRASOLE_DECORTICATO_FE)
            print("Prezzo della F.E. DI GIRASOLE 34x100 => %f EURO/ton" % prezzo_GIRASOLE_DECORTICATO_FE)
        else:
            print('%s' % prezzo_GIRASOLE_DECORTICATO_FE)
    except NameError:
        print('Non ho trovato alcun METODO DI CALCOLO della razione! Per favore scegline uno ed inserisci i PARAMETRI richiesti')
        print('')
        print('Hai a disposizione i seguenti metodi:')
        print('')
        print('1) <cornell _CNCPS_>')
        print('')
        print('2) <INRA LYS_MET>')
        print('')
        print('In alternativa, puoi importare i PARAMETRI inseriti precedentemente usando il bottone <importa i parametri>')


def stampa_aiuto_inserisci_alimenti():
    print('Inserisci un numero di alimenti compreso fra 3 e 10. \n')

def stampa_alimenti_scelti():
    print(S)
    print(ARR)

def stampa_aiuto_comandi():
    print('scrivi il nome del comando seguito da <.aiuto>')
    
def notdone():
    showerror('Not implemented', 'Not yet available')

def info_sistema_operativo():
    import platform
    print(platform.uname())

def metodo_americano():
    os.chdir('~/python3_PROGRAMS/PROGRAMMI_CHE_FUNZIONANO/')
    os.system('python3 scrolledtext.py Descrizione_metodo_americano.txt')

def esegui_gedit():
    os.system('gedit') 
    
def esegui_firefox_mais():
    os.system('start firefox https://teseo.clal.it/?section=granoturco_secco_Bologna_w#tabella_g_n_zootecnico1')
    
def stampa_prezzi():
    os.system('python3 stampa_PREZZI_L.py')     

def crea_listino_prezzi_alessandria():
    os.system('python3 scrape_tables_Alessandria_L.py')
    
def crea_listino_prezzi_bologna():    
    os.system('python3 esegui_esegui_scrape_tables_Bologna_L.py')
    
def crea_listino_prezzi_clal():    
    os.system('python3 scrape_tables_clal_L.py')
    
def crea_listino_prezzi_foggia():
    os.system('python3 scrape_tables_Foggia_L.py')
    
def crea_listino_prezzi_milano():    
    os.system('python3 scrape_tables_Milano_L.py')    

def crea_listino_milano():
    import os, requests, ssl, urllib.request
    import pandas as pd								
    from html.parser import HTMLParser
    from html_table_parser.parser import HTMLTableParser		
    from datetime import date, datetime, timedelta				
    from contextlib import redirect_stdout

    ssl._create_default_https_context = ssl._create_unverified_context

    pd.set_option('display.max_rows', 200)
    pd.options.display.width=None

    data_Milano = datetime.today().strftime('%d.%m.%Y')
    today = date.today()

    import datetime

    idx = (today.weekday() + 6) % 7
    Tuesday = (today - datetime.timedelta(idx)).strftime('%Y-%m-%d')
    last_Tuesday = (today - datetime.timedelta(idx+7)).strftime('%Y-%m-%d')
    last_last_Tuesday = (today - datetime.timedelta(idx+14)).strftime('%Y-%m-%d')
    last_last_last_Tuesday = (today - datetime.timedelta(idx+21)).strftime('%Y-%m-%d')

    urls = ['https://www.granariamilano.it/listino-%s/' % Tuesday, 'https://www.granariamilano.it/listino-%s/' % last_Tuesday, 'https://www.granariamilano.it/listino-%s/' % last_last_Tuesday, 'https://www.granariamilano.it/listino-%s/' % last_last_last_Tuesday]

    for i in range(len(urls)):
        if (requests.head(urls[i], allow_redirects=True).status_code == 200) == True:
            url = urls[i]
        else:
            print('Listino PREZZI <BORSA MERCI di Milano non disponibile')

    def url_get_contents(url):					 
        req = urllib.request.Request(url)			
        f = urllib.request.urlopen(req)
        return f.read()						

    xhtml = url_get_contents(url).decode('utf-8')
    p = HTMLTableParser()						
    p.feed(xhtml)							
    granaria_milano = pd.DataFrame(p.tables[1])
    print("BORSA MERCI DI Milano - %s" % url) 
    print(granaria_milano)
    
    with open('listino_prezzi_Milano.txt', 'w', encoding = "utf-8") as f:
        with redirect_stdout(f):
            print("BORSA MERCI Milano - %s" % url) 
            print(granaria_milano)


 
 
def esegui_Firefox_cornell():
    os.system('firefox https://cals.cornell.edu/animal-science/outreach-extension/publications-resources-software/cornell-net-carbohydrate-and-protein-system')


def info_PyR():
    print("BENVENUTO NEL PROGRAMMA PyR!")
    print('')
    print("PyR è un programma informatico per la formulazione della razione alimentare delle bovine da latte, destinato ai Tecnici Agrari, agli Agronomi ed ai Veterinari che operano nel settore.")
    print("Per la sua semplicità d'uso, PyR può rappresentare uno strumento utile per tutti gli allevatori che desiderino assumere il pieno controllo della razione alimentare da somministrare alle proprie bovine, senza doversi avvalere necessariamente della consulenza di un professionista.")
    print('')
    print('')
    print("DESCRIZIONE")
    print('')
    print("<PyR> è un software scritto da Piero Rivoira nel linguaggio python3 (https://www.python3.it/). Il calcolo dei fabbisogni nutritivi degli animali si basa sul sistema <_CNCPS_> (Cornell Net Carbohydrate and Protein System), sviluppato dalla Cornell University. Per bilanciare la razione in funzione dei fabbisogni PyR applica un algoritmo molto efficiente (di tipo accetta-rifiuta) il quale, costruendo una catena di Markov (https://it.wikipedia.org/wiki/Catena_di_Markov_Monte_Carlo) che ha come distribuzione stazionaria il vettore dei fabbisogni, calcola la quantità in cui ogni singolo alimento, scelto dall'utente, concorre a formare la razione finale.")
    print("Per valorizzare le produzioni aziendali l'utente ha, inoltre, la possibilità di scegliere la quantità di insilato (o di pastone) e/o di granella di mais che desidera inserire nella razione.")
    print('')
    print('')
    print("REQUISITI DI SISTEMA")
    print('')
#   print("Microsoft Windows 10 (o superiore)")
    print("Apple macOS (Mac OS X)")
    print("GNU/Linux")
#   print("Android/Linux")
    print('')
    print('                                            *	*	*') 


 
IMAGE_PATH = 'carro_sfondo.png'
WIDTH, HEIGHT = 1005, 497

# root window
root = tk.Tk()
root.geometry('{}x{}'.format(WIDTH, HEIGHT))
root.configure(bg='black')
root.title('PyR')


canvas = tk.Canvas(root, width=WIDTH, height=HEIGHT)
canvas.pack()

img = ImageTk.PhotoImage(Image.open(IMAGE_PATH).resize((WIDTH, HEIGHT), Image.ANTIALIAS))
canvas.background = img  # Keep a reference in case this code is put in a function.
bg = canvas.create_image(0, 0, anchor=tk.NW, image=img)

size = (60, 60)

toolbar = tk.Frame(root, cursor='hand2', relief=SUNKEN, bd=2, width=size[0], height=size[1])
toolbar.pack(side=BOTTOM, fill=BOTH)
# https://stackoverflow.com/questions/71257355/tkinter-toolbar-menu-button-open-drop-down-menu-gif

photo1 = ImageTk.PhotoImage(Image.open('Start.png').resize(size, Image.ANTIALIAS))
photo2 = ImageTk.PhotoImage(Image.open('mac.png').resize(size, Image.ANTIALIAS))
photo3 = ImageTk.PhotoImage(Image.open('cornell.png').resize(size, Image.ANTIALIAS))
photo4 = ImageTk.PhotoImage(Image.open('classificatori.png').resize(size, Image.ANTIALIAS))
photo5 = ImageTk.PhotoImage(Image.open('logo.png').resize(size, Image.ANTIALIAS))
photo6 = ImageTk.PhotoImage(Image.open('bilancia.png').resize(size, Image.ANTIALIAS))
photo7 = ImageTk.PhotoImage(Image.open('granaria_milano.png').resize(size, Image.ANTIALIAS))
photo8 = ImageTk.PhotoImage(Image.open('teseo.png').resize(size, Image.ANTIALIAS))
photo9 = ImageTk.PhotoImage(Image.open('mais.png').resize(size, Image.ANTIALIAS))
photo10 = ImageTk.PhotoImage(Image.open('silos.png').resize(size, Image.ANTIALIAS))
photo11 = ImageTk.PhotoImage(Image.open('pastone_integrale.png').resize(size, Image.ANTIALIAS))
photo12 = ImageTk.PhotoImage(Image.open('pastone_granella.png').resize(size, Image.ANTIALIAS))
photo13 = ImageTk.PhotoImage(Image.open('granella.png').resize(size, Image.ANTIALIAS))
photo14 = ImageTk.PhotoImage(Image.open('blue-power.png').resize(size, Image.ANTIALIAS))
photo15 = ImageTk.PhotoImage(Image.open('stampa.png').resize(size, Image.ANTIALIAS))
photo16 = ImageTk.PhotoImage(Image.open('money.png').resize(size, Image.ANTIALIAS))
photo17 = ImageTk.PhotoImage(Image.open('carro.png').resize(size, Image.ANTIALIAS))
photo18 = ImageTk.PhotoImage(Image.open('info.png').resize(size, Image.ANTIALIAS))
photo19 = ImageTk.PhotoImage(Image.open('cow.png').resize(size, Image.ANTIALIAS))
photo20 = ImageTk.PhotoImage(Image.open('parametri.png').resize(size, Image.ANTIALIAS))
photo21 = ImageTk.PhotoImage(Image.open('manual.png').resize(size, Image.ANTIALIAS))
photo22 = ImageTk.PhotoImage(Image.open('razione.png').resize(size, Image.ANTIALIAS))
photo23 = ImageTk.PhotoImage(Image.open('barplot.png').resize(size, Image.ANTIALIAS))
photo24 = ImageTk.PhotoImage(Image.open('reset.png').resize(size, Image.ANTIALIAS))
photo25 = ImageTk.PhotoImage(Image.open('eraser.png').resize(size, Image.ANTIALIAS))
photo26 = ImageTk.PhotoImage(Image.open('eraser_1.png').resize(size, Image.ANTIALIAS))
photo27 = ImageTk.PhotoImage(Image.open('pdf.png').resize(size, Image.ANTIALIAS))
# photo28 = ImageTk.PhotoImage(Image.open('pdf.png').resize(size, Image.ANTIALIAS))

  
# https://stackoverflow.com/questions/20399243/display-message-when-hovering-over-something-with-mouse-cursor-in-python
# https://pypi.org/project/tkinter-tooltip/

# app = tk.Tk()

btn1 = ttk.Button(toolbar, image=photo2, command=lambda: redirectedGuiFunc(info_sistema_operativo))
btn1.pack(side=LEFT)
ToolTip(btn1, msg="Info sistema operativo")

btn2 = ttk.Button(toolbar, image=photo18, command=lambda: redirectedGuiFunc(info_PyR))
btn2.pack(side=LEFT)
ToolTip(btn2, msg="Info Programma Razione (PyR)")

btn3 = ttk.Button(toolbar, image=photo3, command=lambda: redirectedGuiFunc(esegui_Firefox_cornell))
btn3.pack(side=LEFT)
ToolTip(btn3, msg="Visita il sito dell'università cornell")

btn4 = ttk.Button(toolbar, image=photo20, command=lambda: redirectedGuiFunc(importa_parametri))
btn4.pack(side=LEFT)
ToolTip(btn4, msg="Importa i parametri")

btn5 = ttk.Button(toolbar, image=photo19, command=lambda: redirectedGuiFunc(calcola_fabbisogni))
btn5.pack(side=LEFT)
ToolTip(btn5, msg="Calcola i fabbisogni")

btn6 = ttk.Button(toolbar, image=photo15, command=lambda: redirectedGuiFunc(stampa_fabbisogni))
btn6.pack(side=LEFT)
ToolTip(btn6, msg="Visualizza i fabbisogni")

btn7 = ttk.Button(toolbar, image=photo16, command=lambda: redirectedGuiFunc('python3 stampa_PREZZI_L.py'))
btn7.pack(side=LEFT)
ToolTip(btn7, msg="Visualizza i prezzi")

btn8 = ttk.Button(toolbar, image=photo4, command=lambda: redirectedGuiFunc('python3 crea_TABELLA_PREZZI.py'))
btn8.pack(side=LEFT)
ToolTip(btn8, msg="PDF tabella prezzi")

btn9 = ttk.Button(toolbar, image=photo7, command=lambda: redirectedGuiFunc(crea_listino_milano))
btn9.pack(side=LEFT)
ToolTip(btn9, msg="Listino prezzi Granaria Milano")

btn10 = ttk.Button(toolbar, image=photo8, command=lambda: redirectedGuiFunc(stampa_prezzi_teseo))
btn10.pack(side=LEFT)
ToolTip(btn10, msg="Listino prezzi teseo")

btn11 = ttk.Button(toolbar, image=photo22, command=lambda: redirectedGuiFunc(chiedi_nome_file_razione))
btn11.pack(side=LEFT)
ToolTip(btn11, msg="Apri l'ultima razione")

btn12 = ttk.Button(toolbar, image=photo23, command=lambda: redirectedGuiFunc(barplot))
btn12.pack(side=LEFT)
ToolTip(btn12, msg="barplot fabbisogni-apporti")

btn13 = ttk.Button(toolbar, image=photo27, command=lambda: os.system('python3 crea_REPORT.py'))
btn13.pack(side=LEFT)
ToolTip(btn13, msg="Crea REPORT in PDF (no GUI!)")

btn14 = ttk.Button(toolbar, image=photo26, command=lambda: redirectedGuiFunc(cancella_alimenti_inseriti))
btn14.pack(side=LEFT)
ToolTip(btn14, msg="Cancella gli alimenti inseriti")

btn15 = ttk.Button(toolbar, image=photo24, command=lambda: redirectedGuiFunc(resetta_tutto))
btn15.pack(side=LEFT)
ToolTip(btn15, msg="Resetta tutto")

btn16 = ttk.Button(toolbar, image=photo21, command=lambda: os.system('open MANUALE_UTENTE.pdf'))
btn16.pack(side=LEFT)
ToolTip(btn16, msg="Manuale dell'utente")

btn17 = ttk.Button(toolbar, image=photo14, command=lambda: redirectedGuiFunc(quit))
btn17.pack(side=LEFT)
ToolTip(btn17, msg="Esci dal programma")



def stampa_prezzi_PDF():
# https://www.geeksforgeeks.org/convert-text-and-text-file-to-pdf-using-python3/
    os.system('python3 stampa_PREZZI_L.py > tabella_PREZZI.txt')
    from fpdf import FPDF
    pdf = FPDF()
    pdf.add_page('L')
    pdf.set_font('Courier', size = 16)
    pdf.set_margins(20.0, 3.0)
    f = open('tabella_PREZZI.txt', 'r')
    for x in f:
        pdf.cell(250, 10, txt = x, ln = 1, align = 'C')
    pdf.output('tabella_PREZZI.pdf')
    print('Tabella riassuntiva prezzi in formato pdf creata correttamente!')



menubar = Menu(root, background='black', fg='white')
root.config(menu=menubar)


file_menu = Menu(menubar, background='black', fg='white')

file_menu.add_command(label='Salva razione con nome', command=lambda:redirectedGuiFunc(inserisci_nome_file_razione), underline=0)
file_menu.add_command(label='Salva parametri con nome', command=lambda:redirectedGuiFunc(inserisci_nome_file_parametri), underline=0)
# file_menu.add_command(label='Salva fabbisogni con nome', command=lambda:redirectedGuiFunc(inserisci_nome_file_fabbisogni), underline=0)
# file_menu.add_command(label='Salva apporti con nome', command=lambda:redirectedGuiFunc(inserisci_nome_file_apporti), underline=0)
# file_menu.add_command(label='Salva dati con nome', command=lambda:redirectedGuiFunc(inserisci_nome_file_dati), underline=0)
file_menu.add_command(label='Calcola la razione', command=lambda:redirectedGuiFunc(calcola_razione), underline=0)
file_menu.add_command(label='Esporta i dati', command=lambda:redirectedGuiFunc(esporta_dati), underline=0)
file_menu.add_command(label="Apri l'ultima razione", command=lambda: redirectedGuiFunc(apri_razione))
file_menu.add_command(label="Apri la tabella dei prezzi", command=lambda: redirectedGuiShellCmd('python3 stampa_PREZZI_L.py'))
file_menu.add_command(label='Esci', command=lambda: redirectedGuiFunc(quit))

menubar.add_cascade(label="File", menu=file_menu)           # add the File menu to the menubar


prezzi_menu = Menu(menubar, background='black', fg='white')

prezzi_menu.add_command(label='Crea il listino della Borsa di Alessandria', command=lambda: redirectedGuiShellCmd('python3 scrape_tables_Alessandria_L.py'))
prezzi_menu.add_command(label='Crea il listino della Borsa di Bologna (il programma non risponderà ai comandi per 2-3 minuti)', command=lambda: redirectedGuiShellCmd('python3 scrape_tables_Bologna_L.py'))
# prezzi_menu.add_command(label='Crea il listino della Borsa di Bologna (il programma non risponderà ai comandi per 2-3 minuti)', command=lambda: redirectedGuiShellCmd('python3 esegui_esegui_scrape_tables_Bologna_L.py'))
prezzi_menu.add_command(label='Crea il listino <CLAL> (https://teseo.clal.it/)', command=lambda: redirectedGuiShellCmd('python3 scrape_tables_clal_L.py'))
prezzi_menu.add_command(label='Crea il listino della Borsa di Foggia', command=lambda: redirectedGuiShellCmd('python3 scrape_tables_Foggia_L.py'))
prezzi_menu.add_command(label='Crea il listino della Borsa di Milano', command=lambda:redirectedGuiFunc(crea_listino_milano), underline=0)

menubar.add_cascade(label="Prezzi", menu=prezzi_menu)


def CNCPS():
    global metodo
    metodo = '_CNCPS_'
    print('Hai scelto il METODO DI CALCOLO della razione <Cornell %s>' % metodo)


CNCPS_menu = Menu(menubar, background='black', fg='white')

CNCPS_menu.add_command(label="_CNCPS_", command=lambda:redirectedGuiFunc(CNCPS))
submenu = Menu(CNCPS_menu, tearoff=True, background='black', fg='white')
submenu.add_command(label='Salva razione con nome', command=lambda:redirectedGuiFunc(inserisci_nome_file_razione), underline=0)
submenu.add_command(label='Salva parametri con nome', command=lambda:redirectedGuiFunc(inserisci_nome_file_parametri), underline=0)
submenu.add_command(label='Salva fabbisogni con nome', command=lambda:redirectedGuiFunc(inserisci_nome_file_fabbisogni), underline=0)
submenu.add_command(label='Salva apporti con nome', command=lambda:redirectedGuiFunc(inserisci_nome_file_apporti), underline=0)
submenu.add_command(label='Salva dati con nome', command=lambda:redirectedGuiFunc(inserisci_nome_file_dati), underline=0)
submenu.add_command(label='Salva quantità con nome', command=lambda:redirectedGuiFunc(inserisci_nome_file_quantità), underline=0)
submenu.add_command(label='GRUPPO BOVINE IN LATTAZIONE', command=lambda:redirectedGuiFunc(inserisci_gruppo), underline=0)
submenu.add_command(label='PESO MEDIO BOVINE IN LATTAZIONE', command=lambda:redirectedGuiFunc(peso), underline=0)
submenu.add_command(label='SETTIMANA DI LATTAZIONE', command=lambda:redirectedGuiFunc(inserisci_WOL), underline=0)
submenu.add_command(label='LIVELLO PRODUTTIVO giornaliero medio', command=lambda:redirectedGuiFunc(latte_prodotto), underline=0)
submenu.add_command(label='TENORE DI GRASSO del latte di massa', command=lambda:redirectedGuiFunc(GRASSO), underline=0)
submenu.add_command(label='TENORE DI PROTEINA del latte di massa', command=lambda:redirectedGuiFunc(proteina), underline=0)
submenu.add_command(label='TENORE DI LATTOSIO del latte di massa (se non disponibile => 4.85)', command=lambda:redirectedGuiFunc(lattosio), underline=0)
submenu.add_command(label='PREZZO MASSIMO della razione (in EURO)', command=lambda:redirectedGuiFunc(prezzo_massimo), underline=0)
submenu.add_command(label='N° DI REPLICHE', command=lambda:redirectedGuiFunc(numero_di_repliche), underline=0)

CNCPS_menu.add_cascade(label='Inserisci i parametri', menu=submenu, underline=0)
CNCPS_menu.add_command(label='Salva i parametri su file', command=lambda:redirectedGuiFunc(salva_parametri_CNCPS_su_file))
CNCPS_menu.add_command(label='Importa i parametri', command=lambda:redirectedGuiFunc(importa_parametri), underline=0)
CNCPS_menu.add_command(label='Visualizza i parametri inseriti', command=lambda:redirectedGuiFunc(visualizza_parametri_CNCPS_inseriti), underline=0)

CNCPS_menu.add_command(label='Calcola i fabbisogni _CNCPS_', command=lambda:redirectedGuiFunc(calcola_fabbisogni), underline=0)
CNCPS_menu.add_command(label='Visualizza i fabbisogni _CNCPS_', command=lambda:redirectedGuiFunc(stampa_fabbisogni), underline=0)
CNCPS_menu.add_command(label='Calcola la razione', command=lambda:redirectedGuiFunc(calcola_razione), underline=0)
CNCPS_menu.add_command(label='Stampa la razione', command=stampa_razione, underline=0)

menubar.add_cascade(label="Cornell CNCPS", menu=CNCPS_menu)


def esegui_Firefox_adisseo():
    os.system('firefox https://www.adisseo.com/wp-content/uploads/2019/11/3-aa-requirements-of-dairy-cows-cg-schwab.pdf')


def LYS_MET():
    global metodo
    metodo = 'LYS_MET'
    print('Hai scelto il METODO DI CALCOLO della razione <INRA %s>' % metodo)


LYS_MET_menu = Menu(menubar, background='black', fg='white')

LYS_MET_menu.add_command(label="INRA LYS_MET", command=lambda:redirectedGuiFunc(LYS_MET))
submenu = Menu(CNCPS_menu, tearoff=True, background='black', fg='white')
submenu.add_command(label='Salva razione con nome', command=lambda:redirectedGuiFunc(inserisci_nome_file_razione), underline=0)
submenu.add_command(label='Salva parametri con nome', command=lambda:redirectedGuiFunc(inserisci_nome_file_parametri), underline=0)
submenu.add_command(label='Salva fabbisogni con nome', command=lambda:redirectedGuiFunc(inserisci_nome_file_fabbisogni), underline=0)
submenu.add_command(label='Salva apporti con nome', command=lambda:redirectedGuiFunc(inserisci_nome_file_apporti), underline=0)
submenu.add_command(label='Salva dati con nome', command=lambda:redirectedGuiFunc(inserisci_nome_file_dati), underline=0)
submenu.add_command(label='Salva quantità con nome', command=lambda:redirectedGuiFunc(inserisci_nome_file_quantità), underline=0)
submenu.add_command(label='PESO MEDIO ALLA NASCITA', command=lambda:redirectedGuiFunc(inserisci_calf_weight_LYS_MET), underline=0)
submenu.add_command(label='GRUPPO BOVINE IN LATTAZIONE', command=lambda:redirectedGuiFunc(inserisci_gruppo_LYS_MET), underline=0)
submenu.add_command(label='PESO MEDIO BOVINE IN LATTAZIONE', command=lambda:redirectedGuiFunc(peso_LYS_MET), underline=0)
submenu.add_command(label='ETÀ MEDIA BOVINE IN LATTAZIONE (mesi)', command=lambda:redirectedGuiFunc(inserisci_cow_age_LYS_MET), underline=0)
submenu.add_command(label='SETTIMANA DI LATTAZIONE', command=lambda:redirectedGuiFunc(inserisci_WOL_LYS_MET), underline=0)
submenu.add_command(label='SETTIMANA DI GRAVIDANZA', command=lambda:redirectedGuiFunc(inserisci_WOP_LYS_MET), underline=0)
submenu.add_command(label='LIVELLO PRODUTTIVO giornaliero medio', command=lambda:redirectedGuiFunc(latte_prodotto_LYS_MET), underline=0)
submenu.add_command(label='TENORE DI GRASSO del latte di massa', command=lambda:redirectedGuiFunc(GRASSO_LYS_MET), underline=0)
submenu.add_command(label='TENORE DI PROTEINA del latte di massa', command=lambda:redirectedGuiFunc(proteina_LYS_MET), underline=0)
submenu.add_command(label='TENORE DI LATTOSIO del latte di massa (se non disponibile => 4.85)', command=lambda:redirectedGuiFunc(lattosio_LYS_MET), underline=0)
submenu.add_command(label='PREZZO MASSIMO della razione (in EURO)', command=lambda:redirectedGuiFunc(prezzo_massimo_LYS_MET), underline=0)
submenu.add_command(label='N° DI REPLICHE', command=lambda:redirectedGuiFunc(numero_di_repliche_LYS_MET), underline=0)

LYS_MET_menu.add_cascade(label='Inserisci i parametri', menu=submenu, underline=0)
LYS_MET_menu.add_command(label='Salva i parametri su file', command=lambda:redirectedGuiFunc(salva_parametri_LYS_MET_su_file))
LYS_MET_menu.add_command(label='Importa i parametri', command=lambda:redirectedGuiFunc(importa_parametri), underline=0)
LYS_MET_menu.add_command(label='Visualizza i parametri inseriti', command=lambda:redirectedGuiFunc(visualizza_parametri_LYS_MET_inseriti), underline=0)
LYS_MET_menu.add_command(label='Calcola i fabbisogni LYS_MET', command=lambda:redirectedGuiFunc(calcola_fabbisogni), underline=0)
LYS_MET_menu.add_command(label='Visualizza i fabbisogni LYS_MET', command=lambda:redirectedGuiFunc(stampa_fabbisogni), underline=0)
LYS_MET_menu.add_command(label='Calcola la razione', command=lambda:redirectedGuiFunc(calcola_razione), underline=0)
LYS_MET_menu.add_command(label='Stampa la razione', command=stampa_razione, underline=0)

menubar.add_cascade(label="INRA LYSeMET", menu=LYS_MET_menu)



### MENÙ INSERIMENTO quantità ###


                                     ### FORAGGI quantità ###


FORAGGI_quantità_menu = Menu(menubar, background='black', fg='white')

FORAGGI_quantità_menu.add_command(label='Mais insilato', command=lambda: redirectedGuiFunc(apporto_insilato_mais), underline=0)
FORAGGI_quantità_menu.add_command(label='Mais pastone granella', command=lambda: redirectedGuiFunc(apporto_pastone_mais_granella), underline=0)
FORAGGI_quantità_menu.add_command(label='Mais pastone integrale', command=lambda: redirectedGuiFunc(apporto_pastone_mais_integrale), underline=0)
FORAGGI_quantità_menu.add_command(label='Loietto insilato', command=lambda: redirectedGuiFunc(apporto_insilato_loietto), underline=0)
FORAGGI_quantità_menu.add_command(label='Fieno di loietto', command=lambda: redirectedGuiFunc(apporto_fieno_loietto), underline=0)
FORAGGI_quantità_menu.add_command(label='Fieno medica I taglio', command=lambda: redirectedGuiFunc(apporto_fieno_medica_I_taglio), underline=0)
FORAGGI_quantità_menu.add_command(label='Fieno medica II taglio', command=lambda: redirectedGuiFunc(apporto_fieno_medica_II_taglio), underline=0)
FORAGGI_quantità_menu.add_command(label='Fieno silos medica', command=lambda: redirectedGuiFunc(apporto_fieno_silos_medica), underline=0)
FORAGGI_quantità_menu.add_command(label='Fieno prato stabile I taglio', command=lambda: redirectedGuiFunc(apporto_fieno_prato_stabile_I_taglio), underline=0)
FORAGGI_quantità_menu.add_command(label='Fieno prato stabile II taglio', command=lambda: redirectedGuiFunc(apporto_fieno_prato_stabile_II_taglio), underline=0)





menubar.add_cascade(label='FORAGGI Q', underline=0, menu=FORAGGI_quantità_menu)



                                     ### CEREALI quantità ###


CEREALI_quantità_menu = Menu(menubar, background='black', fg='white')

CEREALI_quantità_menu.add_command(label='Avena', command=lambda: redirectedGuiFunc(apporto_avena), underline=0)
CEREALI_quantità_menu.add_command(label='Frumento tenero', command=lambda: redirectedGuiFunc(apporto_frumento_tenero), underline=0)
CEREALI_quantità_menu.add_command(label='Mais granella', command=lambda: redirectedGuiFunc(apporto_mais_granella), underline=0)
CEREALI_quantità_menu.add_command(label='Orzo', command=lambda: redirectedGuiFunc(apporto_orzo), underline=0)
CEREALI_quantità_menu.add_command(label='Sorgo', command=lambda: redirectedGuiFunc(apporto_sorgo), underline=0)
CEREALI_quantità_menu.add_command(label='Triticale', command=lambda: redirectedGuiFunc(apporto_triticale), underline=0)

menubar.add_cascade(label='CEREALI Q', underline=0, menu=CEREALI_quantità_menu)



                                     ### FONTI PROTEICHE quantità ###


fonti_proteiche_quantità_menu = Menu(menubar, background='black', fg='white')

fonti_proteiche_quantità_menu.add_command(label='Arachide F.E.', command=lambda: redirectedGuiFunc(apporto_arachide_farina_estrazione), underline=0)
fonti_proteiche_quantità_menu.add_command(label='Colza F.E.', command=lambda: redirectedGuiFunc(apporto_colza_farina_estrazione), underline=0)
fonti_proteiche_quantità_menu.add_command(label='Cotone F.E.', command=lambda: redirectedGuiFunc(apporto_cotone_farina_estrazione), underline=0)
fonti_proteiche_quantità_menu.add_command(label='Cotone semi', command=lambda: redirectedGuiFunc(apporto_cotone_semi), underline=0)
fonti_proteiche_quantità_menu.add_command(label='Erba medica disidratata 15x100', command=lambda: redirectedGuiFunc(apporto_erba_medica_disidratata_15x100), underline=0)
fonti_proteiche_quantità_menu.add_command(label='Erba medica disidratata 17x100', command=lambda: redirectedGuiFunc(apporto_erba_medica_disidratata_17x100), underline=0)
fonti_proteiche_quantità_menu.add_command(label='Favino', command=lambda: redirectedGuiFunc(apporto_favino), underline=0)
fonti_proteiche_quantità_menu.add_command(label='Girasole F.E. 24x100', command=lambda: redirectedGuiFunc(apporto_girasole_farina_estrazione_24x100), underline=0)
fonti_proteiche_quantità_menu.add_command(label='Girasole F.E. 34x100', command=lambda: redirectedGuiFunc(apporto_girasole_farina_estrazione_34x100), underline=0)
fonti_proteiche_quantità_menu.add_command(label='Lino F.E.', command=lambda: redirectedGuiFunc(apporto_lino_farina_estrazione), underline=0)
fonti_proteiche_quantità_menu.add_command(label='Lupino', command=lambda: redirectedGuiFunc(apporto_lupino), underline=0)
fonti_proteiche_quantità_menu.add_command(label='Mais semola glutinata', command=lambda: redirectedGuiFunc(apporto_mais_semola_glutinata), underline=0)
fonti_proteiche_quantità_menu.add_command(label="Radichette di malto d'orzo", command=lambda: redirectedGuiFunc(apporto_malto_orzo_radichette), underline=0)
fonti_proteiche_quantità_menu.add_command(label="Trebbie di birra d'orzo", command=lambda: redirectedGuiFunc(apporto_orzo_trebbie_birra), underline=0)
fonti_proteiche_quantità_menu.add_command(label="Pisello", command=lambda: redirectedGuiFunc(apporto_pisello), underline=0)
fonti_proteiche_quantità_menu.add_command(label="Proteina di patata", command=lambda: redirectedGuiFunc(apporto_proteina_patata), underline=0)
fonti_proteiche_quantità_menu.add_command(label="Soia F.E. 45x100", command=lambda: redirectedGuiFunc(apporto_soia_farina_estrazione_45x100), underline=0)
fonti_proteiche_quantità_menu.add_command(label='Soia F.E. 50x100', command=lambda: redirectedGuiFunc(apporto_soia_farina_estrazione_50x100), underline=0)


menubar.add_cascade(label='PROT. Q', underline=0, menu=fonti_proteiche_quantità_menu)







### MENÙ INSERIMENTO AUTOMATICO ###


                                     ### FORAGGI AUTOMATICO ###


FORAGGI_menu = Menu(menubar, background='black', fg='white')

FORAGGI_menu.add_command(label='Erba loietto', command=lambda: redirectedGuiFunc(importa_erba_loietto), underline=0)
FORAGGI_menu.add_command(label='Erba medica di II taglio', command=lambda: redirectedGuiFunc(importa_erba_medica_II_taglio), underline=0)
FORAGGI_menu.add_command(label='Erba medica disidratata al 15%', command=lambda: redirectedGuiFunc(importa_erba_medica_disidratata_15x100), underline=0)
FORAGGI_menu.add_command(label='Erba medica disidratata al 17%', command=lambda: redirectedGuiFunc(importa_erba_medica_disidratata_17x100), underline=0)
FORAGGI_menu.add_command(label='Erba prato stabile', command=lambda: redirectedGuiFunc(importa_erba_prato_stabile), underline=0)
FORAGGI_menu.add_command(label='Insilato di loietto', command=lambda: redirectedGuiFunc(importa_insilato_loietto), underline=0)
FORAGGI_menu.add_command(label='Insilato di mais', command=lambda: redirectedGuiFunc(importa_insilato_mais), underline=0)
FORAGGI_menu.add_command(label='Pastone di mais granella', command=lambda: redirectedGuiFunc(importa_pastone_mais_granella), underline=0)
FORAGGI_menu.add_command(label='Pastone di mais integrale', command=lambda: redirectedGuiFunc(importa_pastone_mais_integrale), underline=0)
FORAGGI_menu.add_command(label='Fieno di loietto', command=lambda: redirectedGuiFunc(importa_fieno_loietto), underline=0)
FORAGGI_menu.add_command(label='Fieno di medica di I taglio', command=lambda: redirectedGuiFunc(importa_fieno_medica_I_taglio), underline=0)
FORAGGI_menu.add_command(label='Fieno di medica di II taglio', command=lambda: redirectedGuiFunc(importa_fieno_medica_II_taglio), underline=0)
FORAGGI_menu.add_command(label='Fieno silos di erba medica', command=lambda: redirectedGuiFunc(importa_fieno_silos_medica), underline=0)
FORAGGI_menu.add_command(label='Fieno di prato stabile di I taglio', command=lambda: redirectedGuiFunc(importa_fieno_prato_stabile_I_taglio), underline=0)
FORAGGI_menu.add_command(label='Fieno di prato stabile di II taglio', command=lambda: redirectedGuiFunc(importa_fieno_prato_stabile_II_taglio), underline=0)
FORAGGI_menu.add_command(label='Paglia di frumento', command=lambda: redirectedGuiFunc(importa_paglia_frumento), underline=0)

menubar.add_cascade(label='Foraggi A', underline=0, menu=FORAGGI_menu)


                                     ### CEREALI AUTOMATICO ###


CEREALI_menu = Menu(menubar, background='black', fg='white')

CEREALI_menu.add_command(label='Avena', command=lambda: redirectedGuiFunc(importa_avena), underline=0)
CEREALI_menu.add_command(label='Frumento tenero', command=lambda: redirectedGuiFunc(importa_frumento_tenero), underline=0)
CEREALI_menu.add_command(label='Mais granella', command=lambda: redirectedGuiFunc(importa_mais_granella), underline=0)
CEREALI_menu.add_command(label='Orzo', command=lambda: redirectedGuiFunc(importa_orzo), underline=0)
CEREALI_menu.add_command(label='Sorgo', command=lambda: redirectedGuiFunc(importa_sorgo), underline=0)
CEREALI_menu.add_command(label='Triticale', command=lambda: redirectedGuiFunc(importa_triticale), underline=0)

menubar.add_cascade(label='Cereali A', underline=0, menu=CEREALI_menu)


                                     ### LEGUMINOSE AUTOMATICO ###


leguminose_menu = Menu(menubar, background='black', fg='white')

leguminose_menu.add_command(label='Soia integrale', command=lambda: redirectedGuiFunc(importa_soia_integrale), underline=0)
leguminose_menu.add_command(label='Pisello', command=lambda: redirectedGuiFunc(importa_pisello), underline=0)
leguminose_menu.add_command(label='Favino', command=lambda: redirectedGuiFunc(importa_favino), underline=0)
leguminose_menu.add_command(label='Lupino', command=lambda: redirectedGuiFunc(importa_lupino), underline=0)

menubar.add_cascade(label='Legumi A', underline=0, menu=leguminose_menu)


                                     ### SOTTOPRODOTTI AUTOMATICO ###


sottoprodottivari_menu = Menu(menubar, background='black', fg='white')

sottoprodottivari_menu.add_command(label='Germe di frumento tenero', command=lambda: redirectedGuiFunc(importa_frumento_tenero_germe), underline=0)
sottoprodottivari_menu.add_command(label='Gemma di riso', command=lambda: redirectedGuiFunc(importa_riso_gemma), underline=0)
sottoprodottivari_menu.add_command(label='Grana verde di riso', command=lambda: redirectedGuiFunc(importa_riso_grana_verde), underline=0)
sottoprodottivari_menu.add_command(label='Rottura di riso', command=lambda: redirectedGuiFunc(importa_riso_rottura), underline=0)
sottoprodottivari_menu.add_command(label='Manioca', command=lambda: redirectedGuiFunc(importa_manioca), underline=0)
sottoprodottivari_menu.add_command(label='Melasso di barbabietola', command=lambda: redirectedGuiFunc(importa_melasso_barbabietola), underline=0)
sottoprodottivari_menu.add_command(label='Melasso di canna', command=lambda: redirectedGuiFunc(importa_melasso_canna), underline=0)
sottoprodottivari_menu.add_command(label='Patate essiccate', command=lambda: redirectedGuiFunc(importa_patate_essiccate), underline=0)
sottoprodottivari_menu.add_command(label='Proteina di patata', command=lambda: redirectedGuiFunc(importa_proteina_patata), underline=0)
sottoprodottivari_menu.add_command(label='Lievito di birra', command=lambda: redirectedGuiFunc(importa_birra_lievito), underline=0)
sottoprodottivari_menu.add_command(label='Pastazzo secco di agrumi', command=lambda: redirectedGuiFunc(importa_agrumi_pastazzo_secco), underline=0)
sottoprodottivari_menu.add_command(label='Saponi di calcio', command=lambda: redirectedGuiFunc(importa_calcio_saponi), underline=0)
sottoprodottivari_menu.add_command(label='Latte magro in polvere', command=lambda: redirectedGuiFunc(importa_latte_magro_polvere), underline=0)
sottoprodottivari_menu.add_command(label='Siero di latte', command=lambda: redirectedGuiFunc(importa_latte_siero), underline=0)
sottoprodottivari_menu.add_command(label='Pula commerciale', command=lambda: redirectedGuiFunc(importa_pula_commerciale), underline=0)
sottoprodottivari_menu.add_command(label='Pula vergine', command=lambda: redirectedGuiFunc(importa_pula_vergine), underline=0)
sottoprodottivari_menu.add_command(label='Pannello di cocco', command=lambda: redirectedGuiFunc(importa_cocco_pannello), underline=0)

menubar.add_cascade(label='Sottopr. A', underline=0, menu=sottoprodottivari_menu)


                                     ### FONTI DI FIBRA AUTOMATICO ###


fontidifibradigeribile_menu = Menu(menubar, background='black', fg='white')

fontidifibradigeribile_menu.add_command(label='Tritello di frumento', command=lambda: redirectedGuiFunc(importa_frumento_tritello), underline=0)
fontidifibradigeribile_menu.add_command(label='Farinaccio di frumento tenero', command=lambda: redirectedGuiFunc(importa_frumento_tenero_farinaccio), underline=0)
fontidifibradigeribile_menu.add_command(label='Farinaccio di frumento duro', command=lambda: redirectedGuiFunc(importa_frumento_duro_farinaccio), underline=0)
fontidifibradigeribile_menu.add_command(label='Glutine di mais', command=lambda: redirectedGuiFunc(importa_mais_glutine), underline=0)
fontidifibradigeribile_menu.add_command(label='Semola glutinata di mais', command=lambda: redirectedGuiFunc(importa_mais_semola_glutinata), underline=0)
fontidifibradigeribile_menu.add_command(label='Farinaccio di riso', command=lambda: redirectedGuiFunc(importa_riso_farinaccio), underline=0)
fontidifibradigeribile_menu.add_command(label='Polpe surpressate di bietola', command=lambda: redirectedGuiFunc(importa_bietola_polpe_surpressate), underline=0)
fontidifibradigeribile_menu.add_command(label='Polpe secche di bietola', command=lambda: redirectedGuiFunc(importa_bietola_polpe_secche), underline=0)
fontidifibradigeribile_menu.add_command(label='Polpa denocciolata di carruba', command=lambda: redirectedGuiFunc(importa_carruba_polpa_denocciolata), underline=0)
fontidifibradigeribile_menu.add_command(label='Crusca di frumento tenero', command=lambda: redirectedGuiFunc(importa_crusca_frumento_tenero), underline=0)
fontidifibradigeribile_menu.add_command(label='Crusca di frumento duro', command=lambda: redirectedGuiFunc(importa_crusca_frumento_duro), underline=0)
fontidifibradigeribile_menu.add_command(label='Cruschello di frumento tenero', command=lambda: redirectedGuiFunc(importa_cruschello_frumento_tenero), underline=0)
fontidifibradigeribile_menu.add_command(label='Cruschello di frumento duro', command=lambda: redirectedGuiFunc(importa_cruschello_frumento_duro), underline=0)
fontidifibradigeribile_menu.add_command(label='Buccette di soia', command=lambda: redirectedGuiFunc(importa_soia_buccette), underline=0)
fontidifibradigeribile_menu.add_command(label='Mais residui di distilleria', command=lambda: redirectedGuiFunc(importa_residui_distilleria), underline=0)
fontidifibradigeribile_menu.add_command(label="Radichette di malto d'orzo", command=lambda: redirectedGuiFunc(importa_orzo_radichette_malto), underline=0)
fontidifibradigeribile_menu.add_command(label="Trebbie di birra d'orzo", command=lambda: redirectedGuiFunc(importa_orzo_trebbie_birra), underline=0)
fontidifibradigeribile_menu.add_command(label="Semi di cotone", command=lambda: redirectedGuiFunc(importa_cotone_semi), underline=0)

menubar.add_cascade(label='Fibra dig. A', underline=0, menu=fontidifibradigeribile_menu)


                                     ### FONTI PROTEICHE AUTOMATICO ###


farinediestrazione_menu = Menu(menubar, background='black', fg='white')

farinediestrazione_menu.add_command(label='F.E. di arachide', command=lambda: redirectedGuiFunc(importa_arachide_farina_estrazione), underline=0)
farinediestrazione_menu.add_command(label='F.E. di lino', command=lambda: redirectedGuiFunc(importa_lino_farina_estrazione), underline=0)
farinediestrazione_menu.add_command(label='F.E. di soia 45%', command=lambda: redirectedGuiFunc(importa_soia_farina_estrazione_45x100), underline=0)
farinediestrazione_menu.add_command(label='F.E. di soia 50%', command=lambda: redirectedGuiFunc(importa_soia_farina_estrazione_50x100), underline=0)
farinediestrazione_menu.add_command(label='F.E. di colza', command=lambda: redirectedGuiFunc(importa_colza_farina_estrazione), underline=0)
farinediestrazione_menu.add_command(label='F.E. di cotone', command=lambda: redirectedGuiFunc(importa_cotone_farina_estrazione), underline=0)
farinediestrazione_menu.add_command(label='F.E. di girasole 24%', command=lambda: redirectedGuiFunc(importa_girasole_farina_estrazione_24x100), underline=0)
farinediestrazione_menu.add_command(label='F.E. di girasole 34%', command=lambda: redirectedGuiFunc(importa_girasole_farina_estrazione_34x100), underline=0)
 
menubar.add_cascade(label='Farine Estraz. A', underline=0, menu=farinediestrazione_menu)

root.configure(background='light sea green')
root.mainloop()


